[{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"SEIRD model","text":"document introduces deterministic SEIRD model, foundation around many, advanced models COVID-19 transmission dynamics based (including models within package). vignette, explain model represents, show can used understand epidemic dynamics typical “waves” infection seen COVID-19 pandemic.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD.html","id":"the-seird-model","dir":"Articles","previous_headings":"","what":"The SEIRD Model","title":"SEIRD model","text":"SEIRD model example compartmental model mathematical epidemiology (Anderson May 1992). types models, individuals assumed particular point time belong one number “compartments”: discrete containers individuals within assumed state. SEIRD model, five compartments / states: Susceptible, Exposed, Infectious, Recovered Dead. Susceptible individuals (\\(S\\)) exposed virus. Exposed individuals (\\(E\\)) exposed virus infected yet infectious others – latent period. Infectious individuals (\\(\\)) can spread virus others. Recovered individuals (\\(R\\)) longer infectious, , model, acquired immunity return susceptible population. individuals, however, unfortunately recover infection die result, falling dead state (\\(D\\)). assuming individuals belong one states, model effectively assumes information outside states unimportant transmission. , individual’s age, location pre-existing medical conditions may , example, unnaccounted model. COVID-19 transmission, assumption unlikely hold, since know individuals’ age , instance, strongly influence susceptibility death (Verity et al. 2020). SEIRD model can, however, still used approximate aggregate dynamics population since captures dominant features human--human epidemic dynamics. compartmental models, individuals can move states following one predefined set paths. SEIRD model, susceptible individuals can become infected virus exposure infectious individual. , can move susceptible compartment exposed. help visualise , can print compartmental model diagram . requires us first instantiate SEIRD model object. Later use run simulations, , now, just print model structure via ode_structure_diagram. susceptible exposed transition illustrated left-hand nodes graph indicated \\(S\\rightarrow E\\) transition. Exposed (\\(E\\)) individuals become infectious (\\(\\)) time transition latent period. infectious individuals, two potential transitions: either individual recovers enter recovered state (\\(R\\)) remain forever; die, entering dead state (\\(D\\)). models package, assumed population size sufficiently large can view number individuals given compartment continuous scale. also assume process governing dynamics deterministic: , given current state system (.e. numbers individuals \\(S\\), \\(E\\), \\(\\), \\(R\\) \\(D\\) compartments), can perfectly forecast future behaviour. reality, unlikely hold since model neglects consider myriad factors can influence resultant epidemic. Indeed, stochastic models try account unobserved elements assuming randomness plays role underlying dynamics. Nevertheless, many instances, particularly population size large, assuming deterministic system dynamics may give good approximation mean equivalent stochastic systems (Erban, Chapman, Maini 2007). Additionally, modelling framework use assumes system changes continuously time. Specifically, system assumes changes compartments governed system coupled ordinary differential equations (ODEs). example equation : \\[\\frac{\\text{d}S}{\\text{d}t} = -\\text{newly exposed} = -\\beta S ,\\] left-hand side gives rate growth susceptible compartment. Since, , modelled births natural deaths (.e. non-COVID-19 deaths), way number susceptible individuals changes individuals becoming exposed infection. model, assume individuals “well-mixed” – , susceptible individual can potentially contact infected individual population: means \\(S * \\) contacts susceptible infected individuals point time. Note, unlikely case reality, since populations highly structured, geographically societally, meaning individuals interact mostly people immediate social group. model, rate contacts susceptible infected individual results transmission given \\(\\beta>0\\), meaning overall rate susceptibles become exposed given \\(\\beta * S * \\). leads decline susceptible group size, require minus sign equation \\(\\frac{\\text{d}S}{\\text{d}t}\\). Note \\(\\beta\\) rate (per unit time) susceptible individual becomes infected contact infected individual. probability sometimes mistakenly labelled \\(\\beta > 1\\) possible. full SEIRD model consists four ODEs coupled together: first governs behaviour susceptible individuals, already introduced. next equation governs growth exposed compartment: \\[\\frac{\\text{d}E}{\\text{d}t} = \\text{newly exposed} - \\text{newly infectious} = \\beta S -\\kappa E,\\] rate change given difference flow compartment due individuals newly exposed flow , newly become infectious. (represent two arrows going \\(E\\) compartment arrow graph .) next compartment consider infectious. compartment grows size newly infectious individuals flow ; time, infectious recover , unfortunately, others die, reduce growth rate: \\[\\frac{\\text{d}}{\\text{d}t} = \\text{newly infectious} - \\text{newly recovered} - \\text{deaths} = \\kappa E - (\\gamma + \\mu) ,\\] , \\(\\gamma>0\\) dictates rate infectious individuals recover; \\(\\mu>0\\) dictates rate death infection. final two compartments recovered dead individuals take form: \\[\\frac{\\text{d}R}{\\text{d}t} = \\text{newly recovered} = \\gamma ,\\] \\[\\frac{\\text{d}D}{\\text{d}t} = \\text{deaths} = \\mu .\\] note natural births deaths – words, unrelated infection – considered model. Therefore, SEIRD model suitable diseases span short period time, natural births deaths significantly affect stock susceptible individuals. Overall, , system ODEs describing compartment populations evolve time : \\[\\frac{\\text{d}S}{\\text{d}t} = -\\beta S ,\\] \\[\\frac{\\text{d}E}{\\text{d}t} = \\beta S -\\kappa E,\\] \\[\\frac{\\text{d}}{\\text{d}t} =\\kappa E - (\\gamma + \\mu) ,\\] \\[\\frac{\\text{d}R}{\\text{d}t} = \\gamma ,\\] \\[\\frac{\\text{d}D}{\\text{d}t} = \\mu .\\] specified form growth rate compartments, need specify initial sizes compartments, via initial conditions: \\[S(0) = S_\\text{init},\\ E(0) = E_\\text{init},\\ (0) = I_\\text{init},\\ R(0) = R_\\text{init},\\ D(0) = D_\\text{init}.\\] system ODEs initial conditions specified, can solve states time, resulting \\(S(t), E(t), (t), R(t)\\) \\(D(t)\\). Since system ODEs analytic solution, system solved numerically, using numerical integrator. package, use R package deSolve (Soetaert, Petzoldt, Setzer 2010) numerically integrate system, user can specify numerical integrators use (default, LSODA (Petzold 1983)). implementation model package, variables normalized \\(S(t) + E(t) + (t) + R(t) + D(t) \\equiv 1\\) given \\(t\\). means state variables represents fraction population states given point time. Typical epidemic data includes number new cases new deaths occurring time interval. , define “cases” mean someone infected virus1. calculate number cases arising time period, track cumulative number cases following equation: \\[\\frac{\\text{d}C}{\\text{d}t} = \\text{newly exposed} = \\beta S ,\\] assume \\(C(0) = 0\\). number new infections arising two time intervals \\(t_1\\) \\(t_2\\) : \\(C(t_2) - C(t_1)\\). Similarly, number deaths occuring interval difference cumulative deaths: \\(D(t_2) - D(t_1)\\).","code":"# create model object my_model <- SEIRD()  # print structure ode_structure_diagram(my_model)"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD.html","id":"steady-states","dir":"Articles","previous_headings":"","what":"Steady states","title":"SEIRD model","text":"can now consider whether equilibrium states system: values state variables , unless perturbed, system remain . , set right-hand sides ODEs zero. Taking equation susceptibles: \\[\\frac{\\text{d}S}{\\text{d}t} = -\\beta S = 0.\\] solutions either \\(S=0\\), case individuals left infect; \\(=0\\), case infectious individuals: words, infection imported population. Considering four ODEs, \\(=0\\) implies \\(\\frac{\\text{d}R}{\\text{d}t} = 0\\) \\(\\frac{\\text{d}D}{\\text{d}t} = 0\\). Additionally, long exposed individuals, \\(\\frac{\\text{d}E}{\\text{d}t}= 0\\) \\(\\frac{\\text{d}}{\\text{d}t}= 0\\) equilibria given \\(S=S'\\), \\(E=0\\), \\(=0\\) corresponds situation infected infectious individuals population. words, model, endemic equilibrium infection remains present throughout population; epidemic dynamics possible.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD.html","id":"using-an-seird-model-to-simulate-covid-19-dynamics","dir":"Articles","previous_headings":"","what":"Using an SEIRD model to simulate COVID-19 dynamics","title":"SEIRD model","text":"now show comomodels can used create SEIRD captures dominant characteristics unmitigated COVID-19 epidemic. crucial step using compartmental models transmission dynamics parameterisation different parameter ranges allow qualitatively quantitatively different dynamics. two ways estimate parameters models: ) use data collected laboratory field estimate individual parameters; ii) fit models field data , , estimate potentially collective parameters. limitations approaches. first account uncertainty one parameter might influence estimates another: higher value \\(\\beta\\) can offset increased value \\(\\mu\\) result similar case counts, instance. second approach generally allows subset parameters estimated, since available data sparse insufficient jointly determine . crucial thing, however, approaches use data determine parameters. practically infectious diseases modelled, available data pin model’s parameters single set. thus important determine whether conclusions modelling – whether new viral variant lead country’s healthcare infrastructure overrun, instance – sensitive parameter choices assumed. , follow first approach parameterising SEIRD model, show later sensitivity analysis can performed. SEIRD model four transmission parameters: \\(\\beta\\), \\(\\kappa\\), \\(\\gamma\\) \\(\\mu\\). follows, assume parameterising transmission ancestral SARS-CoV-2 strain (opposed say, Delta Omicron variants). choose \\(\\kappa=1/5.5\\), implicitly assuming average latent period 5.5 days (Xin et al. 2021). assume 0.66% individuals infected virus die (Verity et al. 2020): termed infection fatality ratio (IFR). Changing either \\(\\gamma\\) \\(\\mu\\) affects rate individuals recover die proportions recover die. , implications individual parameter values hard intuit without recourse . , choose different parameterisation makes simpler set parameters appropriate values: \\[\\begin{align} \\gamma &= \\zeta (1-\\text{IFR})\\\\ \\mu &= \\zeta \\text{IFR}. \\end{align}\\] proportion infecteds go die due infection given ratio rate death overall rate infectious compartment, definition IFR: \\[\\begin{equation} \\frac{\\zeta \\text{IFR}}{\\zeta \\text{IFR} + \\zeta (1-\\text{IFR})} = \\text{IFR}. \\end{equation}\\] average duration spent infectious compartment given : \\[\\begin{equation} \\frac{1}{\\zeta \\text{IFR} + \\zeta (1-\\text{IFR})} = \\frac{1}{\\zeta}. \\end{equation}\\] Viral load data hospitalised patients known infector-infectee pairs can used determine probability infection occurs given time infector first infected (et al. 2020): , determining distribution representing duration infectiousness. model, presymptomatic transmission estimated viral loads decline quickly within 7 days symptomatic (et al. 2020). , , assume average infectious period 7 days, resulting \\(\\zeta=1/7\\). remaining parameter, \\(\\beta\\), set value produce basic reproduction number assumed influential “report 9” Imperial College (Ferguson et al. 2020): \\(R_0=2.4\\) (see explanation \\(R_0\\) ). parameter choices, regard defaults ancestral SARS-CoV-2 transmission available convenience function. check parameters set desired, can call: Note, overall age-structured “default” transmission parameters variants also available function. example, outputs transmission parameters age-structured model Delta variant (see function documentation details). additional set parameters dictate initial conditions system. Since SARS-CoV-2 novel virus, beginning pandemic, everyone susceptible. , imagine small number infectious individuals entered new population, start, representing 0.0001% population. Now simulate system one year. simulation returns two objects: one data frame comprising states time. , see , time, proportion susceptible individuals declines time infection penetrates population. Initially, relatively infected individuals grows, reaching declining relatively susceptibles left. number recovered dead individuals also grows time.  simulation also outputs daily case incidence deaths. derived state variables. Incidence just difference cumulative number cases two time points, \\[ \\text{incidence(t)} = C(t) - C(t - 1),\\] since shows number cases arisen time points. Deaths also given difference, , instance, cumulative number deaths two consecutive time points: \\[ \\text{deaths(t)} = D(t) - D(t - 1).\\]","code":"# convenience function parameters <- covid_transmission_parameters() print(parameters) #> $R0 #> [1] 2.4 #>  #> $kappa #> [1] 0.1818182 #>  #> $gamma #> [1] 0.1419143 #>  #> $mu #> [1] 0.0009428571  kappa <- parameters$kappa gamma <- parameters$gamma mu <- parameters$mu R0_target <- parameters$R0 beta <- (mu + gamma) * R0_target  params <- list(beta=beta, kappa=kappa, gamma=gamma, mu=mu) transmission_parameters(my_model) <- params transmission_parameters(my_model) #> $beta #> [1] 0.3428571 #>  #> $kappa #> [1] 0.1818182 #>  #> $gamma #> [1] 0.1419143 #>  #> $mu #> [1] 0.0009428571 parameters <- covid_transmission_parameters(   variant = \"delta\",   is_age_structured = TRUE)  # here mu is age structured print(parameters$mu) #> # A tibble: 9 × 3 #>   age_lower age_upper         mu #>       <dbl>     <dbl>      <dbl> #> 1         0         9 0.00000229 #> 2        10        19 0.00001    #> 3        20        29 0.0000443  #> 4        30        39 0.000371   #> 5        40        49 0.000686   #> 6        50        59 0.000857   #> 7        60        69 0.00271    #> 8        70        79 0.00614    #> 9        80       150 0.0111 I0 <- 1e-6 inits <- list(S0=1-I0, E0=0, I0=I0, R0=0) initial_conditions(my_model) <- inits times <- seq(0, 365, by = 1) out_df <- run(my_model, times) states <- out_df$states  ggplot(states, aes(x = time, y = value)) +   geom_line(aes(color = compartment)) +   scale_color_brewer(palette = \"Dark2\") +   labs(x = \"time (days)\", y = \"value of each compartment\") +   theme(legend.position = \"bottom\", legend.title = element_blank(),         text = element_text(size = 20)) changes <- out_df$changes  ggplot(changes, aes(x = time, y = value * 1000, fill = compartment)) +   geom_bar(stat=\"identity\", position = position_dodge()) +   labs(x = \"time (days)\", y = \"rate per 1000 of the \\n population per day\") +   theme(legend.position = \"bottom\", legend.title = element_blank(),         text = element_text(size = 20)) +   scale_fill_brewer(palette = \"Dark2\")"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD.html","id":"sensitivity-analysis","dir":"Articles","previous_headings":"","what":"Sensitivity analysis","title":"SEIRD model","text":"SEIRD four transmission parameters influence type dynamics resultant system. epidemiological systems, parameters known set either fitting model data external studies. , assessing sensitivity model’s outputs input parameters crucial. section, first investigate sensitivity number deaths transmission rate, \\(\\beta\\). , run model across range different \\(\\beta\\) values plot proportions infectious.  simulations produce epidemic waves whereas others fail ? can explored basic reproductive number, \\(R_0\\), expected number people infected single infectious individual population everyone susceptible. (Note basic reproductive number unrelated initial condition recovered population.) \\(R_0>1\\), infectious individual infects one person epidemic initially grows exponentially; \\(R_0<1\\), infectious individual infects less one person epidemic fails materialise. can calculate \\(R_0\\) value? fully susceptible population, \\(S=1\\), meaning number newly infected individuals produced per unit time \\(\\beta \\). number new infections produced single infectious individual \\(\\beta\\) per unit time. determine number new infections single individual produces average, need know typical duration infectiousness. individual becomes infectious, two mechanisms stop : either recover die. overall rate occur \\(\\gamma + \\mu\\), average period individual spends infectious state \\(1/(\\gamma + \\mu)\\). , number new infections produced infected individual : \\[R_0 = \\text{new infections per unit time} \\times \\text{duration infectiousness} = \\beta /(\\gamma + \\mu).\\] can now calculate \\(R_0\\) curves using inbuilt function comomodels. colour curves according value; also make type line drawn depend whether \\(R_0>1\\).  , evident \\(R_0>1\\) required epidemic arise. , see importance \\(R_0\\) dictating whether pathogen successfully invades population.","code":"parameters <- covid_transmission_parameters()   # function to setup and run model for different beta values run_seird <- function(beta_val) {   params <- list(beta=beta_val,                  kappa=parameters$kappa,                  gamma=parameters$gamma,                  mu=parameters$mu)   model <- SEIRD(initial_conditions = inits,                 transmission_parameters=params)   times <- seq(0, 365, by = 0.1)   out_df <- run(model, times)   out_df$states }  # run model across different beta values beta_vals <- seq(0.01, 1, 0.1) for(i in seq_along(beta_vals)) {   beta_temp <- beta_vals[i]   temp <- run_seird(beta_temp) %>% mutate(beta=beta_temp)   if(i == 1)     result <- temp %>% mutate(beta=beta_temp)   else     result <- result %>% bind_rows(temp) }  # plot results result %>%    filter(compartment==\"I\") %>%    ggplot(aes(x=time, y=value, colour = beta, group=as.factor(beta))) +   geom_line() +   scale_color_viridis_c() +   xlab(\"time (days)\") +   ylab(\"Infectious proportion\") # convenience function to determine R_0 find_R0 <- function(beta_val) {   params <- params <- list(beta=beta_val,                  kappa=parameters$kappa,                  gamma=parameters$gamma,                  mu=parameters$mu)   model <- SEIRD(initial_conditions = inits,                 transmission_parameters=params)   R0(model) }  # calculate R_0 values R0_vals <- vector(length = length(beta_vals)) for(i in seq_along(beta_vals)) {   R0_vals[i] <- find_R0(beta_vals[i]) }  # create lookup lookup <- tibble(beta=beta_vals,                  R0=R0_vals)  # merge with results result <- result %>%    left_join(lookup) #> Joining, by = \"beta\"  # plot by R0 result %>%    mutate(R0_above=R0>1) %>%    filter(compartment==\"I\") %>%    ggplot(aes(x=time, y=value, colour = R0, group=as.factor(beta))) +   geom_line(aes(linetype=R0_above)) +   scale_color_viridis_c() +   scale_linetype(\"R0>1\") +   xlab(\"time (days)\") +   ylab(\"Infectious proportion\")"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD.html","id":"effective-reproduction-number","dir":"Articles","previous_headings":"","what":"Effective reproduction number","title":"SEIRD model","text":"Throughout course epidemic, fraction susceptible infection fluctuates time. , average number secondary infections produced single infected individual changes. can quantified effective reproduction number, \\(R_t\\), represents average number new infections caused infected individual time \\(t\\). obtain \\(R_t\\), simply multiply \\(R_0\\) fraction population susceptible: \\[R_t = R_0 * S(t) = \\beta S(t) /(\\gamma + \\mu).\\] can plot \\(R_t\\) time initial simulations performed. also show proportion infectious time (scaled proportion make peak clearly visible).  , see \\(R_t\\rightarrow 1\\), reach -called “herd immunity”, longer sufficient susceptibles population fuel continued epidemic growth. occurs \\(R_t<1\\), indicates: \\[\\begin{equation} S(t) < \\frac{1}{R_0}. \\end{equation}\\] critical proportion population need exposed virus achieve herd immunity : \\[\\begin{equation} R^* = 1 - \\frac{1}{R_0}. \\end{equation}\\] fraction exceeding \\(R^*\\) exposed, immunity recovered virus effectively protects haven’t.","code":"# calculate Rt R0_val <- R0(my_model) s_df <- states %>%    filter(compartment==\"S\") %>%    mutate(value=value * R0_val) %>%    mutate(compartment=\"Rt\")  # plot: blowing up I value so that peak is visible states %>%    bind_rows(s_df) %>%    mutate(value=if_else(compartment==\"I\", 10 * value, value)) %>%    filter(compartment %in% c(\"Rt\", \"I\")) %>%    ggplot(aes(x = time, y = value)) +   geom_hline(yintercept = 1, linetype=2) +   geom_line(aes(color = compartment)) +   scale_color_brewer(palette = \"Dark2\") +   labs(x = \"time (days)\", y = \"value of each compartment\") +   theme(legend.position = \"bottom\", legend.title = element_blank(),         text = element_text(size = 20))"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"SEIRD model","text":"Anderson, Roy M, Robert M May. 1992. Infectious Diseases Humans: Dynamics Control. Oxford university press. Erban, Radek, Jonathan Chapman, Philip Maini. 2007. “Practical Guide Stochastic Simulations Reaction-Diffusion Processes.” arXiv Preprint arXiv:0704.1908. Ferguson, Neil, Daniel Laydon, Gemma Nedjati Gilani, Natsuko Imai, Kylie Ainslie, Marc Baguelin, Sangeeta Bhatia, et al. 2020. “Report 9: Impact Non-Pharmaceutical Interventions (Npis) Reduce Covid19 Mortality Healthcare Demand.” , Xi, Eric HY Lau, Peng Wu, Xilong Deng, Jian Wang, Xinxin Hao, Yiu Chung Lau, et al. 2020. “Temporal Dynamics Viral Shedding Transmissibility Covid-19.” Nature Medicine 26 (5): 672–75. Petzold, Linda. 1983. “Automatic Selection Methods Solving Stiff Nonstiff Systems Ordinary Differential Equations.” SIAM Journal Scientific Statistical Computing 4 (1): 136–48. Soetaert, Karline, Thomas Petzoldt, R. Woodrow Setzer. 2010. “Solving Differential Equations R: Package deSolve.” Journal Statistical Software 33 (9): 1–25. https://doi.org/10.18637/jss.v033.i09. Verity, Robert, Lucy C Okell, Ilaria Dorigatti, Peter Winskill, Charles Whittaker, Natsuko Imai, Gina Cuomo-Dannenburg, et al. 2020. “Estimates Severity Coronavirus Disease 2019: Model-Based Analysis.” Lancet Infectious Diseases 20 (6): 669–77. Xin, Hualei, Yu Li, Peng Wu, Zhili Li, Eric H Y Lau, Ying Qin, Liping Wang, Benjamin J Cowling, Tim K Tsang, Zhongjie Li. 2021. “Estimating Latent Period Coronavirus Disease 2019 (COVID-19).” Clinical Infectious Diseases, September. https://doi.org/10.1093/cid/ciab746.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRDNPIAge.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"NPIs: age-structured model","text":"effective vaccines existed, public health interventions available governments around world non-pharmaceutical interventions (NPIs). types NPIs deployed included, amongst interventions: early detection isolation cases; mask-wearing hand hygiene measures; physical distancing, members public encouraged isolate one another; shielding vulnerable groups, example, requiring elderly individuals mix public; school closures; country- region-wide lockdowns, members public required remain homes (typically) stringent restrictions nature degree socialise. variety NPIs estimated substantially lowered COVID-19 transmission reduced burdens health systems across range countries (Flaxman et al. 2020; Li et al. 2021; Lai et al. 2020; Davies et al. 2020). , interventions likely crucial averting many COVID-19-related deaths. vignette, introduce age-structured model including NPI strategies (SEIRDNPIAge) demonstrate effect number different NPI strategies examine effects interventions. Since number aforementioned NPIs varying effects different age groups, chose account extending SEIRDAge model. start, define helper functions plotting contact matrix processing avoid repeated code.","code":"library(comomodels) library(tidyverse) #> ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── #> ✔ ggplot2 3.3.6     ✔ purrr   0.3.4 #> ✔ tibble  3.1.7     ✔ dplyr   1.0.9 #> ✔ tidyr   1.2.0     ✔ stringr 1.4.0 #> ✔ readr   2.1.2     ✔ forcats 0.5.1 #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag()  # color by age groups ggplot_results_by_compartment <- function(output, x=\"time\", y=\"value\", colour=\"age_range\",                                            labs_x = \"time (days)\", labs_y = \"fraction of the population\", text_size=20){   output %>%   ggplot(aes_string(x=x, y=y, colour=colour)) +   geom_line() +   scale_colour_viridis_d() +   labs(x = labs_x, y = labs_y) +   theme(text = element_text(size = text_size))   }  format_matrix <- function(contact_matrix, age_names) {   colnames(contact_matrix) <- age_names   contact_matrix$age_infectee <- age_names   contact_matrix %>%     pivot_longer(all_of(age_names)) %>%      rename(age_infector=name) %>%      mutate(age_infector=fct_relevel(age_infector, age_names)) %>%      mutate(age_infectee=fct_relevel(age_infectee, age_names)) }  combine_contact_matrices <- function(c_all){   c_all %>%     group_by(age_infectee, age_infector) %>%      summarise(value=sum(value)) }  combined_contact_matrices_wider <- function(c_combined){   c_combined %>%      pivot_wider(id_cols = age_infectee, names_from = age_infector,               values_from=value) %>%      ungroup() %>%      select(-age_infectee) %>% as.matrix() }"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRDNPIAge.html","id":"the-seirdnpiage-model","dir":"Articles","previous_headings":"","what":"The SEIRDNPIAge Model","title":"NPIs: age-structured model","text":"SEIRDNPIAge model consists five ODEs describing five populations susceptible, recovered, infectious, recovered dead individuals. Susceptible individuals (\\(S\\)) exposed virus. Exposed individuals (\\(E\\)) exposed virus infected yet infectious others; incubation period. Infectious individuals (\\(\\)) can spread virus others. Recovered individuals (\\(R\\)) longer infectious protected reinfection. , assume waning natural immunity, individuals recovered infection never become susceptible . Births natural deaths (.e. unrelated COVID-19 infection) considered model. infected individuals died due infection form “dead” (\\(D\\)) compartment. ODEs describing five populations evolve time : \\[\\frac{\\text{d}S_i}{\\text{d}t} = -\\beta(t) S_i \\Sigma_{j}C_{ij}(t) I_j,\\] \\[\\frac{\\text{d}E_i}{\\text{d}t} = \\beta(t) S_i \\Sigma_{j}C_{ij}(t) I_j-\\kappa E_i,\\] \\[\\frac{\\text{d}I_i}{\\text{d}t} = \\kappa E_i - (\\gamma_i + \\mu_i) I_i,\\] \\[\\frac{\\text{d}R_i}{\\text{d}t} = \\gamma_i I_i,\\] \\[\\frac{\\text{d}D_i}{\\text{d}t} = \\mu_i I_i,\\] \\(\\) represents particular age class, \\(t\\) represents time point. \\(\\kappa\\), \\(\\gamma_i\\), \\(\\mu_i\\), \\(\\nu\\) positive parameters described SEIRDAge model vignette. key parameters SEIRDNPIAge model : \\(\\beta(t)\\) \\(C_{ij}(t)\\) representing time-dependent rates infection contact matrix elements, respectively. model allows discontinuous changes either rate parameter / contact matrix time one number intervention blocks. might changes parameters represent? change \\(\\beta\\) represents change probability transmission occurs upon infectious susceptible individual meeting. \\(\\beta\\) declined, represent, instance, government imposition rule requires individuals wear masks public spaces. change contact matrix represent number NPIs: event lockdown, number daily contacts outside home likely decline; decision taken shield elderly, result decline relevant elements contact matrix pertaining group. system closed specifying initial conditions \\[S(0) = S_0,\\ E(0) = E_0,\\ (0) = I_0,\\ R(0) = R_0, \\ D(0) = 0.\\] implementation model package, variables normalized \\(S(t) + E(t) + (t) + R(t) + D(t) \\equiv 1\\) given \\(t\\). means state variables represents fraction population states given point time. calculation basic reproduction number follows next-generation matrix approach SEIRDAge model, uses non-intervention parameters calculate .","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRDNPIAge.html","id":"mimicking-the-1st-uk-lockdown","dir":"Articles","previous_headings":"","what":"Mimicking the 1st UK lockdown","title":"NPIs: age-structured model","text":"23rd March 2022, Prime Minister UK announced first lockdown country, ordering people “stay home” (IFG 2021). lockdown came legally force 26th March. June, phased reopening schools, non-essential shops reopened relaxing restrictions including “2m distancing rule”. early July, restrictions eased leading reopening pubs, restaurants hairdressers. Whilst restrictions fully eased following year, assume first lockdown lasted 26th March early July: period roughly 14 weeks. lockdown, assume overall contacts declined factor 2, similar ranges considered Imperial College’s Report 9 (Ferguson et al. 2020). first load relevant contact matrices, country-level demographics UN UK. next create model appropriate contact matrices: contact_matrix single matrix represents original contact matrix intervention applied, whereas contact_matrix_npi defines list matrices corresponding contact matrices intervention period. n_npi represents number non-overlapping NPI intervention periods: , 1. now need set initial conditions model. , assume uniform initial infected population 0.1% across age groups. remaining 99.9% population starts susceptibles. Next, need set transmission parameter values \\(\\beta\\), \\(\\kappa\\), \\(\\gamma\\) \\(\\mu\\). set age-dependent values \\(\\gamma\\) \\(\\mu\\), adopted age-dependent Infection Fatality Ratio (IFR, fraction infected individuals go die) according (Verity et al. 2020), IFR dependent \\(\\gamma\\) \\(\\mu\\): \\[ \\text{IFR}_i = \\frac{\\text{rate death age class }}{\\text{rate death age class }+ \\text{rate recovery age class }} = \\frac{\\mu_i}{\\mu_i + \\gamma_i} \\] assume average latency period (\\(1/\\kappa\\)) 5.5 days (estimated COVID-19; Xin et al. (2021)) average duration infectiousness (\\(1/\\eta\\)) 2 days (indicates , 10 days, \\(<1\\%\\) infectious, line UK policy assumes individuals pass infection 10 days; UK government (2021)). simplicity, assume symptom onset occurs time individual becomes infectious (although evidence suggests presymptomatic transmission; UK government (2021)). assume following parameterisation: \\[ \\eta = 1/{\\text{av. time noninfectious}}=1/2 \\\\ \\gamma_i = \\eta (1-\\text{IFR}_i) \\\\ \\mu_i = \\eta \\text{IFR}_i. \\] point, \\(\\kappa\\) defined; \\(\\gamma_i\\) \\(\\mu_i\\) can derived; \\(\\beta(t)\\) needs set. setter function transmission_parameters SEIRDNPIAge, parameter beta defines transmission rate age group intervention applied; whereas beta_npi defines list age-dependent transmission rates corresponds intervention period, single vector value ’s single intervention period. Consistent examples presented SEIRDAge class, choose value \\(\\beta\\) across age groups result \\(R_0\\) value (\\(R_0=2.4\\)) reported “Report 9” Imperial College London (Ferguson et al. 2020), set beta_npi \\(\\beta\\): .e. assumed change probability infection infectious susceptible individual meet – note, violated , lockdown, people likely wear masks. can check basic reproduction number expected: Now simulate system assuming single intervention \\(t=20\\) \\(t=98\\) days. Let us plot population size epidemiological group age group.  hard make clear patterns examine compartments, , next plot, zoom infectious population.  , older age groups lowest peak infectious levels. makes intuitive sense, since age group generally lowest number daily contacts. evident plot overall number daily contacts age group, peaks 15-20 age group.  number cases mirrors patterns. plot, impact lockdown period cases evident, causing discontinuous change cases \\(t=20\\) days. lockdown lifted, epidemic quickly resumes.  focus deaths, picture quite different. Deaths highest peak oldest age groups IFR groups disproportionately high.","code":"# get contact matrices for the UK ages <- seq(0, 80, 5) age_names <- vector(length = 16) for(i in seq_along(age_names)) {   age_names[i] <- paste0(ages[i], \"-\", ages[i + 1]) }  c_home <- format_matrix(contact_home$`United Kingdom of Great Britain`, age_names) %>% mutate(type=\"home\") c_work <- format_matrix(contact_work$`United Kingdom of Great Britain`, age_names) %>% mutate(type=\"work\") c_school <- format_matrix(contact_school$`United Kingdom of Great Britain`, age_names) %>% mutate(type=\"school\") c_other <- format_matrix(contact_other$`United Kingdom of Great Britain`, age_names) %>% mutate(type=\"other\")  c_all <- c_home %>%   bind_rows(c_work) %>%    bind_rows(c_school) %>%    bind_rows(c_other)  c_combined <- combine_contact_matrices(c_all) #> `summarise()` has grouped output by 'age_infectee'. You can override using the #> `.groups` argument.  # use demographic data to create normalised population fractions load(file = \"../data/population.rda\") pops = population[population$country == 'United Kingdom', ]$pop pop_fraction = pops/sum(pops)  # the contact matrix has an upper group of 80+, so we sum the remaining fractions beyond this point pop_fraction[16] = sum(pop_fraction[16:21]) pop_fraction = pop_fraction[1:16]  # reshape contact matrix into 16x16 form c_combined_wider <- combined_contact_matrices_wider(c_combined) # setting up the number of age classes n_ages <- 16 # create model n_npi = 1 # only one intervention lockdown_reduced_contacts_factor <- 2 model <- SEIRDNPIAge(n_age_categories = n_ages,                       n_npi = n_npi,                       contact_matrix = c_combined_wider,                       contact_matrix_npi = list(c_combined_wider / lockdown_reduced_contacts_factor),                       age_ranges = as.list(age_names)                       ) inits <- list(S0=pop_fraction * 0.999,               E0=rep(0, n_ages),               I0=pop_fraction * 0.001,               R0=rep(0, n_ages),               D0=rep(0, n_ages)) initial_conditions(model) <- inits # IFR for each age group # (for 80+ group we pick upper age to be 110) df <- tribble(   ~lower_age, ~upper_age, ~IFR,   0, 9, 0.00161,   10, 19, 0.00695,   20, 29, 0.0309,   30, 39, 0.0844,   40, 49, 0.161,   50, 59, 0.595,   60, 69, 1.93,   70, 79, 4.28,   80, 110, 7.80) %>%    mutate(IFR = IFR / 100) %>%    mutate(age_range=paste0(lower_age, \"-\", upper_age)) %>%    mutate(age_range=as.factor(age_range)) %>%    mutate(age_range=fct_reorder(age_range, lower_age))  # setting up kappa, eta, beta kappa <- 1 / 5.5 eta <- 1 / 2 beta <- 1.69  # assume IFR constant within age ranges of contact matrix bands get_lower_age <- function(x) {   as.numeric(substr(x, 1, regexpr(\"-\", x) - 1)) } get_upper_age <- function(x) {   as.numeric(substr(x, regexpr(\"-\", x) + 1, nchar(x))) } lower_age <- map_dbl(age_names, get_lower_age) upper_age <- map_dbl(age_names, get_upper_age) middle_age <- (lower_age + upper_age) / 2  # assume IFR is constant within age hands IFR_vals <- vector(length = length(middle_age)) IFR_getter <- function(age, df) {   for(j in 1:nrow(df)) {     if(age > df$lower_age[j] & age <= df$upper_age[j])       return(df$IFR[j])   } } IFR_vals <- map_dbl(middle_age, ~IFR_getter(., df))  # defive age-dependent gamma and mu gamma_vals <- eta * (1 - IFR_vals) mu_vals <- eta * IFR_vals  # setting up transmission parameters params <- list(beta_npi = beta, beta = beta,                kappa = kappa, gamma = gamma_vals, mu = mu_vals) transmission_parameters(model) <- params print(paste0(\"R_0 = \", round(R0(model), 2))) #> [1] \"R_0 = 2.4\" # create inteverntion intervention <- list(list(\"starts\"=20, \"stops\"=98)) interventions(model) <- intervention  # simulate for a year times <- seq(0, 365, by = 1) out_df <- run(model, times) states = out_df$states states %>%   ggplot_results_by_compartment() +   facet_wrap(~compartment) states %>%   filter(compartment==\"I\") %>%    ggplot_results_by_compartment() +   facet_wrap(~compartment) c_combined %>%    group_by(age_infectee) %>%    summarise(value=sum(value)) %>%    ggplot(aes(x=age_infectee, y=value)) +   geom_col() +   xlab(\"Age group\") +   ylab(\"Average number of daily contacts\") +   coord_flip() changes <- out_df$changes changes %>%   filter(compartment==\"Incidence\") %>%    ggplot_results_by_compartment(labs_y = \"case fraction\") changes %>%   filter(compartment==\"Deaths\") %>%    ggplot_results_by_compartment(labs_y = \"deaths fraction\")"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRDNPIAge.html","id":"comparison-with-the-no-lockdown-scenario","dir":"Articles","previous_headings":"Mimicking the 1st UK lockdown","what":"Comparison with the no lockdown scenario","title":"NPIs: age-structured model","text":"evaluate effectiveness lockdown intervention, can compare “baseline” scenario nothing. Note, baseline may fairly unlikely , even government chose implement lockdown, populace likely change behaviour response rising cases. baseline, simulate SEIRDAge model using non-intervention parameters. simulations run, can compare daily cases across lockdown baseline scenarios. illustrates common trend across age groups: intervention decreases peak case load lengthens epidemic. example colloquially referred “flattening [epidemic] curve”. flattening particularly important can reduce peak burden health services, prevent overwhelmed demand.","code":"# parameterise model model_baseline <- SEIRDAge(   n_age_categories = n_ages,   contact_matrix = c_combined_wider,   age_ranges = as.list(age_names) ) params <- list(beta = beta,                kappa = kappa,                gamma = gamma_vals,                mu = mu_vals) transmission_parameters(model_baseline) <- params initial_conditions(model_baseline) <- inits  # run simulation out_baseline <- run(model_baseline, times) # combine dataframes changes_baseline <- out_baseline$changes %>%    mutate(scenario=\"baseline\") changes_lockdown <- changes %>%    mutate(scenario=\"lockdown\") changes_both <- changes_baseline %>%    bind_rows(changes_lockdown)  # plot changes_both %>%   filter(compartment==\"Incidence\") %>%   ggplot(aes(x=time, y=value)) +   geom_line(aes(colour=scenario)) +   facet_wrap(~age_range) +   xlab(\"time (days)\") +   ylab(\"case fraction\") +   scale_color_brewer(palette = \"Dark2\")"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRDNPIAge.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"NPIs: age-structured model","text":"Davies, Nicholas G, Adam J Kucharski, Rosalind M Eggo, Amy Gimma, W John Edmunds, Thibaut Jombart, Kathleen O’Reilly, et al. 2020. “Effects Non-Pharmaceutical Interventions Covid-19 Cases, Deaths, Demand Hospital Services Uk: Modelling Study.” Lancet Public Health 5 (7): e375–e385. Ferguson, Neil, Daniel Laydon, Gemma Nedjati Gilani, Natsuko Imai, Kylie Ainslie, Marc Baguelin, Sangeeta Bhatia, et al. 2020. “Report 9: Impact Non-Pharmaceutical Interventions (Npis) Reduce Covid19 Mortality Healthcare Demand.” Flaxman, Seth, Swapnil Mishra, Axel Gandy, H Juliette T Unwin, Thomas Mellan, Helen Coupland, Charles Whittaker, et al. 2020. “Estimating Effects Non-Pharmaceutical Interventions Covid-19 Europe.” Nature 584 (7820): 257–61. IFG. 2021. “Timeline UK coronavirus lockdowns, March 2020 March 2021.” https://www.instituteforgovernment.org.uk/sites/default/files/timeline-lockdown-web.pdf. Lai, Shengjie, Nick W Ruktanonchai, Liangcai Zhou, Olivia Prosper, Wei Luo, Jessica R Floyd, Amy Wesolowski, et al. 2020. “Effect Non-Pharmaceutical Interventions Contain Covid-19 China.” Nature 585 (7825): 410–13. Li, , Harry Campbell, Durga Kulkarni, Alice Harpur, Madhurima Nundy, Xin Wang, Harish Nair, Usher Network COVID, others. 2021. “Temporal Association Introducing Lifting Non-Pharmaceutical Interventions Time-Varying Reproduction Number (R) Sars-Cov-2: Modelling Study Across 131 Countries.” Lancet Infectious Diseases 21 (2): 193–202. UK government. 2021. “Stay home: guidance households possible confirmed coronavirus (COVID-19) infection. Updated 2 December 2021.” https://www.gov.uk/government/publications/covid-19-stay--home-guidance/stay--home-guidance--households--possible-coronavirus-covid-19-infection. Verity, Robert, Lucy C Okell, Ilaria Dorigatti, Peter Winskill, Charles Whittaker, Natsuko Imai, Gina Cuomo-Dannenburg, et al. 2020. “Estimates Severity Coronavirus Disease 2019: Model-Based Analysis.” Lancet Infectious Diseases 20 (6): 669–77. Xin, Hualei, Yu Li, Peng Wu, Zhili Li, Eric HY Lau, Ying Qin, Liping Wang, Benjamin J Cowling, Tim Tsang, Zhongjie Li. 2021. “Estimating Latent Period Coronavirus Disease 2019 (Covid-19).” Clinical Infectious Diseases: Official Publication Infectious Diseases Society America.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRDV.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Vaccinations model","text":"document explains basics SEIRV model. model describes populations susceptible, exposed, infectious, recovered vaccinated individuals evolve time. Waning immunity also considered model, constant supply susceptibles population makes model realistic.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRDV.html","id":"the-seirdv-model","dir":"Articles","previous_headings":"","what":"The SEIRDV Model","title":"Vaccinations model","text":"SEIRDV model consists five ODEs describing five populations susceptible, recovered, infectious, recovered vaccinated individuals. Susceptible individuals (\\(S\\)) exposed virus. Exposed individuals (\\(E\\)) exposed virus infected yet infectious others; incubation period. Infectious individuals (\\(\\)) can spread virus others. Recovered individuals (\\(R\\)) longer infectious, can return susceptible population lose immunity. Vaccinated individuals (\\(V\\)) become infected ill time, case recovered population, immunity temporary can become susceptible certain rate. can vaccinate susceptibles, also \\(E\\), \\(\\) \\(R\\)s. However, already exposed illness change compartment assignment. Births deaths unrelated infection considered model. ODEs describing five populations evolve time \\[\\frac{\\text{d}S}{\\text{d}t} = -\\beta S - \\nu \\text{Inter}(t) S + \\delta_V V + \\delta_R R + \\delta_{VR} VR,\\] \\[\\frac{\\text{d}E}{\\text{d}t} = \\beta S -\\kappa E,\\] \\[\\frac{\\text{d}}{\\text{d}t} = \\kappa E - (\\gamma + \\mu) ,\\] \\[\\frac{\\text{d}R}{\\text{d}t} = \\gamma - \\delta_R R - \\nu \\text{Inter}(t) R,\\] \\[\\frac{\\text{d}V}{\\text{d}t} = \\nu \\text{Inter}(t) S - \\delta_V V\\] \\[\\frac{\\text{d}VR}{\\text{d}t} = \\nu \\text{Inter}(t) R - \\delta_{VR} VR\\] \\(\\beta\\), \\(\\kappa\\), \\(\\gamma\\), \\(\\mu\\), \\(\\nu\\), \\(\\delta_V\\), \\(\\delta_R\\) \\(\\delta_{VR}\\) positive parameters. rate susceptible individuals infected depends fraction population susceptible, fraction population infectious, odds infectious individual infecting susceptible individual, \\(\\beta\\). represented first terms right-hand side \\(\\text{d}S/ \\text{d}t\\) \\(\\text{d}E/ \\text{d}t\\). Exposed individuals become infectious rate \\(\\kappa\\). \\(1/ \\kappa\\) incubation time virus, .e. many days exposure individual becomes infectious others. Infectious individuals can either recover die disease. Infectious individuals recover \\(1/ \\gamma\\) days, thus individuals recover rate \\(\\gamma\\). Similarly, infectious individuals die due infection \\(1/ \\mu\\) days, making death rate \\(\\mu\\). Susceptible individuals vaccinated maximum rate \\(\\nu\\). Among immune (recovered vaccinated), people lose immunity virus different rates depending type immunity acquired: \\(\\delta_V\\) vaccinated, \\(\\delta_R\\) previously infected \\(\\delta_VR\\) previously infected received vaccine recovered. \\(\\text{Inter}(t)\\) value time t intervention protocol defined intervention parameters. addition five main ODEs, model also keeps track cumulative number cases (\\(C\\)) cumulative number disease-related deaths (\\(D\\)) time \\[\\frac{\\text{d}C}{\\text{d}t} = \\beta S ,\\] \\[\\frac{\\text{d}D}{\\text{d}t} = \\mu .\\] system closed specifying initial conditions \\[S(0) = S_0,\\ E(0) = E_0,\\ (0) = I_0,\\ R(0) = R_0,\\ V(0) = V_0, VR(0) = VR_0,\\ C(0) = 0,\\ D(0) = 0.\\] implementation model package, variables normalized \\(S(t) + E(t) + (t) + R(t) + V(t) + VR(t) + D(t) \\equiv 1\\) given \\(t\\). means state variables represents fraction population states given point time. next illustrate model works using functionality available comomodels.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRDV.html","id":"the-seirdv-class","dir":"Articles","previous_headings":"","what":"The SEIRDV class","title":"Vaccinations model","text":"first create SEIRDV object use run simulations. Next, set parameter values \\(\\beta\\), \\(\\kappa\\), \\(\\gamma\\), \\(\\mu\\), \\(\\nu\\), \\(\\delta_V\\), \\(\\delta_R\\) \\(\\delta_{VR}\\): check parameters set correctly, call now need set initial conditions model. set initial conditions \\(S(0)\\), \\(E(0)\\), \\((0)\\), \\(R(0)\\), \\(V(0)\\) \\(VR(0)\\). initial conditions must sum one. , error thrown. Now simulate system \\(t=0\\) days \\(t=200\\) days. added intervention feature allows variable levels vaccination population. cases, vaccine available considered necessary right start epidemic delay vaccination. Similarly, vaccination programs may run rate time, fluctuations need taken account modeling. can see plot level interventions occur time step. Interventions model last several days least several days . simulation returns two objects: one data frame comprising states time. , infectious proportion steadily declining, plummeting 0 \\(t=20\\).   simulation also outputs incidence deaths. derived state variables. Incidence just difference cumulative number cases two time points, \\[ \\text{incidence(t)} = C(t) - C(t - 1),\\] since shows number cases arisen time points. Deaths also given difference, , instance, cumulative number deaths two consecutive time points: \\[ \\text{deaths(t)} = D(t) - D(t - 1).\\]","code":"my_model <- SEIRDV() params <- list(beta=1, kappa=0.9, gamma=0.5, mu=0.1, nu=0.4, delta_V=0.1,                delta_R=0.05, delta_VR = 0.02) transmission_parameters(my_model) <- params transmission_parameters(my_model) #> $beta #> [1] 1 #>  #> $kappa #> [1] 0.9 #>  #> $gamma #> [1] 0.5 #>  #> $mu #> [1] 0.1 #>  #> $nu #> [1] 0.4 #>  #> $delta_V #> [1] 0.1 #>  #> $delta_R #> [1] 0.05 #>  #> $delta_VR #> [1] 0.02 initial_conditions(my_model) <- list(S0=0.99, E0=0, I0=0.01, R0=0, V0=0, VR0=0) intervention_parameters(my_model) <- list(starts=c(17, 110, 150),                                           stops=c(90, 139, 209),                                           coverages=c(1, 1, 1)) times <- seq(0, 200, by = 1) out_df <- run(my_model, times) int_parms <- InterventionParameters(start=c(17, 110, 150),                                     stop=c(90, 139, 209),                                     coverage=c(1, 1, 1))  sim_parms <- SimulationParameters(start=0, stop=200, tstep = 0.1)  intervention_protocol(int_parms, sim_parms, 1) %>%   ggplot(aes(x=time, y=coverage)) +   geom_line() +   scale_color_brewer(palette = \"Dark2\") +   labs(x = \"time (days)\", y = \"level of intervention\") +   theme(text = element_text(size = 20)) states <- out_df$states  sv <- subset(states, states$compartment %in% c(\"S\", \"V\")) ggplot(sv, aes(x = time, y = value)) +   geom_line(aes(color = compartment)) +   scale_color_brewer(palette = \"Dark2\") +   labs(x = \"time (days)\", y = \"fraction of the population\") +   theme(text = element_text(size = 20)) eird <- subset(states, !states$compartment %in% c(\"S\", \"V\")) ggplot(eird, aes(x = time, y = value)) +   geom_line(aes(color = compartment)) +   scale_color_brewer(palette = \"Dark2\") +   labs(x = \"time (days)\", y = \"fraction of the population\") +   theme(text = element_text(size = 20)) changes <- out_df$changes  ggplot(changes, aes(x = time, y = value, fill = compartment)) +   geom_bar(stat=\"identity\", position = position_dodge()) +   scale_color_brewer(palette = \"Dark2\") +   labs(x = \"time (days)\", y = \"fraction of the population \\n per day\") +   theme(legend.position = \"bottom\", legend.title = element_blank(),         text = element_text(size = 20))"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRDV.html","id":"sensitivity-analysis","dir":"Articles","previous_headings":"","what":"Sensitivity analysis","title":"Vaccinations model","text":"section, investigate sensitivity number deaths loss--immunity rate vaccinated individuals, \\(\\delta_V\\). run model varying values \\(\\delta_V\\) plot number deaths per day time. can see plot , larger rates immunity decay \\(\\delta_V\\) vaccinated individuals make wave number deaths epidemic last longer. now investigate sensitivity number deaths maximum vaccination rate, \\(\\nu\\). run model varying values \\(\\nu\\) plot number deaths per day time. can see plot , larger rates maximum vaccination \\(\\nu\\) make height duration wave number deaths epidemic last less. now investigate sensitivity start time intervention values, start_val. run model varying values start_val plot number deaths per day time. investigation, switching new intervention starts start_val continues 100, rather one ’ve using previously can see plot , larger start time intervention values, start_val produces deaths much longer peak number higher case smaller start_val.","code":"# function to setup and run model for different delta_V values run_seirdv <- function(delta_V_val) {   inits <- list(S0=0.99, E0=0, I0=0.01, R0=0, V0=0, VR0=0)   params <- list(beta=1, kappa=0.9, gamma=0.5, mu=0.1, nu=0.4, delta_V=delta_V_val,                  delta_R=0.05, delta_VR = 0.02)   interv<- list(starts=c(17, 110, 150),                 stops=c(90, 139, 209),                 coverages=c(1, 1, 1))   model <- SEIRDV(initial_conditions = inits,                 transmission_parameters=params,                 intervention_parameters = interv)   times <- seq(0, 200, by = 1)   out_df <- run(model, times)   out_df$changes }  # run model across different delta_V values delta_V_vals <- c(0.001, 0.05, 0.01, 0.2, 0.5) for(i in seq_along(delta_V_vals)) {   delta_V_temp <- delta_V_vals[i]   temp <- run_seirdv(delta_V_temp) %>% mutate(delta_V=delta_V_temp)   if(i == 1)     result <- temp %>% mutate(delta_V=delta_V_temp)   else     result <- result %>% bind_rows(temp) }  # plot results result %>%    filter(compartment==\"Deaths\") %>%    ggplot(aes(x=time, y=value, color = as.factor(delta_V))) +   geom_line(stat = \"identity\", position = position_dodge()) +   scale_color_brewer(palette = \"Dark2\") +   labs(x = \"time (days)\", y = \"fraction of the population \\n that died per day\") +   theme(legend.position = \"bottom\", legend.title = element_blank(),         text=element_text(size=20)) #> Warning: Width not defined. Set with `position_dodge(width = ?)` # function to setup and run model for different nu values run_seirdv <- function(nu_val) {   inits <- list(S0=0.99, E0=0, I0=0.01, R0=0, V0=0, VR0=0)   params <- list(beta=1, kappa=0.9, gamma=0.5, mu=0.1, nu=nu_val, delta_V=0.1,                  delta_R=0.05, delta_VR = 0.02)   interv<- list(starts=c(17, 110, 150),                 stops=c(90, 139, 209),                 coverages=c(1, 1, 1))   model <- SEIRDV(initial_conditions = inits,                 transmission_parameters=params,                 intervention_parameters = interv)   times <- seq(0, 200, by = 1)   out_df <- run(model, times)   out_df$changes }  # run model across different nu values nu_vals <- c(0.1, 0.25, 0.5, 0.75, 1) for(i in seq_along(nu_vals)) {   nu_temp <- nu_vals[i]   temp <- run_seirdv(nu_temp) %>% mutate(nu=nu_temp)   if(i == 1)     result <- temp %>% mutate(nu=nu_temp)   else     result <- result %>% bind_rows(temp) }  # plot results result %>%    filter(compartment==\"Deaths\") %>%    ggplot(aes(x=time, y=value, color = as.factor(nu))) +   geom_line(stat = \"identity\", position = position_dodge()) +   scale_color_brewer(palette = \"Dark2\") +   labs(x = \"time (days)\", y = \"fraction of the population \\n that died per day\") +   theme(legend.position = \"bottom\", legend.title = element_blank(),         text=element_text(size=20)) #> Warning: Width not defined. Set with `position_dodge(width = ?)` # function to setup and run model for different start intervention values run_seirdv <- function(start_val) {   inits <- list(S0=0.99, E0=0, I0=0.01, R0=0, V0=0, VR0=0)   params <- list(beta=1, kappa=0.9, gamma=0.5, mu=0.1, nu=0.4, delta_V=0.1,                  delta_R=0.05, delta_VR = 0.02)   interv<- list(starts=start_val,                 stops=100,                 coverages=1)   model <- SEIRDV(initial_conditions = inits,                 transmission_parameters=params,                 intervention_parameters = interv)   times <- seq(0, 200, by = 1)   out_df <- run(model, times)   out_df$changes }  # run model across different start_val values start_val <- c(0, 5, 10, 15, 20, 30, 45, 55) for(i in seq_along(start_val)) {   start_temp <- start_val[i]   temp <- run_seirdv(start_temp) %>% mutate(starts=start_temp)   if(i == 1)     result <- temp %>% mutate(starts=start_temp)   else     result <- result %>% bind_rows(temp) }  # plot results result %>%    filter(compartment==\"Deaths\") %>%    ggplot(aes(x=time, y=value, color = as.factor(starts))) +   geom_line(stat = \"identity\", position = position_dodge()) +   scale_color_brewer(palette = \"Dark2\") +   labs(x = \"time (days)\", y = \"fraction of the population \\n that died per day\") +   theme(legend.position = \"bottom\", legend.title = element_blank(),         text=element_text(size=20)) #> Warning: Width not defined. Set with `position_dodge(width = ?)`"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRDVAge.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Vaccinations: age-structured model","text":"document explains basics SEIRV model age structure. model describes populations susceptible, exposed, infectious, recovered vaccinated individuals evolve time. Waning immunity also considered model, constant supply susceptibles population makes model realistic. Contact data age structure also considered model. However, reality, susceptible individual given age class can become infected age class: capture aspect model, infected individuals age supposed inter-mix, mixing rate dictated -called “contact matrix”, \\(C\\). elements contact matrices, \\(C_{,j}\\) indicate expected number contacts individual age class \\(\\) experiences age class \\(j\\) per day. package, include country-level estimates contact matrices (Prem et al., 2017; full details see data documentation). actually four types contact matrix corresponding daily numbers contacts home, work, school settings. , visualise India.  can see majority contacts fall younger individuals, occurring home “” locations. home, however, substantial intergenerational mixing settings. model introduce compartmentalise individuals according location, make overall contact matrix summing together.  now use contact matrix allow infections pass age groups. , amend governing equations susceptibles exposed individuals within age class \\(\\): \\[\\begin{align} \\frac{\\text{d}S_i}{\\text{d}t} &= -\\beta S_i \\Sigma_{j}C_{ij} I_j\\\\ \\frac{\\text{d}E_i}{\\text{d}t} &= \\beta S_i \\Sigma_{j}C_{ij} I_j -\\kappa E_i\\\\ \\end{align}\\] Specifically, term \\(S_i \\Sigma_{j}C_{ij} I_j\\) effectively indicates expected number contacts susceptible individuals age class \\(\\) infected individuals across classes.","code":"load(file = \"../data/contact_home.rda\") load(file = \"../data/contact_work.rda\") load(file = \"../data/contact_school.rda\") load(file = \"../data/contact_other.rda\") # reformat matrices for plotting ages <- seq(0, 80, 5) age_names <- vector(length = 16) for(i in seq_along(age_names)) {   age_names[i] <- paste0(ages[i], \"-\", ages[i + 1]) } format_matrix <- function(contact_matrix, age_names) {   colnames(contact_matrix) <- age_names   contact_matrix$age_infectee <- age_names   contact_matrix %>%     pivot_longer(all_of(age_names)) %>%      rename(age_infector=name) %>%      mutate(age_infector=fct_relevel(age_infector, age_names)) %>%      mutate(age_infectee=fct_relevel(age_infectee, age_names)) } c_home <- format_matrix(contact_home$India, age_names) %>% mutate(type=\"home\") c_work <- format_matrix(contact_work$India, age_names) %>% mutate(type=\"work\") c_school <- format_matrix(contact_school$India, age_names) %>% mutate(type=\"school\") c_other <- format_matrix(contact_other$India, age_names) %>% mutate(type=\"other\") c_all <- c_home %>%   bind_rows(c_work) %>%    bind_rows(c_school) %>%    bind_rows(c_other) # plot all c_all %>%   ggplot(aes(x=age_infector, y=age_infectee, fill=value)) +   xlab(\"age group of infector\") + ylab(\"age group of infectee\") +   theme(text = element_text(size=20),         axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +   geom_tile() +   scale_fill_viridis_c() +   facet_wrap(~type) c_combined <- c_all %>%    group_by(age_infectee, age_infector) %>%    summarise(value=sum(value)) #> `summarise()` has grouped output by 'age_infectee'. You can override using the #> `.groups` argument. c_combined %>%    ggplot(aes(x=age_infector, y=age_infectee, fill=value)) +   xlab(\"age group of infector\") + ylab(\"age group of infectee\") +   theme(text = element_text(size=20),         axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +   geom_tile() +   scale_fill_viridis_c()"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRDVAge.html","id":"the-seirdvage-model","dir":"Articles","previous_headings":"","what":"The SEIRDVAge Model","title":"Vaccinations: age-structured model","text":"SEIRDVAge model consists five ODEs describing five populations susceptible, recovered, infectious, recovered vaccinated individuals. Susceptible individuals (\\(S\\)) exposed virus. Exposed individuals (\\(E\\)) exposed virus infected yet infectious others; incubation period. Infectious individuals (\\(\\)) can spread virus others. Recovered individuals (\\(R\\)) longer infectious, can return susceptible population lose immunity. Vaccinated individuals (\\(V\\)) become infected ill time, case recovered population, immunity temporary can become susceptible certain rate. can vaccinate susceptibles, also \\(E\\), \\(\\) \\(R\\)s. However, already exposed illness change compartment assignment. Births deaths unrelated infection considered model. ODEs describing five populations evolve time \\[\\frac{\\text{d}S_i}{\\text{d}t} = -\\beta S_i \\Sigma_{j}C_{ij} I_j - \\nu \\text{Inter}_i(t) S_i + \\delta_{V} V_i + \\delta_{R} R_i + \\delta_{VR} VR_i,\\] \\[\\frac{\\text{d}E_i}{\\text{d}t} = \\beta S_i \\Sigma_{j}C_{ij} I_j -\\kappa E_i,\\] \\[\\frac{\\text{d}I_i}{\\text{d}t} = \\kappa E_i - (\\gamma + \\mu) I_i,\\] \\[\\frac{\\text{d}R_i}{\\text{d}t} = \\gamma I_i - \\delta_R R_i - \\nu \\text{Inter}_i(t) R_i,\\] \\[\\frac{\\text{d}V_i}{\\text{d}t} = \\nu \\text{Inter}_i(t) S_i - \\delta_V V_i\\] \\[\\frac{\\text{d}VR_i}{\\text{d}t} = \\nu \\text{Inter}_i(t) R_i - \\delta_{VR} VR_i\\] \\(\\beta\\), \\(\\kappa\\), \\(\\gamma\\), \\(\\mu\\), \\(\\nu\\), \\(\\delta_V\\), \\(\\delta_R\\) \\(\\delta_{VR}\\) positive parameters. rate susceptible individuals infected depends fraction population susceptible, fraction population infectious, odds infectious individual infecting susceptible individual, \\(\\beta\\). represented first terms right-hand side \\(\\text{d}S/ \\text{d}t\\) \\(\\text{d}E/ \\text{d}t\\). Exposed individuals become infectious rate \\(\\kappa\\). \\(1/ \\kappa\\) incubation time virus, .e. many days exposure individual becomes infectious others. Infectious individuals can either recover die disease. Infectious individuals recover \\(1/ \\gamma\\) days, thus individuals recover rate \\(\\gamma\\). Similarly, infectious individuals die due infection \\(1/ \\mu\\) days, making death rate \\(\\mu\\). Susceptible individuals vaccinated maximum rate \\(\\nu\\). Among immune (recovered vaccinated), people lose immunity virus different rates depending type immunity acquired: \\(\\delta_V\\) vaccinated, \\(\\delta_R\\) previously infected \\(\\delta_{VR}\\) previously infected received vaccine recovered. \\(\\text{Inter}(t)\\) value time t intervention protocol defined intervention parameters. addition five main ODEs, model also keeps track cumulative number cases (\\(C\\)) cumulative number disease-related deaths (\\(D\\)) time \\[\\frac{\\text{d}C_i}{\\text{d}t} = \\beta S_i \\Sigma_{j}C_{ij} I_j,\\] \\[\\frac{\\text{d}D_i}{\\text{d}t} = \\mu I_i.\\] system closed specifying initial conditions \\[S(0) = S_0,\\ E(0) = E_0,\\ (0) = I_0,\\ R(0) = R_0,\\ V(0) = V_0, VR(0) = VR_0,\\ C(0) = 0,\\ D(0) = 0.\\] implementation model package, variables normalized \\(S(t) + E(t) + (t) + R(t) + V(t) + VR(t) + D(t) \\equiv 1\\) given \\(t\\). means state variables represents fraction population states given point time. next illustrate model works using functionality available comomodels.","code":""},{"path":[]},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRDVAge.html","id":"simulation-examples","dir":"Articles","previous_headings":"","what":"Simulation examples","title":"Vaccinations: age-structured model","text":"Now create model includes age-structured mixing. Since contact matrices 16 age classes, instantiate model number classes. also give transmission parameters, populate age classes initial conditions use overall contact matrix. use country-level demographics UN , example, initialise model uniform initial infected population 1% across age groups. remaining 99% population starts susceptible. Next, set parameter values \\(\\beta\\), \\(\\kappa\\), \\(\\gamma\\), \\(\\mu\\), \\(\\nu\\), \\(\\delta_V\\), \\(\\delta_R\\) \\(\\delta_{VR}\\). results inspired COVID pandemic, mortality parameter \\(\\mu\\) age-dependent according Verity (2020): check parameters set correctly, call now need set initial conditions model. set initial conditions \\(S(0)\\), \\(E(0)\\), \\((0)\\), \\(R(0)\\), \\(V(0)\\) \\(VR(0)\\). initial conditions must sum one. , error thrown. Now simulate system \\(t=0\\) days \\(t=200\\) days. added intervention feature allows variable levels vaccination population. cases, vaccine available considered necessary right start epidemic delay vaccination. Similarly, vaccination programs may run rate time, fluctuations need taken account modeling. Vaccination levels start times may differ different age groups. instantiation model, vaccination age group occurs different stage. can see plot classical level interventions occur time step. Interventions model last several days least several days . simulation returns two objects: one data frame comprising states time. Zooming infected population, see younger age groups highest peak infected population levels. Moreover, waning immunity feature allows multiple peaks occur number infected, centered around 12.5, second tailing right first one, another wave beginning around 160 peaking towards end time interval. younger age groups number daily infections remains somewhat constant drop around day 125.  simulation also outputs incidence deaths. derived state variables. Incidence just difference cumulative number cases two time points, \\[ \\text{incidence(t)} = C(t) - C(t - 1),\\] since shows number cases arisen time points. Deaths also given difference, , instance, cumulative number deaths two consecutive time points: \\[ \\text{deaths(t)} = D(t) - D(t - 1).\\]","code":"load(file = \"../data/population.rda\") # use demographic data to create normalised population fractions pops = population[population$country == 'India', ]$pop pop_fraction = pops/sum(pops) ## the contact matrix has an upper group of 80+, so we sum the remaining fractions beyond this point pop_fraction[16] = sum(pop_fraction[16:21]) pop_fraction = pop_fraction[1:16] # reshape contact matrix into 16x16 form n_ages <- 16 c_combined_wider <- c_combined %>%    pivot_wider(id_cols = age_infectee, names_from = age_infector,               values_from=value) %>%    ungroup() %>%    select(-age_infectee) %>%    as.matrix()  # create model my_model <- SEIRDVAge(n_age_categories = n_ages,                  contact_matrix = c_combined_wider,                  age_ranges = as.list(age_names)) mu <- c(0.000016, 0.000016, 0.00007, 0.00007, 0.00031, 0.00031, 0.0026, 0.0026,      0.0048, 0.0048, 0.006, 0.006, 0.019, 0.019, 0.043, 0.043)  params <- list(beta=1, kappa=0.9, gamma=0.5, mu=mu, nu=0.4, delta_V=0.1,                delta_R=0.05, delta_VR = 0.02) transmission_parameters(my_model) <- params transmission_parameters(my_model) #> $beta #> [1] 1 #>  #> $kappa #> [1] 0.9 #>  #> $gamma #> [1] 0.5 #>  #> $mu #>  [1] 1.6e-05 1.6e-05 7.0e-05 7.0e-05 3.1e-04 3.1e-04 2.6e-03 2.6e-03 4.8e-03 #> [10] 4.8e-03 6.0e-03 6.0e-03 1.9e-02 1.9e-02 4.3e-02 4.3e-02 #>  #> $nu #> [1] 0.4 #>  #> $delta_V #> [1] 0.1 #>  #> $delta_R #> [1] 0.05 #>  #> $delta_VR #> [1] 0.02 initial_conditions(my_model) <- list(S0=pop_fraction*0.99,                                      E0=rep(0, n_ages),                                      I0=pop_fraction*0.01,                                      R0=rep(0, n_ages),                                      V0=rep(0, n_ages),                                      VR0=rep(0, n_ages),                                      D0=rep(0, n_ages)) interven <- vector(mode = \"list\", length = n_ages)  for(i in 1:n_ages){   if(is.element(i, 1:2)){     interven[[i]]$starts <- 150     interven[[i]]$stops <-  190   }   else if(is.element(i, 3:5)){     interven[[i]]$starts <- 120     interven[[i]]$stops <-  180   }   else if(is.element(i, 14:16)){     interven[[i]]$starts <- 30     interven[[i]]$stops <-  110   }   else{     interven[[i]]$starts <- 100-7*i     interven[[i]]$stops <-  190-7*i   }   interven[[i]]$coverages <- 1 }  interventions(my_model) <- interven times <- seq(0, 200, by = 1) out_df <- run(my_model, times) parameters <- interven  sim_parms <- SimulationParameters(start=0, stop=200, tstep = 0.1)  interventions <- vector(mode = \"list\", length = n_ages)  for(i in 1:n_ages){   int_parms <- InterventionParameters(start=parameters[[i]]$starts,                                       stop=parameters[[i]]$stops,                                       coverage=parameters[[i]]$coverages)    print(intervention_protocol(int_parms, sim_parms, 1) %>%     ggplot(aes(x=time, y=coverage)) +     geom_line() +     scale_color_brewer(palette = \"Dark2\") +     labs(x = \"time (days)\", y = paste0(\"level of intervention for ages\\n\", age_names[i])) +     theme(legend.position = \"bottom\", legend.title = element_blank(),           text = element_text(size = 20))) } states = out_df$states changes = out_df$changes states %>%   ggplot(aes(x=time, y=value, colour=age_range)) +   geom_line() +   facet_wrap(~compartment) +   scale_colour_viridis_d() +   labs(x = \"time (days)\", y = \"fraction of the population\") +   theme(text = element_text(size = 20)) states %>%   filter(compartment==\"I\") %>%    ggplot(aes(x=time, y=value, colour=age_range)) +   geom_line() +   facet_wrap(~compartment) +   scale_colour_viridis_d() +   labs(x = \"time (days)\", y = \"fraction of the population\") +   theme(text = element_text(size = 20)) changes <- out_df$changes  changes %>%   filter(compartment==\"Incidence\") %>%    ggplot(aes(x=time, y=value, colour=age_range)) +   geom_line() +   facet_wrap(~compartment, scales=\"free\") +   scale_colour_viridis_d() +   labs(x = \"time (days)\", y = \"fraction of the population\") +   theme(text = element_text(size = 20)) changes %>%   filter(compartment==\"Deaths\") %>%    ggplot(aes(x=time, y=value, colour=age_range)) +   geom_line() +   facet_wrap(~compartment, scales=\"free\") +   scale_colour_viridis_d() +   labs(x = \"time (days)\", y = \"fraction of the population\") +   theme(text = element_text(size = 20))"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRDVAge.html","id":"sensitivity-analysis","dir":"Articles","previous_headings":"","what":"Sensitivity analysis","title":"Vaccinations: age-structured model","text":"section, investigate sensitivity number deaths loss--immunity rate recovered individuals also vaccinated, \\(\\delta_{VR}\\). run model varying values \\(\\delta_{VR}\\) plot number deaths per day time. can see plot , larger rates immunity decay \\(\\delta_{VR}\\) vaccinated recovered individuals make second wave number deaths epidemic higher peak. \\(\\delta_{VR}>0.01\\) third wave starts manifest \\(t=175\\). now investigate sensitivity number deaths maximum vaccination rate, \\(\\nu\\). run model varying values \\(\\nu\\) plot number deaths per day time. can see plot , larger rates maximum vaccination \\(\\nu\\) make subsequent waves number deaths epidemic peak lower. \\(\\nu=10\\), see deaths age groups first two waves. case vaccination occurs \\(\\nu=0\\) see daily number deaths remains relatively constant first wave larger values analysed. now investigate sensitivity start time intervention values, start_val. run model varying values start_val plot number deaths per day time. intervention profile cases, shifted quantity start_val. can see plot , larger start time intervention values, start_val make second wave riding tail first one last plateau longer higher level. compare now two possible scenarios make intervention age-dependent case apply protocol vaccination regardless age groups. case common vaccination protocol age groups, first peak number deaths higher case age-specific interventions, second peak tailing first also pronounced lasts longer third wave occurs sooner also higher amplitude distinct interventions case.","code":"# function to setup and run model for different delta_VR values run_SEIRDVAge <- function(delta_VR_val) {   inits <- list(S0=pop_fraction*0.99, E0=rep(0, n_ages), I0=pop_fraction*0.01,                 R0=rep(0, n_ages), V0=rep(0, n_ages), VR0=rep(0, n_ages),                 D0=rep(0, n_ages))   params <- list(beta=1, kappa=0.9, gamma=0.5, mu=mu, nu=0.4, delta_V=0.1,                  delta_R=0.05, delta_VR = delta_VR_val)   interv<- interven   model <- SEIRDVAge(n_age_categories = n_ages,                 contact_matrix = c_combined_wider,                 age_ranges = as.list(age_names),                 initial_conditions = inits,                 transmission_parameters=params,                 interventions = interv)   times <- seq(0, 200, by = 1)   out_df <- run(model, times)   out_df$changes }  # run model across different delta_V values delta_VR_vals <- c(0.001, 0.005, 0.01, 0.02, 0.05) for(i in seq_along(delta_VR_vals)) {   delta_VR_temp <- delta_VR_vals[i]   temp <- run_SEIRDVAge(delta_VR_temp) %>% mutate(delta_VR=delta_VR_temp)   if(i == 1)     result <- temp %>% mutate(delta_VR=delta_VR_temp)   else     result <- result %>% bind_rows(temp) }  # plot results result %>%    filter(compartment==\"Deaths\") %>%    ggplot(aes(x=time, y=value, color = age_range)) +   facet_wrap(~delta_VR) +   geom_line() +   scale_colour_viridis_d() +   labs(x = \"time (days)\", y = \"fraction of the population \\n that died per day\") +   theme(text = element_text(size = 20)) # function to setup and run model for different nu values run_SEIRDVAge <- function(nu_val) {   inits <- list(S0=pop_fraction*0.99, E0=rep(0, n_ages), I0=pop_fraction*0.01,                 R0=rep(0, n_ages), V0=rep(0, n_ages), VR0=rep(0, n_ages),                 D0=rep(0, n_ages))   params <- list(beta=1, kappa=0.9, gamma=0.5, mu=mu,                  nu= nu_val,                   delta_V=0.1, delta_R=0.05, delta_VR = 0.02)   interv<- interven   model <- SEIRDVAge(n_age_categories = n_ages,                 contact_matrix = c_combined_wider,                 age_ranges = as.list(age_names),                 initial_conditions = inits,                 transmission_parameters=params,                 interventions = interv)   times <- seq(0, 200, by = 1)   out_df <- run(model, times)   out_df$changes }  # run model across different nu values nu_vals <- c(0, 0.2, 0.4, 0.6, 10) for(i in seq_along(nu_vals)) {   nu_temp <- nu_vals[i]   temp <- run_SEIRDVAge(nu_temp) %>% mutate(nu=nu_temp)   if(i == 1)     result <- temp %>% mutate(nu=nu_temp)   else     result <- result %>% bind_rows(temp) }  # plot results result %>%    filter(compartment==\"Deaths\") %>%    ggplot(aes(x=time, y=value, color = age_range)) +   facet_wrap(~nu) +   geom_line() +   scale_colour_viridis_d() +   labs(x = \"time (days)\", y = \"fraction of the population \\n that died per day\") +   theme(text = element_text(size = 20)) # function to setup and run model for different start values var_interven <- function(start){   interven <- vector(mode = \"list\", length = n_ages)    for(i in 1:n_ages){     if(is.element(i, 1:2)){       interven[[i]]$starts <- 150       interven[[i]]$stops <-  190     }     else if(is.element(i, 3:5)){       interven[[i]]$starts <- 120       interven[[i]]$stops <-  180     }     else if(is.element(i, 14:16)){       interven[[i]]$starts <- 30       interven[[i]]$stops <-  110     }     else{       interven[[i]]$starts <- 100-7*i       interven[[i]]$stops <-  190-7*i     }     interven[[i]]$starts <- interven[[i]]$starts + start     interven[[i]]$stops <- interven[[i]]$stops + start        interven[[i]]$coverages <- 1   }    return(interven) }  run_SEIRDVAge <- function(start_val) {   start <- start_val   inits <- list(S0=pop_fraction*0.99, E0=rep(0, n_ages), I0=pop_fraction*0.01,                 R0=rep(0, n_ages), V0=rep(0, n_ages), VR0=rep(0, n_ages),                 D0=rep(0, n_ages))   params <- list(beta=1, kappa=0.9, gamma=0.5, mu=mu,                  nu= 0.4, delta_V=0.1, delta_R=0.05, delta_VR = 0.02)   interv<- var_interven(start = start_val)   model <- SEIRDVAge(n_age_categories = n_ages,                 contact_matrix = c_combined_wider,                 age_ranges = as.list(age_names),                 initial_conditions = inits,                 transmission_parameters=params,                 interventions = interv)   times <- seq(0, 200, by = 1)   out_df <- run(model, times)   out_df$changes }  # run model across different nu values start_vals <- c(10, 25, 40, 75, 94) for(i in seq_along(start_vals)) {   start_temp <- start_vals[i]   temp <- run_SEIRDVAge(start_temp) %>% mutate(start=start_temp)   if(i == 1)     result <- temp %>% mutate(start=start_temp)   else     result <- result %>% bind_rows(temp) }  # plot results result %>%    filter(compartment==\"Deaths\") %>%    ggplot(aes(x=time, y=value, color = age_range)) +   facet_wrap(~start) +   geom_line() +   scale_colour_viridis_d() +   labs(x = \"time (days)\", y = \"fraction of the population \\n that died per day\") +   theme(text = element_text(size = 20)) # function to setup and run model for different delta_VR values run_SEIRDVAge <- function(interv_type) {   inits <- list(S0=pop_fraction*0.99, E0=rep(0, n_ages), I0=pop_fraction*0.01,                 R0=rep(0, n_ages), V0=rep(0, n_ages), VR0=rep(0, n_ages),                 D0=rep(0, n_ages))   params <- list(beta=1, kappa=0.9, gamma=0.5, mu=mu, nu=0.4, delta_V=0.1,                  delta_R=0.05, delta_VR = 0.02)   if(interv_type == 'distinct'){     interv<- interven   }   else{     interv <- list(list(starts=50,                    stops=140,                    coverages=1))   }   model <- SEIRDVAge(n_age_categories = n_ages,                 contact_matrix = c_combined_wider,                 age_ranges = as.list(age_names),                 initial_conditions = inits,                 transmission_parameters=params,                 interventions = interv)   times <- seq(0, 200, by = 1)   out_df <- run(model, times)   out_df$changes }  # run model across different intervention types interv_types <- c('distinct', 'common') for(i in seq_along(interv_types)) {   interv_type_temp <- interv_types[i]   temp <- run_SEIRDVAge(interv_type_temp) %>% mutate(interv_type=interv_type_temp)   if(i == 1)     result <- temp %>% mutate(interv_type=interv_type_temp)   else     result <- result %>% bind_rows(temp) }  # plot results result %>%    filter(compartment==\"Deaths\") %>%    ggplot(aes(x=time, y=value, color = age_range)) +   facet_wrap(~interv_type) +   geom_line() +   scale_colour_viridis_d() +   labs(x = \"time (days)\", y = \"fraction of the population \\n that died per day\") +   theme(text = element_text(size = 20))"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_BD.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Births and natural deaths and waning natural immunity","text":"SARS-CoV-2 virus becomes endemic, focus shifts short-term control current epidemic wave learning live virus long-term. longer timescales, births natural deaths can affect ability infectious disease invade population. maternal immunity inherited newborns, may assume susceptible infection. replenishment susceptible population can, long periods, allow infectious disease re-invade population, epidemic wave may reoccur. basic SEIRD model, individual exposed pathogen “recovered” infection assumed immune reinfection. Immunity reinfection known wane time period following individuals receive vaccinations (Goldberg et al. 2021). Natural immunity resultant previous infection SARS-CoV-2 found stronger longer-lasting protection Delta version virus Pfizer BNT162b2 two-dose vaccine (Gazit et al. 2021), although widely thought protection conferred infection also wanes time. Waning immunity births similar impact transmission dynamics processes lead replenishment susceptible individuals. Though rate different – COVID-19, waning immunity much stronger effect births. notebook, investigate first dynamics infection throughout population affected births natural deaths. extend model waning natural immunity.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_BD.html","id":"births-and-natural-death","dir":"Articles","previous_headings":"","what":"Births and natural death","title":"Births and natural deaths and waning natural immunity","text":"begin, ignore waning natural immunity extend basic SEIRD model include births natural death terms. \\[\\frac{\\text{d}S}{\\text{d}t} = \\lambda -\\beta S - \\nu S,\\] \\[\\frac{\\text{d}E}{\\text{d}t} = \\beta S - (\\kappa + \\nu) E,\\] \\[\\frac{\\text{d}}{\\text{d}t} = \\kappa E - (\\gamma + \\mu + \\nu) ,\\] \\[\\frac{\\text{d}R}{\\text{d}t} = \\gamma - \\nu R,\\] \\[\\frac{\\text{d}D}{\\text{d}t} = \\mu + \\nu (S + E + + R).\\] , \\(\\lambda\\geq 0\\) represents rate birth population. effect term increase population size time. \\(\\nu > 0\\) represents rate death due causes unrelated COVID-19. can represent structure model via compartmental diagram. system closed specifying initial conditions \\[S(0) = S_0,\\ E(0) = E_0,\\ (0) = I_0,\\ R(0) = r_0,\\ D(0) = 0.\\] Note, used \\(r_0\\) avoid ambiguity basic reproduction number. ignore death due COVID-19 infection (.e. set \\(\\mu=0\\)), evolution population size, \\(N(t)=S(t)+E(t)+(t)+R(t)\\) given : \\[\\begin{equation} \\frac{\\text{d}N}{\\text{d}t} = \\lambda - \\nu N. \\end{equation}\\] steady state: \\(N^* = \\lambda / \\nu\\). Assuming initial population size, \\(N(0)\\), , grows ever-declining rate towards steady state: \\[\\begin{equation} N(t) = N^* - (N^* - N(0)) \\exp(-\\nu t). \\end{equation}\\]","code":"# create model object model <- SEIRD_BD()  # print structure ode_structure_diagram(model)"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_BD.html","id":"basic-reproduction-number","dir":"Articles","previous_headings":"Births and natural death","what":"Basic reproduction number","title":"Births and natural deaths and waning natural immunity","text":"order set COVID-19-relevant parameter ranges model, use basic reproduction number \\(R_0\\), can derived similar fashion basic SEIRD model. slight difference exposed individuals can die pass infection. , \\(R_0\\) SEIRD_BD model given : \\[\\begin{align} \\begin{split} R_0 = &\\text{ # infected per unit time infectious indiv. } \\times\\\\ &\\text{ prob. surviving latent period } \\times\\\\ &\\text{ av. duration infectiousness}, \\end{split} \\end{align}\\] assumed entire population susceptible, line definition basic reproduction number (Diekmann, Heesterbeek, Metz 1990). results expression: \\[\\begin{equation} R_0 = \\beta \\times \\frac{\\kappa}{\\kappa + \\nu} \\times \\frac{1}{\\gamma + \\mu + \\nu}, \\end{equation}\\] \\(\\kappa/(\\kappa+\\nu)\\) probability surviving latent period , since infectious individuals may recover (rate \\(\\gamma\\)), die due COVID-19 infection (rate \\(\\mu\\)), due non-COVID-19 causes (rate \\(\\nu\\)), average duration spent compartment \\(1/(\\gamma + \\mu + \\nu)\\). note , \\(\\nu=0\\), basic reproduction reduces basic SEIRD model: \\(R_0 = \\beta / (\\gamma + \\mu)\\). Indeed, COVID-19 transmission, rate natural death much lower rate becoming infectious COVID-19-induced death rate, reproduction numbers basic SEIRD model virtually indistinguishable.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_BD.html","id":"multiple-epidemic-waves-and-an-endemic-steady-state","dir":"Articles","previous_headings":"Births and natural death","what":"Multiple epidemic waves and an endemic steady state","title":"Births and natural deaths and waning natural immunity","text":"going start 0.1% infectious individuals everyone else susceptible. next give transmission parameters. , follow suit parameter values Vignette(\"SEIRD\") \\(\\mu\\), \\(\\kappa\\) \\(\\gamma\\). start allowing natural death, setting \\(\\nu=0\\). illustrate implication replenishment susceptibles, include unnaturally high birth rate newborns account 0.1% population day beginning simulations. Finally, set \\(\\beta\\) \\(R_0=2.4\\) report 9 Imperial College (Ferguson et al. 2020). now run model using parameters plot infectious proportion time. plot illustrates repeated epidemic waves, representing re-invasion pathogen population.  see oscillatory behaviour occurs, overlay time-varying reproduction number, \\(R_t = R_0 S(t)\\), plot.  shows new susceptibles born population lead \\(R_t\\) increase time, , eventually, \\(R_t>1\\), new epidemic wave sweeps population. time, waves occur frequently become less marked. Eventually \\(R_t\\rightarrow 1\\), endemic equilibrium reached, non-zero fraction population infected. notable difference SEIRD model, permit endemic steady state.","code":"initial_conditions(model) <- list(S0=0.999, E0=0, I0=0.001, R0=0) kappa <- 1 / 5.5 zeta <- 1 / 2 ifr <- 0.0066 gamma <- zeta * (1 - ifr) mu <- zeta * ifr nu <- 0 lambda <- 0.001 delta <- 0 # waning natural immunity term -- to explore later R0_target <- 2.4 beta <- R0_target * (kappa + nu) / kappa * (gamma + mu + nu)  transmission_parameters(model) <- list(   beta=beta,   kappa=kappa,   gamma=gamma,   mu=mu,   lambda=lambda,   nu=nu,   delta=delta) # run model results <- run(model, times = seq(0, 5000, 1))  # extract states states <- results$states  # plot infectious states %>%   filter(compartment == \"I\") %>%   ggplot(aes(x = time / 365.25, y = value)) +   geom_line(aes(color = compartment)) +   scale_color_brewer(palette = \"Dark2\") +   labs(x = \"time (years)\", y = \"value\") +   theme(text = element_text(size = 14)) # calculate R_0 R_0 <- R0(model)  # plot: magnifying the infectious numbers so they are visible states %>%    mutate(value=if_else(compartment==\"S\", R_0 * value, value)) %>%   mutate(compartment=as.character(compartment)) %>%    mutate(compartment=if_else(compartment==\"S\", \"Rt\", compartment)) %>%    group_by(compartment) %>%    mutate(value=if_else(compartment==\"I\", value / max(value), value)) %>%    ungroup() %>%    filter(compartment %in% c(\"Rt\", \"I\")) %>%    ggplot(aes(x = time / 365.25, y = value))  +   geom_hline(yintercept = 1, linetype=2) +   geom_line(aes(color = compartment)) +   scale_color_brewer(palette = \"Dark2\") +   labs(x = \"time (years)\", y = \"value\") +   theme(text = element_text(size = 14))"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_BD.html","id":"steady-states","dir":"Articles","previous_headings":"Births and natural death","what":"Steady states","title":"Births and natural deaths and waning natural immunity","text":"explore steady states system, set right-hand sides ordinary differential equations within system zero: \\[\\lambda -\\beta S - \\nu S=0\\] \\[\\beta S - (\\kappa + \\nu) E=0\\] \\[\\kappa E - (\\gamma + \\mu + \\nu) =0\\] \\[\\gamma + \\nu R=0.\\] Solving simultaneously yields two possible equilibria: one representing disease-free steady state; another representing case disease becomes endemic. endemic steady states given : \\[\\begin{align} S^* &= \\frac{(\\kappa +\\nu ) (\\gamma +\\mu +\\nu )}{\\beta  \\kappa },\\\\ E^* &= \\frac{\\lambda }{\\kappa +\\nu }-\\frac{\\nu  (\\gamma +\\mu +\\nu )}{\\beta  \\kappa },\\\\ ^* &= \\frac{\\kappa  \\lambda }{(\\kappa +\\nu ) (\\gamma +\\mu +\\nu )}-\\frac{\\nu }{\\beta },\\\\ R^* &= \\frac{\\gamma  \\kappa  \\lambda }{\\nu  (\\kappa +\\nu ) (\\gamma +\\mu +\\nu )}-\\frac{\\gamma    }{\\beta }. \\end{align}\\] \\(^*>0\\), find following condition: \\[\\begin{equation} \\beta >\\frac{\\nu  (\\kappa +\\nu ) (\\gamma +\\mu +\\nu )}{\\kappa  \\lambda }. \\end{equation}\\] previously simulated system, calculate \\(^*\\) overlay plot illustrate limiting behaviour system.","code":"I_star = kappa * lambda / ((kappa + nu) * (gamma + kappa + nu)) - nu / beta  states %>%   filter(compartment == \"I\") %>%   ggplot(aes(x = time / 365.25, y = value)) +   geom_hline(yintercept = I_star, linetype=2) +   geom_line(aes(color = compartment)) +   scale_color_brewer(palette = \"Dark2\") +   labs(x = \"time (years)\", y = \"value\") +   theme(text = element_text(size = 14))"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_BD.html","id":"more-realistic-parameter-values-for-covid-19","dir":"Articles","previous_headings":"Births and natural death","what":"More realistic parameter values for COVID-19","title":"Births and natural deaths and waning natural immunity","text":"parameter values \\(\\nu\\) \\(\\lambda\\) considered thus far unrealistic. now set reasonable values UK. average life expectancy female UK 82.9 years females 79.0 years males (ONS, n.d.): assuming equal numbers sex, average life expectancy 80.95 years. determine \\(\\nu\\), calculate per day mortality rate: \\(\\nu=1/(80.95 \\times 365.25)=3.4\\times 10^{-5}\\) per day. 2019, UK experienced 712,680 births population 66.8 million (ONS, n.d.). fraction, annual births represent roughly 1% population. determine \\(\\lambda\\), convert daily rate resulting \\(\\lambda=2.9 \\times 10^{-5}\\). use parameter values simulate model. , see second epidemic wave, takes nearly 100 years occur! , birth natural death (UK, least) appear play substantial roles causing epidemic re-emergence.","code":"# set parameter values nu <- 1 / (80.95 * 365.25) lambda <- 712680 / 66.8e6 / 365.25  beta <- R0_target * (kappa + nu) / kappa * (gamma + mu + nu)  transmission_parameters(model) <- list(   beta=beta,   kappa=kappa,   gamma=gamma,   mu=mu,   lambda=lambda,   nu=nu,   delta=delta)  # run model results <- run(model, times = seq(0, 100 * 365.25, 1))  # extract states states <- results$states  # plot infectious states %>%   filter(compartment == \"I\") %>%   ggplot(aes(x = time / 365.25, y = value)) +   geom_line(aes(color = compartment)) +   scale_color_brewer(palette = \"Dark2\") +   labs(x = \"time (years)\", y = \"value\") +   theme(text = element_text(size = 14))"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_BD.html","id":"waning-natural-immunity","dir":"Articles","previous_headings":"","what":"Waning natural immunity","title":"Births and natural deaths and waning natural immunity","text":"now explore dynamics affected introduction waning natural immunity. Vaccine efficacy known wane number months vaccines developed thus far: example, considering BNT162b2 (Pfizer) vaccine, rates infection vaccinated six months ago similar vaccine-naive individuals (Goldberg et al. 2021). appears infection confers protection reinfection remains strong around several months year post-infection (Leidi et al. 2021; Abu-Raddad et al. 2021; Gallais et al. 2021), also thought eventually wane. , account waning natural immunity time, modify \\(S\\) \\(R\\) compartments allow recovered individuals become susceptible : \\[\\frac{\\text{d}S}{\\text{d}t} = \\lambda + \\delta R -\\beta S - \\nu S,\\] \\[\\frac{\\text{d}R}{\\text{d}t} = \\gamma - (\\nu + \\delta) R,\\] \\(\\delta\\geq 0\\) rate recovered individuals become susceptible. Note, model allow primary infection affect risk severe disease, thus disease-related death, upon reinfection, may unrealistic COVID-19, risk may lowered. including effect likely substantially affect dynamics infections, focus . illustrate impact waning immunity natural infection, assume average duration immunity reinfection 1.5 years. run simulations using parameters .  model illustrates reoccuring epidemic waves. Since rate natural immunity reinfection wanes much faster rate susceptibles replenished due birth, leads much frequent epidemic waves. model, model births deaths waning immunity, also allows endemic steady state: \\[S^* = \\frac{(\\kappa +\\nu ) (\\gamma +\\mu +\\nu )}{\\beta  \\kappa },\\] \\[E^* = \\frac{(\\nu +\\delta ) (\\gamma +\\mu +\\nu ) (\\beta     \\kappa  \\lambda - \\nu  (\\kappa +\\nu ) (\\gamma +\\mu +\\nu ))}{\\beta  \\kappa  (\\gamma  \\nu  (\\kappa +\\nu +\\delta )+(\\kappa +\\nu )    (\\mu +\\nu ) (\\nu +\\delta ))},\\] \\[ ^* = \\frac{(\\nu +\\delta ) (\\beta  \\kappa  \\lambda -\\nu  (\\kappa +\\nu ) (\\gamma +\\mu +\\nu    ))}{\\beta  (\\gamma  \\nu  (\\kappa +\\nu +\\delta )+(\\kappa +\\nu ) (\\mu +\\nu ) (\\nu    +\\delta ))},\\] \\[ R^* = \\frac{\\beta  \\gamma  \\kappa  \\lambda -\\gamma  \\nu  (\\kappa +\\nu ) (\\gamma +\\mu +\\nu    )}{\\beta  (\\gamma  \\nu  (\\kappa +\\nu +\\delta )+(\\kappa +\\nu ) (\\mu +\\nu ) (\\nu +\\delta    ))}.\\] now overlay \\(^*\\) plot , running model longer illustrate approach equilibrium.  model, can determine number daily cases expected arise endemic equilibrium: \\[\\begin{equation} \\frac{\\text{d}C}{\\text{d}t} = \\beta S^* ^*, \\end{equation}\\] \\(C\\) represents cumulative case counts \\(S^*\\) \\(^*\\) constants. implies new cases appearing day given : \\[\\begin{equation} C(t+1) - C(t) = \\beta S^* ^*. \\end{equation}\\] parameters model, implies roughly 46000 daily cases UK reach equilibrium – huge number. now determine sensitivity case count assumptions duration waning immunity. , consider average durations immunity reinfection ranging 4 months 3 years. case, calculate number daily cases endemic equilibrium.  range durations surveyed, minimum case counts 28000 maximum 99000. Whilst model makes number simplifications, simulations hint interventions ongoing booster vaccination campaigns may required keep cases reasonable level.","code":"delta <- 1 / (1.5 * 365.25)  transmission_parameters(model) <- list(   beta=beta,   kappa=kappa,   gamma=gamma,   mu=mu,   lambda=lambda,   nu=nu,   delta=delta)  # run model results <- run(model, times = seq(0, 10 * 365.25, 1))  # extract states states <- results$states  # plot infectious states %>%   filter(compartment == \"I\") %>%   ggplot(aes(x = time / 365.25, y = value)) +   geom_line(aes(color = compartment)) +   scale_color_brewer(palette = \"Dark2\") +   labs(x = \"time (years)\", y = \"value\") +   theme(text = element_text(size = 14)) I_star <- (beta * kappa * lambda - nu * (kappa + nu) * (gamma + mu + nu)) * (nu + delta) / (beta * (kappa + nu) * (mu + nu) * (nu + delta) + gamma * nu * (kappa + nu + delta))  # run model results <- run(model, times = seq(0, 100 * 365.25, 1))  # extract states states <- results$states  # plot infectious states %>%   filter(compartment == \"I\") %>%   ggplot(aes(x = time / 365.25, y = value)) +   geom_hline(yintercept = I_star, linetype=2) +   geom_line(aes(color = compartment)) +   scale_color_brewer(palette = \"Dark2\") +   labs(x = \"time (years)\", y = \"value\") +   theme(text = element_text(size = 14)) # helper function daily_cases <- function(delta) {   S_star <- (kappa + nu) * (gamma + mu + nu) / (beta * kappa) cases <- beta * I_star * S_star   I_star <- (beta * kappa * lambda - nu * (kappa + nu) * (gamma + mu + nu)) * (nu + delta) / (beta * (kappa + nu) * (mu + nu) * (nu + delta) + gamma * nu * (kappa + nu + delta))   beta * S_star * I_star * 66.8e6 }  # sensitivity analysis immunity_durations <- seq(1 / 3, 3, length.out=50) deltas <- 1 / (365.25 * immunity_durations) cases <- daily_cases(deltas) df <- tibble(immunity_durations, cases) df %>%    ggplot(aes(x=immunity_durations, y=cases)) +   geom_line() +   xlab(\"Average natural immunity to reinfection (years)\") +   ylab(\"Daily endemic case counts\")"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_BD.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Births and natural deaths and waning natural immunity","text":"Abu-Raddad, Laith J, Hiam Chemaitelly, Peter Coyle, Joel Malek, Ayeda Ahmed, Yasmin Mohamoud, Shameem Younuskunju, et al. 2021. “SARS-Cov-2 Antibody-Positivity Protects Reinfection Least Seven Months 95% Efficacy.” EClinicalMedicine 35: 100861. Diekmann, Odo, JAP Heesterbeek, Johan AJ Metz. 1990. “Definition Computation Basic Reproduction Ratio R0 Models Infectious Diseases Heterogeneous Populations.” Journal Mathematical Biology 28 (4): 365–82. Ferguson, Neil, Daniel Laydon, Gemma Nedjati Gilani, Natsuko Imai, Kylie Ainslie, Marc Baguelin, Sangeeta Bhatia, et al. 2020. “Report 9: Impact Non-Pharmaceutical Interventions (Npis) Reduce Covid19 Mortality Healthcare Demand.” Gallais, Floriane, Pierre Gantner, Timothée Bruel, Aurélie Velay, Delphine Planas, Marie-Josée Wendling, Sophie Bayer, et al. 2021. “Evolution Antibody Responses 13 Months Sars-Cov-2 Infection Risk Reinfection.” EBioMedicine 71: 103561. Gazit, Sivan, Roei Shlezinger, Galit Perez, Roni Lotan, Asaf Peretz, Amir Ben-Tov, Dani Cohen, Khitam Muhsen, Gabriel Chodick, Tal Patalon. 2021. “Comparing Sars-Cov-2 Natural Immunity Vaccine-Induced Immunity: Reinfections Versus Breakthrough Infections.” MedRxiv. Goldberg, Yair, Micha Mandel, Yinon M Bar-, Omri Bodenheimer, Laurence Freedman, Eric J Haas, Ron Milo, Sharon Alroy-Preis, Nachman Ash, Amit Huppert. 2021. “Waning Immunity Bnt162b2 Vaccine Israel.” New England Journal Medicine 385 (24): e85. Leidi, Antonio, Flora Koegler, Roxane Dumont, Richard Dubos, Marı́-Eugenia Zaballa, Giovanni Piumatti, Matteo Coen, et al. 2021. “Risk Reinfection Seroconversion Sars-Cov-2: Population-Based Propensity-Score Matched Cohort Study.” medRxiv. ONS. n.d. “National Life Tables \"Life Expectancy Uk: 2018 2020\".” {https://www.ons.gov.uk/peoplepopulationandcommunity/birthsdeathsandmarriages/lifeexpectancies/bulletins/nationallifetablesunitedkingdom/2018to2020}. ONS. n.d. “Overview UK population: January 2021.” \\url{https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates/articles/overviewoftheukpopulation/january2021}.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_CT.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"NPIs: contact tracing and quarantining","text":"Contact tracing, testing isolation key elements many governments’ responses COVID-19 pandemic. suggested well-executed programmes testing tracing quarantining affected individuals explains countries, noticeably East Asia, successfully dealt pandemic (Cohen Kupferschmidt 2020). article, introduce model extends SEIRD model (see Vignette(\"SEIRD\")) can used investigate importance type non-pharmaceutial intervention. Since sizeable proportion transmission thought happen symptoms occur (et al. 2020), include presymptomatic compartment, \\(P\\), contributes infectious. Now “infectious” compartment, \\(\\), represents symptomatic infectious individuals. Although estimates importance asymptomatic individuals transmission vary widely, consensus important reservoirs transmission (Byambasuren et al. 2020). , also include asymptomatic compartment, \\(\\), model. model assume without interventions place following structure.  model, new parameters basic SEIRD \\(0\\leq \\eta_a \\leq 1\\) proportion asymptomatic cases; \\(1/\\omega\\) typical latent period; \\(1/\\psi\\) typical time spent transmitting presymptomatically. now extend model include tracing isolation. model assumes proportion, \\(0\\leq \\phi \\leq 1\\) individuals successfully self-isolate symptoms appear, spawning transmission. also assumes proportion infected individuals, \\(0\\leq \\chi \\leq 1\\), traced contacts symptomatic infected individuals also successfully isolate. overall system ODEs following form: \\[\\begin{align} \\frac{\\text{d}S}{\\text{d}t} &= - (\\beta (P + ) + \\beta_a ) S,\\\\ \\frac{\\text{d}E}{\\text{d}t} &= \\beta (1 - \\chi) (P + ) S + \\beta_a S - \\omega E,\\\\ \\frac{\\text{d}P}{\\text{d}t} &= (1 - \\eta_a) \\omega E - \\psi P,\\\\ \\frac{\\text{d}}{\\text{d}t} &= \\eta_a \\omega E - \\gamma ,\\\\ \\frac{\\text{d}}{\\text{d}t} &= (1 - \\phi) \\psi P - (\\gamma + \\mu) ,\\\\ \\frac{\\text{d}E^T}{\\text{d}t} &= \\beta \\chi (P + ) S - \\omega E^T,\\\\ \\frac{\\text{d}P^T}{\\text{d}t} &= (1 - \\eta_a) \\omega E^T - \\psi P^T,\\\\ \\frac{\\text{d}^T}{\\text{d}t} &= \\eta_a \\omega E^T - \\gamma ^T,\\\\ \\frac{\\text{d}^T}{\\text{d}t} &= \\psi P^T + \\phi \\psi P - (\\gamma + \\mu) ^T,\\\\ \\frac{\\text{d}R}{\\text{d}t} &= \\gamma (+ ^T + + ^T),\\\\ \\frac{\\text{d}D}{\\text{d}t} &= \\mu (+ ^T). \\end{align}\\] alternative way understanding model structure visualise . Effectively, model two parallel tracts, copies first model vignette: one representing unisolated individuals (.e. compartments without “T”) representing quarantining individuals (“T”). two flows quarantined tract: susceptibles can isolated upon infection \\(S\\rightarrow E^T\\) known contacts individual goes symptomatic: .e. either \\(P\\) \\(\\); infected individuals can quarantined become symptomatic \\(P\\rightarrow ^T\\).","code":"library(comomodels)  # create model object model <- SEIRD_CT()  # visualise structure ode_structure_diagram(model)"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_CT.html","id":"basic-reproduction-number","dir":"Articles","previous_headings":"Introduction","what":"Basic reproduction number","title":"NPIs: contact tracing and quarantining","text":"can shown basic reproduction number model given by1: \\[\\begin{equation} R_0 = \\eta_a\\underbrace{\\frac{\\beta_a}{\\gamma}}_{\\text{asymptomatic cases}} + (1 - \\eta_a)(1 - \\chi) \\left[\\underbrace{\\frac{\\beta}{\\psi}}_{\\text{presymptomatic cases}} + (1-\\phi) \\underbrace{\\frac{\\beta}{\\gamma+\\mu}}_{\\text{symptomatic cases}}\\right]. \\end{equation}\\] underbraces show equation , expression ample intuition behind . average number cases generated given infection equates sum : average cases generated infection asymptomatic, weighted probability case asymptomatic; average number cases presymptomatics overall cases asymptomatic \\((1-\\eta_a)\\) quarantined due contact tracing \\((1-\\chi)\\); generated symptomatics overall fraction cases \\((1-\\eta_a)(1-\\chi)\\) self isolate symptoms start \\((1-\\phi)\\). expression \\(R_0\\) shows even contact tracing isolation contacts perfect (\\(\\chi=1\\)), remains transmission due solely asymptomatic cases. meta-analysis concluded overall proportion cases due asymptomatics 17% (Byambasuren et al. 2020), meaning transmission rate asymptomaics, \\(\\beta_a\\) high enough (, although model include , longer duration infection), possible sustain epidemic solely asymptomatic transmission: \\(\\eta \\beta_a/\\gamma>1\\). analysis suggests regular testing, regardless whether individual symptoms, may effective way target asymptomatic reservoirs infection, upon testing positive individuals close contacts isolate. expression \\(R_0\\) suggest relevant importance self isolation symptomatic individuals versus isolation contacts symptomatic individuals? indicates former much less important latter, self isolation upon symptomatic prevents cases generated person whilst symptomatic (may already transmitted whilst asymptomatic). Whereas contacts symptomatic individuals quarantined, prevents presymtpomatic symptomatic transmission contacts. However, likely much harder effectively contact trace individuals get individuals quarantine enforce self isolation upon becoming symptomatic.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_CT.html","id":"contact-tracing-and-isolation-for-ancestral-sars-cov-2-and-the-delta-and-omicron-variants","dir":"Articles","previous_headings":"Introduction","what":"Contact tracing and isolation for ancestral SARS-CoV-2, and the Delta and Omicron variants","title":"NPIs: contact tracing and quarantining","text":"now compare utility NPIs containing COVID-19 transmission. ancestral SARS-CoV-2, average duration presymptomatic infectiousness estimated 3 days (et al. 2020), representing roughly 55% latent period (Xin et al. 2021). Whilst rough assumption, lacking data, assume fraction latent period represents presymptomatic infectiousness Delta Omicron variants. assume 17% cases asymptomatic: meaning \\(\\eta_a=0.17\\) (Byambasuren et al. 2020). meta-analysis attempting determine relative infectiousness asymptomatic cases versus symptomatic found estimates literature ranging 0 1 (McEvoy et al. 2021), however, studies analysed handful estimates. study outbreak COVID-19 marine recruits used qPCR proxy viral load found approximately four times higher symptomatic opposed asymptomatic carries (Letizia et al. 2020), , set \\(\\beta_a=0.25\\beta\\). first find transmission parameters across variants assuming NPIs place. Note, requires us find beta values match given \\(R_0\\) values variant, via optimisation (optim). Now run SEIRD_CT model variants. compare number scenarios: base scenario nothing; “self isolation” scenario self isolation upon becoming symptomatic NPI place, 50% people follow : \\(\\chi=0\\) \\(\\phi=0.5\\); “contact tracing scenario” 50% symptomatic individuals contacts traced isolate: \\(\\chi=0.5\\) \\(\\phi=0.0\\); scenario implement aforementioned NPIs. Note, reaching 50% symptomatic individuals getting contacts isolate likely unrealistic, keep figure directly compare NPI self isolation .  plot, evident contact tracing scenario effective reducing peak case load self isolation scenario, implementing NPIs even greater impact. ancestral COVID-19, indeed, appears scenario implemented sufficient avoid epidemic altogether. Delta Omicron, however, epidemics diminished although remain – variants, transmission rate high even unrealistically effective NPI policies consider quash transmission alone. Comparing R0 values policies, results explicated: epidemic can avoided ancestral strain NPIs place.","code":"library(tidyverse) #> ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── #> ✔ ggplot2 3.3.6     ✔ purrr   0.3.4 #> ✔ tibble  3.1.7     ✔ dplyr   1.0.9 #> ✔ tidyr   1.2.0     ✔ stringr 1.4.0 #> ✔ readr   2.1.2     ✔ forcats 0.5.1 #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag()  # helper functions R0_calculator <- function(beta, gamma, mu, chi, phi, omega, eta_a, psi) {   model <- SEIRD_CT()   params <- list(beta=beta,                  beta_a=0.25 * beta,                  gamma=gamma,                  mu=mu,                  chi=chi,                  phi=phi,                  omega=omega,                  eta_a=eta_a,                  psi=psi)   transmission_parameters(model) <- params   R0(model) } find_beta <- function(R0_target, gamma, mu, chi, phi, omega, eta_a, psi){   f_beta <- function(beta) {     R0_test <- R0_calculator(beta, gamma, mu, chi, phi, omega, eta_a, psi)     abs(R0_test - R0_target)   }      # minimise difference between target and actual R0   optim(1, f_beta)$par }  # parameters assumed same across all variants chi <- 0 phi <- 0 eta_a <- 0.17 inits <- list(   S0=0.999, E0=0, P0=0, A0=0, I0=0.001,   Et0=0, Pt0=0, At0=0, It0=0, R0=0)  # ancestral params <- covid_transmission_parameters() kappa <- params$kappa latent_period <- 1 / kappa presymptomatic_period <- 3 psi <- 1 / presymptomatic_period omega <- 1 / (latent_period - presymptomatic_period) fraction_infectious <- presymptomatic_period / latent_period gamma <- params$gamma mu <- params$mu R0_target <- params$R0 beta <- find_beta(R0_target, gamma, mu, chi, phi, omega, eta_a, psi) #> Warning in optim(1, f_beta): one-dimensional optimization by Nelder-Mead is unreliable: #> use \"Brent\" or optimize() directly beta_a <- 0.25 * beta params_ancestral <- list(beta=beta,                beta_a=beta_a,                gamma=gamma,                mu=mu,                chi=chi,                phi=phi,                omega=omega,                eta_a=eta_a,                psi=psi)  # gets parameters for a variant get_parameters_variant <- function(variant_name) {     params <- covid_transmission_parameters(variant=variant_name)   kappa <- params$kappa   latent_period <- 1 / kappa   # assumes same fraction presymptomatic as for ancestral   presymptomatic_period <- latent_period * fraction_infectious   psi <- 1 / presymptomatic_period   omega <- 1 / (latent_period - presymptomatic_period)   gamma <- params$gamma   mu <- params$mu   R0_target <- params$R0   beta <- find_beta(R0_target, gamma, mu, chi, phi, omega, eta_a, psi)   beta_a <- 0.25 * beta      model <- SEIRD_CT()   params <- list(beta=beta,                  beta_a=beta_a,                  gamma=gamma,                  mu=mu,                  chi=chi,                  phi=phi,                  omega=omega,                  eta_a=eta_a,                  psi=psi)   params }  params_delta <- get_parameters_variant(\"delta\") #> Warning in optim(1, f_beta): one-dimensional optimization by Nelder-Mead is unreliable: #> use \"Brent\" or optimize() directly params_omicron <- get_parameters_variant(\"omicron\") #> Warning in optim(1, f_beta): one-dimensional optimization by Nelder-Mead is unreliable: #> use \"Brent\" or optimize() directly # helper functions to run model for all variants run_model <- function(chi, phi, params, inits, times=seq(0, 365, 1)) {   model <- SEIRD_CT()   params$chi <- chi   params$phi <- phi   transmission_parameters(model) <- params   initial_conditions(model) <- inits   outputs <- run(model, times)   outputs$changes }  run_all_variants <- function(chi, phi, scenario) {   changes_ancestral <- run_model(     chi=chi, phi=phi, params_ancestral, inits) %>%      mutate(variant=\"ancestral\") %>%      mutate(scenario=scenario)   changes_delta <- run_model(     chi=chi, phi=phi, params_delta, inits) %>%      mutate(variant=\"Delta\") %>%      mutate(scenario=scenario)   changes_omicron <- run_model(     chi=chi, phi=phi, params_omicron, inits) %>%      mutate(variant=\"Omicron\") %>%      mutate(scenario=scenario)   changes_ancestral %>%      bind_rows(changes_delta) %>%      bind_rows(changes_omicron) }  # different policy mixes policies <- c(\"do nothing\",               \"self isolation\",               \"contact tracing\",               \"self isolation \\n+ contact tracing\") policy_parameters <- tibble(policy=policies) %>%    mutate(chi=c(0, 0, 0.5, 0.5),          phi=c(0, 0.5, 0, 0.5))  # run all models for(i in seq_along(policies)) {  changes <- run_all_variants(    policy_parameters$chi[i],    policy_parameters$phi[i],    policy_parameters$policy[i])  if(i == 1) {    big_df <- changes  } else{    big_df <- big_df %>% bind_rows(changes)  } }  # plot big_df %>%     mutate(scenario=fct_relevel(scenario, policies)) %>%    dplyr::filter(compartment==\"Incidence\") %>%    ggplot(aes(x=time, y=value)) +   geom_line() +   facet_grid(vars(variant), vars(scenario)) +   xlab(\"time (days)\") +   ylab(\"case fraction\") # helper functions to find R0 find_R0 <- function(chi, phi, params) {   model <- SEIRD_CT()   params$chi <- chi   params$phi <- phi   transmission_parameters(model) <- params   R0(model) }  find_R0_all_variants <- function(chi, phi) {   R0_ancestral <- find_R0(chi, phi, params_ancestral)   R0_delta <- find_R0(chi, phi, params_delta)   R0_omicron <- find_R0(chi, phi, params_omicron)   tibble(     ancestral=R0_ancestral,     Delta=R0_delta,     Omicron=R0_omicron) }  # calculate R0s for(i in seq_along(policy_parameters$policy)) {   temp_df <- find_R0_all_variants(     chi=policy_parameters$chi[i],     phi=policy_parameters$phi[i]) %>%      mutate(scenario=policy_parameters$policy[i])   if(i == 1)     big_df <- temp_df   else     big_df <- big_df %>% bind_rows(temp_df) }  # plot big_df %>%    mutate(scenario=fct_relevel(scenario, policies)) %>%    pivot_longer(ancestral:Omicron) %>%    mutate(variant=name) %>%    ggplot(aes(x=scenario, y=value)) +   geom_col() +   geom_hline(yintercept = 1, linetype=2,              colour=\"orange\") +   ylab(\"R0\") +   coord_flip() +   facet_wrap(~variant, scales=\"free\")"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_CT.html","id":"references","dir":"Articles","previous_headings":"Introduction","what":"References","title":"NPIs: contact tracing and quarantining","text":"Byambasuren, Oyungerel, Magnolia Cardona, Katy Bell, Justin Clark, Mary-Louise McLaws, Paul Glasziou. 2020. “Estimating Extent Asymptomatic Covid-19 Potential Community Transmission: Systematic Review Meta-Analysis.” Official Journal Association Medical Microbiology Infectious Disease Canada 5 (4): 223–34. Cohen, Jon, Kai Kupferschmidt. 2020. “Countries Test Tactics \"War\" Covid-19.” , Xi, Eric HY Lau, Peng Wu, Xilong Deng, Jian Wang, Xinxin Hao, Yiu Chung Lau, et al. 2020. “Temporal Dynamics Viral Shedding Transmissibility Covid-19.” Nature Medicine 26 (5): 672–75. Letizia, Andrew G, Irene Ramos, Ajay Obla, Carl Goforth, Dawn L Weir, Yongchao Ge, Marcas M Bamman, et al. 2020. “SARS-Cov-2 Transmission Among Marine Recruits Quarantine.” New England Journal Medicine 383 (25): 2407–16. McEvoy, David, Conor McAloon, Aine Collins, Kevin Hunt, Francis Butler, Andrew Byrne, Miriam Casey-Bryars, et al. 2021. “Relative Infectiousness Asymptomatic Sars-Cov-2 Infected Persons Compared Symptomatic Individuals: Rapid Scoping Review.” BMJ Open 11 (5): e042354. van den Driessche, Pauline. 2017. “Reproduction Numbers Infectious Disease Models.” Infectious Disease Modelling 2 (3): 288–303. https://doi.org/10.1016/j.idm.2017.06.002. Xin, Hualei, Yu Li, Peng Wu, Zhili Li, Eric H Y Lau, Ying Qin, Liping Wang, Benjamin J Cowling, Tim K Tsang, Zhongjie Li. 2021. “Estimating Latent Period Coronavirus Disease 2019 (COVID-19).” Clinical Infectious Diseases, September. https://doi.org/10.1093/cid/ciab746.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_age_structured.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Age-structured model","text":"basic SEIRD model assumes individuals infection status behave identically infection effect. reality, however, individuals infection status may differ substantively. particular, individuals’ age likely correlate social differences – example, teenager may mix people per day elderly person – biological differences – example, severity illness may, average, generally worse elderly (known case COVID-19 (Verity et al. 2020)). Models allow varying transmission dynamics different age groups can capture differences, document explains basics age-structured SEIRD model. model describes populations susceptible, exposed, infectious, recovered dead individuals evolve time. model, age class, \\(\\), system five coupled differential equations governing movements compartments. age classes interact one another, set equations simply follow basic SEIRD dynamics: \\[\\begin{align} \\frac{\\text{d}S_i}{\\text{d}t} &= -\\beta S_i I_i\\\\ \\frac{\\text{d}E_i}{\\text{d}t} &= \\beta S_i I_i -\\kappa E_i\\\\ \\frac{\\text{d}I_i}{\\text{d}t} &= \\kappa E_i - (\\gamma + \\mu) I_i\\\\ \\frac{\\text{d}R_i}{\\text{d}t} &= \\gamma I_i\\\\ \\frac{\\text{d}D_i}{\\text{d}t} &= \\mu I_i. \\end{align}\\] system ODEs solved independently age group \\(\\), dynamics non-age-structured SEIRD model. Additionally, infection transmission age classes identical, aside differences initial conditions compartment.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_age_structured.html","id":"age-dependent-mortality","dir":"Articles","previous_headings":"","what":"Age-dependent mortality","title":"Age-structured model","text":"COVID-19 transmission, key difference death rate varies age. Verity et al. (2020), infection fatality ratio – proportion infected individuals die – shown vary strongly age using aggregate case deaths data mainland China March 2020. graph estimates. , see dramatic rise risk death beginning around 50-59 age class.  can allow different rates death model modifying equation infectious dead compartments : \\[\\begin{align} \\frac{\\text{d}I_i}{\\text{d}t} &= \\kappa E_i - (\\gamma_i + \\mu_i) I_i\\\\ \\frac{\\text{d}D_i}{\\text{d}t} &= \\mu_i I_i. \\end{align}\\] compartment death rate, \\(\\mu_i\\) recovery rate, \\(\\gamma_i\\). allow different recovery rates across age classes flexibility provides parameterising model – see . Since, model, two fates infectious individual – death recovery – proportion infectious individuals die given : \\[\\begin{equation} \\text{IFR}_i = \\frac{\\text{rate death}}{\\text{rate death} + \\text{rate recovery}} = \\frac{\\mu_i}{\\mu_i + \\gamma_i}. \\end{equation}\\]","code":"# for 80+ group we pick upper age to be 110 df <- tribble(   ~lower_age, ~upper_age, ~IFR,   0, 9, 0.00161,   10, 19, 0.00695,   20, 29, 0.0309,   30, 39, 0.0844,   40, 49, 0.161,   50, 59, 0.595,   60, 69, 1.93,   70, 79, 4.28,   80, 110, 7.80) %>%    mutate(IFR = IFR / 100) %>%    mutate(age_range=paste0(lower_age, \"-\", upper_age)) %>%    mutate(age_range=as.factor(age_range)) %>%    mutate(age_range=fct_reorder(age_range, lower_age))  df %>%    ggplot(aes(x=age_range, y=IFR)) +   geom_point() +   scale_y_continuous(labels=scales::percent_format(accuracy = 1)) +   xlab(\"Age range\") +   ylab(\"IFR\")"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_age_structured.html","id":"intermixing-between-age-groups","dir":"Articles","previous_headings":"","what":"Intermixing between age groups","title":"Age-structured model","text":"aforementioned system ODEs , currently, allow individuals different age classes mix one another. However, reality, susceptible individual given age class can become infected age class: capture aspect model, infected individuals age supposed intermix, mixing rate dictated -called “contact matrix”, \\(C\\). elements contact matrices, \\(C_{,j}\\), indicate expected number contacts individual age class \\(\\) experiences age class \\(j\\) per day. package, include country-level estimates contact matrices (Prem, Cook, Jit (2017); full details see data documentation). actually four types contact matrix corresponding daily numbers contacts home, work, school settings. , visualise India.  can see majority contacts fall younger individuals, occurring school “” locations. home, however, substantial intergenerational mixing settings. model introduce compartmentalise individuals according location, make overall contact matrix summming together.  now use contact matrix allow infections pass age groups. , amend governing equations susceptible exposed individuals within age class \\(\\): \\[\\begin{align} \\frac{\\text{d}S_i}{\\text{d}t} &= -\\beta S_i \\Sigma_{j}C_{ij} I_j\\\\ \\frac{\\text{d}E_i}{\\text{d}t} &= \\beta S_i \\Sigma_{j}C_{ij} I_j -\\kappa E_i\\\\ \\end{align}\\] Specifically, term \\(S_i \\Sigma_{j}C_{ij} I_j\\) effectively indicates expected number contacts susceptible individuals age class \\(\\) infected individuals across classes. can visualise full model structure situation two age classes.","code":"# reformat matrices for plotting ages <- seq(0, 80, 5) age_names <- vector(length = 16) for(i in seq_along(age_names)) {   age_names[i] <- paste0(ages[i], \"-\", ages[i + 1]) } format_matrix <- function(contact_matrix, age_names) {   colnames(contact_matrix) <- age_names   contact_matrix$age_infectee <- age_names   contact_matrix %>%     pivot_longer(all_of(age_names)) %>%      rename(age_infector=name) %>%      mutate(age_infector=fct_relevel(age_infector, age_names)) %>%      mutate(age_infectee=fct_relevel(age_infectee, age_names)) } c_home <- format_matrix(contact_home$India, age_names) %>% mutate(type=\"home\") c_work <- format_matrix(contact_work$India, age_names) %>% mutate(type=\"work\") c_school <- format_matrix(contact_school$India, age_names) %>% mutate(type=\"school\") c_other <- format_matrix(contact_other$India, age_names) %>% mutate(type=\"other\") c_all <- c_home %>%   bind_rows(c_work) %>%    bind_rows(c_school) %>%    bind_rows(c_other) # plot all c_all %>%   ggplot(aes(x=age_infector, y=age_infectee, fill=value)) +   xlab(\"age group of infector\") + ylab(\"age group of infectee\") +   theme(text = element_text(size=14),         axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +   geom_tile() +   facet_wrap(~type) +   scale_fill_viridis_c(\"contacts\",                        trans=\"sqrt\",                        breaks=c(0, 1, 4, 7)) c_combined <- c_all %>%    group_by(age_infectee, age_infector) %>%    summarise(value=sum(value)) #> `summarise()` has grouped output by 'age_infectee'. You can override using the #> `.groups` argument. c_combined %>%    ggplot(aes(x=age_infector, y=age_infectee, fill=value)) +   xlab(\"age group of infector\") + ylab(\"age group of infectee\") +   theme(text = element_text(size=20),         axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +   geom_tile() +   scale_fill_viridis_c(\"contacts\",                        trans=\"sqrt\",                        breaks=c(0, 1, 4, 10)) # create model object my_model <- SEIRDAge()  # print structure ode_structure_diagram(my_model)"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_age_structured.html","id":"simulating-an-epidemic-characteristic-of-the-first-covid-19-wave","dir":"Articles","previous_headings":"","what":"Simulating an epidemic characteristic of the first COVID-19 wave","title":"Age-structured model","text":"Now create model includes age-structured mixing. Since contact matrices 16 age classes, instantiate model number classes. use country-level demographics UN , example, initialise model uniform initial infected population 0.1% across age groups. remaining 99.9% population starts susceptible. next give transmission parameters. , assume average latency period 5.5 days (estimated COVID-19; Xin et al. (2021)), average duration infectiousness 2 days (indicates , 10 days, <1% infectious, line UK policy assumes individuals pass infection 10 days; UK government (2021)). simplicity, assume symptom onset occurs time individual becomes infectious (although evidence suggests presymptomatic transmission; UK government (2021)). assume following parameterisation: \\(\\eta = 1/{\\text{av. time noninfectious}}=1/2\\) \\[\\begin{align} \\gamma_i &= \\eta (1-\\text{IFR}_i)\\\\ \\mu_i &= \\eta \\text{IFR}_i. \\end{align}\\] Indeed, parameterisation possible allow age-dependent recovery rate, \\(\\gamma_i\\). last parameter need set transmission rate, \\(\\beta\\), cover next section.","code":"# load UN data (which is available in the repo) load(file = \"../data/population.rda\")  # use demographic data to create normalised population fractions pops = population[population$country == 'India', ]$pop pop_fraction = pops/sum(pops)  # the contact matrix has an upper group of 80+, so we sum the remaining fractions beyond this point pop_fraction[16] = sum(pop_fraction[16:21]) pop_fraction = pop_fraction[1:16]  # reshape contact matrix into 16x16 form n_ages <- 16 c_combined_wider <- c_combined %>%    pivot_wider(id_cols = age_infectee, names_from = age_infector,               values_from=value) %>%    ungroup() %>%    select(-age_infectee) %>%    as.matrix()  # create model model <- comomodels::SEIRDAge(n_age_categories = n_ages,                  contact_matrix = c_combined_wider,                  age_ranges = as.list(age_names))  # set initial conditions initial_conditions(model) <- list(S0=pop_fraction*0.999,                                   E0=rep(0, n_ages),                                   I0=pop_fraction*0.001,                                   R0=rep(0, n_ages),                                   D0=rep(0, n_ages))"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_age_structured.html","id":"basic-reproduction-number-of-age-structured-models","dir":"Articles","previous_headings":"","what":"Basic reproduction number of age-structured models","title":"Age-structured model","text":"“Report 9” produced Imperial College London (Ferguson et al. 2020) widely held key UK government deciding institute lockdown March 2020. report, baseline reproduction number chosen \\(R_0=2.4\\). vignette, wish choose value \\(\\beta\\) result \\(R_0\\) value. calculate \\(R_0\\) age-structured model? can reason similar fashion basic SEIRD model. start considering expected number secondary infections type \\(\\) caused single infectious individual type \\(j\\), assuming type susceptible: call quantity \\(g_{ij}\\). entirely susceptible population, number new infections type \\(\\) caused single individual type \\(j\\) \\(\\beta N_i C_{ij}\\) per unit time, \\(N_i\\) fraction population age group \\(\\). average duration infection \\(1 / (\\mu_j + \\gamma_j)\\) individual age group \\(j\\). means average number secondary infections type caused infectious individual type j : \\[g_{ij} = \\frac{\\beta N_i C_{ij}}{(\\mu_j + \\gamma_j)}.\\] next generation matrix, \\(G\\), effectively matrix containing \\(g_{ij}\\) elements (Jones 2007)1. individual elements dictate whether, disease-free equilibrium, growth number infections type \\(\\), \\(g_{ij}>1\\). , know whether, aggregate, growth infections? obtain , take dominant eigenvalue matrix \\(G\\) (Jones (2007)). approach finding (, actually, defining \\(R_0\\)) comes Diekmann, Heesterbeek, Metz (1990), proposed providing measure stability disease-free equilibrium linearised version system. comomodels, implemented calculations, can calculate \\(R_0\\) age-structured model. , selected value \\(\\beta\\) reproduces \\(R_0=2.4\\). next simulate model visualise dynamics compartment.  Zooming infected population, see younger age groups highest peak infected population levels.  reflected incidences.  , due much higher rate death older age groups, experience much higher rate death.","code":"kappa <- 1 / 5.5 eta <- 1 / 2 beta <- 0.707  # assume IFR constant within age ranges of contact matrix bands get_lower_age <- function(x) {   as.numeric(substr(x, 1, regexpr(\"-\", x) - 1)) } get_upper_age <- function(x) {   as.numeric(substr(x, regexpr(\"-\", x) + 1, nchar(x))) } lower_age <- map_dbl(age_names, get_lower_age) upper_age <- map_dbl(age_names, get_upper_age) middle_age <- (lower_age + upper_age) / 2  # assume IFR is constant within age bands IFR_vals <- vector(length = length(middle_age)) IFR_getter <- function(age, df) {   for(j in 1:nrow(df)) {     if(age > df$lower_age[j] & age <= df$upper_age[j])       return(df$IFR[j])   } } IFR_vals <- map_dbl(middle_age, ~IFR_getter(., df)) gamma_vals <- eta * (1 - IFR_vals) mu_vals <- eta * IFR_vals  transmission_parameters(model) <- list(b=beta, k=kappa, g=gamma_vals, mu=mu_vals)  print(paste0(\"R_0 = \", round(R0(model, pop_fraction), 2))) #> [1] \"R_0 = 2.4\" res <- run(model, times=seq(0, 100, by = 0.1)) states = res$states changes = res$changes states %>%   ggplot(aes(x=time, y=value, colour=age_range)) +   geom_line() +   facet_wrap(~compartment) +   scale_colour_viridis_d() +   labs(x = \"time (days)\", y = \"fraction of the population\") +   theme(text = element_text(size = 20)) states %>%   filter(compartment==\"I\") %>%    ggplot(aes(x=time, y=value, colour=age_range)) +   geom_line() +   facet_wrap(~compartment) +   scale_colour_viridis_d() +   labs(x = \"time (days)\", y = \"fraction of the population\") +   theme(text = element_text(size = 20)) changes %>%   filter(compartment==\"Incidence\") %>%    ggplot(aes(x=time, y=value, colour=age_range)) +   geom_line() +   facet_wrap(~compartment, scales=\"free\") +   scale_colour_viridis_d() +   labs(x = \"time (days)\", y = \"fraction of the population\") +   theme(text = element_text(size = 20)) changes %>%   filter(compartment==\"Deaths\") %>%    ggplot(aes(x=time, y=value, colour=age_range)) +   geom_line() +   facet_wrap(~compartment, scales=\"free\") +   scale_colour_viridis_d() +   labs(x = \"time (days)\", y = \"fraction of the population\") +   theme(text = element_text(size = 20))"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_age_structured.html","id":"sensitivity-to-initial-conditions","dir":"Articles","previous_headings":"","what":"Sensitivity to initial conditions","title":"Age-structured model","text":"now simulate model different distributions initial infections show sensitivity model initial conditions. First, set initial infections 0.3% total population place uniformly across age groups 15 30. Second, place infections (also 0.3% total population) uniformly across age groups 55-70. Now simulate models plot infections time. model initialised infections among 15-30 years olds, peak infections appears earlier dies away quicker model initialised infections 55-70 year olds. Despite difference, magnitude infection peaks cases comparable well distribution infections age group.   example shows nature seeding population (.e. population initially infected) can significantly influence resultant dynamics. , younger age groups daily contact individuals, epidemic seeded goes population faster one seeded uniformly across older ages.","code":"model_1530 <- comomodels::SEIRDAge(n_age_categories = n_ages,                  contact_matrix = c_combined_wider,                  age_ranges = as.list(age_names)) model_5570 <- comomodels::SEIRDAge(n_age_categories = n_ages,                  contact_matrix = c_combined_wider,                  age_ranges = as.list(age_names)) transmission_parameters(model_1530) <- list(b=beta, k=kappa, g=gamma_vals, mu=mu_vals) transmission_parameters(model_5570) <- list(b=beta, k=kappa, g=gamma_vals, mu=mu_vals) S0_1530 = pop_fraction S0_1530[4:6] = S0_1530[4:6] - 0.001 I0_1530 = rep(0, n_ages) I0_1530[4:6] = 0.001 S0_5570 = pop_fraction S0_5570[12:14] = S0_5570[12:14] - 0.001 I0_5570 = rep(0, n_ages) I0_5570[12:14] = 0.001 initial_conditions(model_1530) <- list(S0=S0_1530,                                   E0=rep(0, n_ages),                                   I0=I0_1530,                                   R0=rep(0, n_ages),                                   D0=rep(0, n_ages)) initial_conditions(model_5570) <- list(S0=S0_5570,                                   E0=rep(0, n_ages),                                   I0=I0_5570,                                   R0=rep(0, n_ages),                                   D0=rep(0, n_ages)) res <- run(model_1530, time=seq(0, 70, by = 0.1))$states res %>%   filter(compartment==\"I\") %>%    ggplot(aes(x=time, y=value, colour=age_range))  +   xlab(\"time (days)\") + ylab(\"fraction of the population\") +   theme(text = element_text(size=20)) +   scale_colour_viridis_d() +   geom_line() +   facet_wrap(~compartment) res <- run(model_5570, time=seq(0, 70, by = 0.1))$states res %>%   filter(compartment==\"I\") %>%    ggplot(aes(x=time, y=value, colour=age_range)) +   xlab(\"time (days)\") + ylab(\"fraction of the population\") +   theme(text = element_text(size=20)) +   scale_colour_viridis_d() +   geom_line() +   facet_wrap(~compartment)"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_age_structured.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Age-structured model","text":"Diekmann, Odo, JAP Heesterbeek, Johan AJ Metz. 1990. “Definition Computation Basic Reproduction Ratio R0 Models Infectious Diseases Heterogeneous Populations.” Journal Mathematical Biology 28 (4): 365–82. Diekmann, Odo, JAP Heesterbeek, Michael G Roberts. 2010. “Construction Next-Generation Matrices Compartmental Epidemic Models.” Journal Royal Society Interface 7 (47): 873–85. Ferguson, Neil, Daniel Laydon, Gemma Nedjati Gilani, Natsuko Imai, Kylie Ainslie, Marc Baguelin, Sangeeta Bhatia, et al. 2020. “Report 9: Impact Non-Pharmaceutical Interventions (Npis) Reduce Covid19 Mortality Healthcare Demand.” Jones, James Holland. 2007. “Notes R0.” California: Department Anthropological Sciences 323: 1–19. Prem, Kiesha, Alex R Cook, Mark Jit. 2017. “Projecting Social Contact Matrices 152 Countries Using Contact Surveys Demographic Data.” PLoS Computational Biology 13 (9): e1005697. UK government. 2021. “Stay home: guidance households possible confirmed coronavirus (COVID-19) infection. Updated 2 December 2021.” https://www.gov.uk/government/publications/covid-19-stay--home-guidance/stay--home-guidance--households--possible-coronavirus-covid-19-infection. Verity, Robert, Lucy C Okell, Ilaria Dorigatti, Peter Winskill, Charles Whittaker, Natsuko Imai, Gina Cuomo-Dannenburg, et al. 2020. “Estimates Severity Coronavirus Disease 2019: Model-Based Analysis.” Lancet Infectious Diseases 20 (6): 669–77. Xin, Hualei, Yu Li, Peng Wu, Zhili Li, Eric HY Lau, Ying Qin, Liping Wang, Benjamin J Cowling, Tim Tsang, Zhongjie Li. 2021. “Estimating Latent Period Coronavirus Disease 2019 (Covid-19).” Clinical Infectious Diseases: Official Publication Infectious Diseases Society America.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_rural_urban.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Urban and rural metapopulations model","text":"consider extension basic SEIRD model considers multiple interacting communities. simplicity, consider two interacting communities . community consists susceptible, exposed, infectious recovered population. Although one can consider two generic communities, implementation consider specifically one urban one rural community, use data UN specify contacts community. following sections, explain equations model, implementation package use , discuss briefly connectedness level communities affects results.","code":""},{"path":[]},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_rural_urban.html","id":"the-equations","dir":"Articles","previous_headings":"The mathematical model","what":"The equations","title":"Urban and rural metapopulations model","text":"base model connected communities model presented Tun et al. (2021). designate urban community \\(U\\) rural community \\(Y\\). Following naming pattern variables parameters used basic SEIRD model, ordinary differential equations describing populations evolve follows, variable \\(X_Z\\) (\\(X \\\\{S,E,,R\\}, Z \\\\{U, Y\\}\\)) designates population individuals infectedness status \\(X\\) community \\(Z\\), \\[\\begin{equation} \\begin{split}     \\frac{\\text{d}S_U}{\\text{d}t} = &-\\beta S_U \\left((I_U+I_Y) (\\phi_U N_U + \\phi_Y N_Y) C + \\frac{I_U}{\\phi_U}N_U(1-C)\\right),\\\\     \\frac{\\text{d}S_Y}{\\text{d}t} = &-\\beta S_Y \\left((I_U+I_Y) (\\phi_U N_U + \\phi_Y N_Y) C + \\frac{I_Y}{\\phi_Y}N_Y(1-C)\\right),\\\\     \\frac{\\text{d}E_U}{\\text{d}t} = &  \\beta S_U \\left((I_U+I_Y) (\\phi_U N_U + \\phi_Y N_Y) C + \\frac{I_U}{\\phi_U}N_U(1-C)\\right) - \\kappa E_U,\\\\     \\frac{\\text{d}E_Y}{\\text{d}t} = & \\beta S_Y \\left((I_U+I_Y) (\\phi_U N_U + \\phi_Y N_Y) C + \\frac{I_Y}{\\phi_Y}N_Y(1-C)\\right)  - \\kappa E_Y,\\\\     \\frac{\\text{d}I_U}{\\text{d}t} = & \\kappa E_U - (\\gamma + \\mu)I_U ,\\\\     \\frac{\\text{d}I_Y}{\\text{d}t} = & \\kappa E_Y - (\\gamma + \\mu)I_Y,\\\\     \\frac{\\text{d}R_U}{\\text{d}t} = & \\gamma I_U,\\\\     \\frac{\\text{d}R_Y}{\\text{d}t} = & \\gamma I_Y,\\\\     \\frac{\\text{d}D_U}{\\text{d}t} = & \\mu I_U,\\\\     \\frac{\\text{d}D_Y}{\\text{d}t} = & \\mu I_Y.\\\\ \\end{split} \\end{equation}\\] equations, \\(\\phi_U\\) fraction population lives urban environment, \\(\\phi_Y\\) fraction population lives rural environment, \\(N_U\\) average number contacts urban individual day, \\(N_Y\\) average number contacts rural individual day, \\((\\phi_U N_U + \\phi_Y N_Y)\\) average number contacts individual. \\(C\\) connectedness parameter, \\(C=1\\) means communities well-mixed , \\(C=0\\) means two communities interact . difference model basic SEIRD model computation number infectious contacts susceptible individual . reflected equations \\(S_Z\\) \\(E_Z\\). Individuals either community can either come contact people community community. extent latter happens determined connectedness parameter \\(C\\). communities completely separate, .e. \\(C=0\\), probability susceptible individual community \\(Z\\) interacts infectious individual number contacts someone community , \\(N_Z\\), multiplied probability contact infectious, \\(I_Z/\\phi_Z\\). communities well-mixed , probability number contacts multiplied probability contact infectious, although now number contacts individual averaged communities, \\(\\phi_U N_U + \\phi_Y N_Y\\), individual can encounter people either community probability infectious contact \\(I_U+I_Y\\). extent communities connected, designated \\(C\\), determines extent two extreme contact patterns play role, thus obtain weighted average appears equations designates total probability susceptible individual \\(Z\\) infectious contact: \\((I_U+I_Y) (\\phi_U N_U + \\phi_Y N_Y) C + \\frac{I_Z}{\\phi_Z}N_Z(1-C)\\).","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_rural_urban.html","id":"the-contact-parameters-n_z","dir":"Articles","previous_headings":"The mathematical model","what":"The contact parameters \\(N_Z\\)","title":"Urban and rural metapopulations model","text":"average number contacts individual given community \\(Z\\), \\(N_Z\\), computed based country-specific contact matrices (Prem et al. 2020), age demographics (“World Population Prospects 2019, Online Edition. Rev. 1” 2019), urban/rural populations split (“Rural Population (% Total Population)” 2018). detailed discussion contact matrices, see age-structured model. number contacts community \\(Z\\) specific country computed first adding contacts contact matrix age group obtain total number contacts individual specific age group day. obtain vector population age community \\(Z\\) taking age demographic data whole country multiplying fraction population lives community \\(Z\\). take weighted average age groups, using age demographic data weights. Lastly, divide number contacts total population size normalize number contacts (populations model normalized). thus get \\[\\begin{equation}     N_{Z} = \\frac{ \\sum_{m = 1}^K c_Z(n,m)\\cdot y_Z}{\\text{total population}},  \\end{equation}\\] \\(c_Z(n,m)\\) entry contact matrix \\(c\\) community \\(Z\\) denoting number contacts someone age group \\(n\\) individuals age group \\(m\\), \\(y_Z\\) vector designating number individuals age group community \\(Z\\).","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_rural_urban.html","id":"implementation-and-use","dir":"Articles","previous_headings":"","what":"Implementation and use","title":"Urban and rural metapopulations model","text":"section, walk use model. First, show load prep appropriate data, included package. ’ll walk example simulation. last subsection, ’ll briefly discuss effect varying connectedness parameter \\(C\\).","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_rural_urban.html","id":"loading-and-prepping-country-specific-data","dir":"Articles","previous_headings":"Implementation and use","what":"Loading and prepping country-specific data","title":"Urban and rural metapopulations model","text":"First, load contact matrices urban rural communities. two sets contact matrices don’t cover exact countries, also make list countries contact matrices, can use later check choice country valid. also load demographic data, load list showing three-letter code country. Next, select country, case Tunisia. needs happen three letter code. check country valid choice checking appears list countries rural urban contact matrix. Now specified country, extract data percentage population rural. recent year data source common 2019, select data year. last step data prep create vector normalized population per age group specific country. contact matrices 5-year age groups oldest group 80+. age demographics go 100+, need sum last five age groups demographics vector ensure compatibility contact matrices.","code":"# load contact matrices load(\"../data/contact_all_urban.rda\") # ROWS are age of person, COLUMNS are age of contact names_urban <- names(contact_all_urban) load(\"../data/contact_all_rural.rda\") names_rural <- names(contact_all_rural) names_common <- intersect(names_urban,names_rural) #import all demographic data # data on percentage of the population that is rural load(\"../data/percentrural_by_country.rda\") # age demographic breakdown into 5 year age categories load(\"../data/agedemographics_by_country.rda\") # conversion table from 3 letter country codes to full names load(\"../data/country_codetoname.rda\") # specify country country <- \"TUN\" if (!(country %in% names_common)) {   stop(paste(country,\" is not a valid three-letter country code.\")) } # get fraction of population that is rural country_rural <- percentrural_by_country$`2019`[percentrural_by_country$`Country Code` == country] frac_rural <- country_rural/100 #turn percentage into fraction # get fraction of population in each 5-year age range # get full name of country country_fullname <- country_codetoname$CountryName[country_codetoname$CountryCode == country] # extract age demographic vector pop_byage_2019 <- agedemographics_by_country[(agedemographics_by_country$`Region, subregion, country or area *` == country_fullname                                      & agedemographics_by_country$`Reference date (as of 1 July)` == 2019),5:25] pop_byage_2019 <- as.double(pop_byage_2019) # normalize to fractions of the total population pop_byage_2019 <- pop_byage_2019/sum(pop_byage_2019)  # must sum last five entries because contact matrices have an 80+ category instead of 100+ pop_byage_2019 <- c(pop_byage_2019[1:15], sum(pop_byage_2019[16:20]))"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_rural_urban.html","id":"basic-simulation","dir":"Articles","previous_headings":"Implementation and use","what":"Basic simulation","title":"Urban and rural metapopulations model","text":"start creating instance model class, followed setting parameter values model determined demographics contact matrices. Next set initial conditions model, specify separately fraction population infected urban community fraction infected rural community. Note fractions total population across communities! populations normalized, initial conditions together must sum one. example, seed epidemic urban community. implementation SEIRD model two communities, several options inputting data age demographics communities contacts . can choose use data sets package provide information specific countries. Note want , .e. use contact matrices demographic data, essential set demographic data entering contact matrices. done via code . number contacts fraction population live rural environment calculated . Instead using data sets can also choose set contact rates fraction population rural . done assigning fraction rural, single number 0 1, directly country_demog(model), assigning list two values contact_rates(model). Note wish use contact matrices, full age demographic data required, free use age demographic data set contact rates manually. last thing set time span simulate model, run . output model can plotted populations plotted separately communities populations summed across communities can observe dynamics susceptible, exposed, infectious, recovered dead individuals whole population.","code":"model <- SEIRD_RU() b = 0.3 # probability of infection k = 0.2 # 1/(incubation period in days) g = 0.1# 1/(days between infection and recovery) m = 0.03 # probability of death, cases-fatality ratio. C = 1 # connectedness parameter transmission_parameters(model) <- list(b, k, g, m, C) start_infected_urban = 0.0001 start_infected_rural = 0 S0U = 1-frac_rural - start_infected_urban E0U = 0 I0U = start_infected_urban R0U = 0 S0Y = frac_rural - start_infected_rural E0Y = 0 I0Y = start_infected_rural R0Y = 0 initial_conditions(model) <- list(S0U, E0U, I0U, R0U,                                         S0Y, E0Y, I0Y, R0Y) #set demographic data country_demog(model) <- list(pop_byage_2019*(1-frac_rural),pop_byage_2019*frac_rural)  # set contact matrices contact_rates(model) <- list(contact_all_urban[[country]],contact_all_rural[[country]]) tend = 80 time = seq(0, tend, by = 1)  # run simulation output <- run(model, time) dim(output) #> [1] 972   4 # Communities plotted separately i <- sapply(output, is.factor) output[i] <- lapply(output[i], as.character) SEIR_df <- subset(output, compartment != \"Incidences_U\" & compartment != \"Deaths_U\" & compartment != \"Incidences_Y\" & compartment != \"Deaths_Y\") SEIR_df$compartment <- factor(SEIR_df$compartment, levels = c(\"S_U\", \"E_U\", \"I_U\", \"R_U\", \"S_Y\", \"E_Y\", \"I_Y\", \"R_Y\")) col <- c(\"S_U\" = \"blue\", \"E_U\" = \"green\", \"I_U\" = \"yellow\", \"R_U\" = \"red\", \"S_Y\" = \"lightskyblue1\", \"E_Y\" = \"lightgreen\", \"I_Y\" = \"lightyellow\", \"R_Y\" = \"indianred\") SEIRplot <- ggplot(SEIR_df, aes(x = time, y = value)) +   geom_line(aes(color = compartment), size = 1.5) +   labs(x = \"time (days)\", y = \"fraction of the population\") +   theme(legend.position = \"bottom\", legend.title = element_blank(), text = element_text(size = 20)) +   scale_color_manual(values = col)  case_df <- subset(output, compartment == \"Incidences_U\" | compartment == \"Deaths_U\" | compartment == \"Incidences_Y\" | compartment == \"Deaths_Y\") case_df$compartment <- factor(case_df$compartment, levels = c(\"Incidences_U\", \"Deaths_U\", \"Incidences_Y\", \"Deaths_Y\")) col <- c(\"Cases_U\" = \"grey28\", \"Deaths_U\" = \"black\", \"Cases_Y\" = \"lightgray\", \"Deaths_Y\" = \"darkgray\") inc_plot <- ggplot(case_df, aes(x = time, y = value, fill = compartment)) +   geom_bar(stat=\"identity\", position = position_dodge()) +   labs(x = \"time (days)\", y = \"fraction of the population\") +   theme(legend.position = \"bottom\", legend.title = element_blank(), text = element_text(size = 20)) +   scale_fill_discrete(labels = c(\"Cases_U\",\"Deaths_U\",\"Cases_Y\",\"Deaths_Y\"))  grid.arrange(SEIRplot,inc_plot,nrow = 2) SEIR_total <- SEIR_df CD_total <- case_df  SEIR_total$value[SEIR_total$compartment == \"S_U\"] <- SEIR_df$value[SEIR_df$compartment == \"S_U\"] + SEIR_df$value[SEIR_df$compartment == \"S_Y\"] SEIR_total$value[SEIR_total$compartment == \"E_U\"] <- SEIR_df$value[SEIR_df$compartment == \"E_U\"] + SEIR_df$value[SEIR_df$compartment == \"E_Y\"] SEIR_total$value[SEIR_total$compartment == \"I_U\"] <- SEIR_df$value[SEIR_df$compartment == \"I_U\"] + SEIR_df$value[SEIR_df$compartment == \"I_Y\"] SEIR_total$value[SEIR_total$compartment == \"R_U\"] <- SEIR_df$value[SEIR_df$compartment == \"R_U\"] + SEIR_df$value[SEIR_df$compartment == \"R_Y\"] CD_total$value[CD_total$compartment == \"Incidences_U\"] <- case_df$value[case_df$compartment == \"Incidences_U\"] + case_df$value[case_df$compartment == \"Incidences_Y\"] CD_total$value[CD_total$compartment == \"Deaths_U\"] <- case_df$value[case_df$compartment == \"Deaths_U\"] + case_df$value[case_df$compartment == \"Deaths_Y\"]   SEIR_total <- SEIR_total[SEIR_total$compartment != \"S_Y\" & SEIR_total$compartment != \"E_Y\" & SEIR_total$compartment != \"I_Y\" & SEIR_total$compartment != \"R_Y\",] CD_total <- CD_total[CD_total$compartment != \"Incidences_Y\" & CD_total$compartment != \"Deaths_Y\",]  SEIRplot_total <- ggplot(NULL, aes(x = time, y = value)) +   geom_line(data = SEIR_total, aes(color = compartment), size = 1.5) +   labs(x = \"time (days)\", y = \"fraction of the population\") +   scale_colour_discrete(labels = c(\"Total S\", \" Total E\",\"Total I\",\"Total R\")) +   theme(legend.position = \"bottom\", legend.title = element_blank(), text = element_text(size = 20))  incplot_total <- ggplot(CD_total, aes(x = time, y = value, fill = compartment)) +   geom_bar(stat=\"identity\", position = position_dodge()) +   labs(x = \"time (days)\", y = \"fraction of the population\") +   theme(legend.position = \"bottom\", legend.title = element_blank(), text = element_text(size = 20)) +   scale_fill_discrete(labels = c(\"Cases\",\"Deaths\"))  grid.arrange(SEIRplot_total,incplot_total,nrow = 2)"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_rural_urban.html","id":"the-basic-reproduction-number-r0","dir":"Articles","previous_headings":"Implementation and use","what":"The basic reproduction number: R0","title":"Urban and rural metapopulations model","text":"can compute basic reproduction number using next generation matrix method explained van den Driessche (2017). basic reproduction model can displayed simply calling","code":"print(R0(model)) #> [1] 15.84567"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_rural_urban.html","id":"the-effect-of-varying-c","dir":"Articles","previous_headings":"","what":"The effect of varying \\(C\\)","title":"Urban and rural metapopulations model","text":"connectedness parameter \\(C\\) indicates connected two communities , .e. much individuals expected interact . extreme ends communities completely connected acting one big community \\(C=1\\), completely disconnected acting separate communities \\(C=0\\). explore happens intermediate values simulating model range values \\(C\\) plotting total infectious population communities simulation.  plot shows approximately \\(C=0.1\\), value \\(C\\) significant impact total number infectious individuals across communities. Varying value \\(C\\) 0.1 one, however, barely makes difference. communities subject parameter values average number contacts individuals communities don’t differ lot countries, result surprising. certain level interaction, infectious people one community quickly interact individuals community, spreading infection. point, communities develop epidemic parameter values mixing helps synchronizing waves epidemic communities. low levels interaction initial difference number infectious individuals lasting effect epidemic dynamics.","code":"for (i in c(0,0.001,0.005,0.01,0.05,0.1,0.5,1)) {     C = i # connectedness parameter     transmission_parameters(model) <- list(b, k, g, m, C)     out_C <- run(model, time)     temp_I <- data.frame(C = C, t = time,compartment = \"U\",value = out_C$value[out_C$compartment == \"I_U\"] + out_C$value[out_C$compartment == \"I_Y\"])     #temp_IY <- data.frame(Cvalue = C, t = time,compartment = \"Y\",value = out_C$value[out_C$compartment == \"I_Y\"])     if (i == 0){       result <- temp_I     } else {       result <- rbind(result,temp_I)     }   }  ggplot(result, aes(x = t, y = value)) +   geom_line(aes(color = as.factor(C)), size = 1) +   labs(x = \"time (days)\", y = \"fraction of the population\") +   scale_color_viridis(discrete = TRUE)+    labs(color = \"C\") +    theme(text = element_text(size = 20))"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIRD_rural_urban.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Urban and rural metapopulations model","text":"Prem, Kiesha, Kevin van Zandvoort, Petra Klepac, Rosalind M Eggo, Nicholas G Davies, Alex R Cook, Mark Jit. 2020. “Projecting Contact Matrices 177 Geographical Regions: Update Comparison Empirical Data Covid-19 Era.” medRxiv. https://doi.org/10.1101/2020.07.22.20159772. “Rural Population (% Total Population).” 2018. Data. World Bank. https://data.worldbank.org/indicator/SP.RUR.TOTL.ZS. Tun, Sai Thein , Daniel M. Parker, Ricardo Aguas, Lisa J. White. 2021. “Assembly Effect: Connectedness Populations Double-Edged Sword Public Health Interventions.” Malaria Journal 20 (1): 189. https://doi.org/10.1186/s12936-021-03726-x. van den Driessche, Pauline. 2017. “Reproduction Numbers Infectious Disease Models.” Infectious Disease Modelling 2 (3): 288–303. https://doi.org/10.1016/j.idm.2017.06.002. “World Population Prospects 2019, Online Edition. Rev. 1.” 2019. United Nations, Department Economic; Social Affairs, Population Division (2019). https://population.un.org/wpp/Download/Standard/Population/.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIaImIsRD.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Asymptomatic, mild and severe symptom compartment model","text":"document introduces SEIaImIsRD model. model extension SEIRD model instead one population infected individuals three, level symptoms. model, populations asymptomatic, mildly symptomatic severely ill infectious individuals included. motivation including separate populations infectious individuals two-fold. First, asymptomatic individuals much less likely detected counted towards overall case numbers symptoms. Explicitly modelling group may lead realistic depiction epidemic. Second, individuals severe symptoms require treatment hospitals risk death, whereas asymptomatic mildly symptomatic individuals likely recover without needing clinical care. Splitting population infectiousness individuals three groups thus allows us estimate burden COVID-19 related clinical care healthcare system. Estimating burden crucial throughout COVID-19 pandemic, estimates modelling teams , part, motivated governments impose variety interventions. start introducing equations model explain calculate basic reproduction number, \\(R_0\\). show simulate SEIaImIsRD model using comomodels package.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIaImIsRD.html","id":"the-seiaimisrd-model","dir":"Articles","previous_headings":"","what":"The SEIaImIsRD Model","title":"Asymptomatic, mild and severe symptom compartment model","text":"build SEIaImIsRD model three compartments infectious individuals, start basic SEIRD model. reminder, model consists group susceptible individuals, \\(S\\), infected can come contact infectious individual; group exposed individuals, \\(E\\), infected infectious yet; group infectious individuals, \\(\\), can infect susceptibles; group recovered individuals, \\(R\\), immune reinfection; group individuals, \\(D\\), died due COVID-19 infection. account varying severity symptoms, take group infectious individuals, \\(\\), split three groups: asymptomatic individuals, \\(I_a\\); mildly symptomatic individuals, \\(I_m\\); severely ill individuals, \\(I_s\\). Thus, model consists seven ordinary differential equations (ODEs) track groups individuals. severity symptoms can affect probability infectious individual dies infects someone else, example, asymptomatic individual cough thus less likely transmit infection. SEIaImIsRD model thus consists following ODEs: \\[\\frac{\\text{d}S}{\\text{d}t} = -S (\\beta_aI_a + \\beta_mI_m + \\beta_aI_s),\\] \\[\\frac{\\text{d}E}{\\text{d}t} = S (\\beta_aI_a + \\beta_mI_m + \\beta_sI_s) - \\kappa E,\\] \\[\\frac{dI_{}}{dt} = \\eta_a \\kappa E - (\\gamma_a + \\mu_a)I_a,\\] \\[\\frac{dI_{m}}{dt} = \\eta_m \\kappa E - (\\gamma_m + \\mu_m)I_m,\\] \\[\\frac{dI_{s}}{dt} = \\eta_s\\kappa E - (\\gamma_s + \\mu_s)I_s,\\] \\[\\frac{\\text{d}R}{\\text{d}t} =  \\gamma_a  I_a + \\gamma_m I_m + \\gamma_sI_s,\\] \\[\\frac{\\text{d}D}{\\text{d}t} =  \\mu_a  I_a + \\mu_m I_m + \\mu_sI_s,\\] , \\(\\\\{, m, s\\}\\), \\(\\beta_i\\) rates infected individual symptom group \\(\\) infects susceptible individuals; \\(\\eta_i\\) fractions exposed individuals moving different infected groups \\(\\) \\(\\sum_i\\eta_i=1\\); \\(\\gamma_i\\) rates individuals symptom group \\(\\) recover disease; \\(\\mu_i\\), rates individuals symptom group \\(\\) die disease. rate becoming infectious infected, \\(\\kappa\\), groups infectious individuals. parameters non-negative. model structure can visualised compartmental diagram. addition seven main ODEs , model also keeps track total number cases (\\(C\\)) time. , define case anyone infected COVID-19, thus rate appearance new cases given : \\[\\frac{\\text{d}C}{\\text{d}t} = S (\\beta_aI_a + \\beta_mI_m + \\beta_aI_s).\\] system closed specifying initial conditions \\(S(0) = S_\\text{init},\\ E(0) = E_\\text{init},\\ I_a(0) = I_{,\\text{init}},\\ I_m(0) = I_{m,\\text{init}},\\ I_s(0) = I_{s,\\text{init}},\\ R(0) = R_\\text{init},\\ D(0) = D_\\text{init}\\). assume \\(C_\\text{init} = 0\\) comomodels package count infections arising throughout given epidemic. ODEs initial conditions specified, system can solved numerically obtain time traces \\(S(t)\\), \\(E(t)\\),\\(I_a(t)\\), \\(I_m(t)\\),\\(I_s(t)\\), \\(R(t)\\), \\(D(t)\\), \\(C(t)\\). comomodels package, populations normalized total population equal 1, requiring \\(S(t)+E(t)+I_a(t)+I_m(t)+I_s(t)+R(t)+D(t) = 1\\) \\(t\\).","code":"# create model object model <- SEIaImIsRD()  # visualise ode_structure_diagram(model)"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIaImIsRD.html","id":"basic-reproduction-number","dir":"Articles","previous_headings":"","what":"Basic reproduction number","title":"Asymptomatic, mild and severe symptom compartment model","text":"numerically solve SEIaImIsRD model, derive expression basic reproduction number, \\(R_0\\). basic reproductive number widely used metric epidemiological modelling indicates whether disease outbreak occur. \\(R_0\\) represents average number individuals infectious person infect population everyone susceptible. \\(R_0>1\\), individual typically infects one person, epidemic likely grow. \\(R_0<1\\), epidemic likely subside. section, compute value \\(R_0\\) SEIaImIsRD model. mathematical detail method used, refer interested reader van den Driessche (2017) Diekmann, Heesterbeek, Roberts (2010). calculate basic reproduction number (\\(R_0\\)) using next generation matrix approach. First, select populations model contain infected individuals, .e. exposed, \\(E\\), infectious, \\(I_a\\), \\(I_m\\) \\(I_s\\). define \\(x = [E, I_a, I_m, I_s]\\) rewrite ODEs variables \\(x\\) form: \\[\\frac{\\text{d}x_i}{\\text{d}t} = \\mathscr{F_i}(x) - \\mathscr{V_i}(x),\\] \\(\\mathscr{F_i}(x)\\) rate appearance new infections compartment \\(\\), \\(\\mathscr{V_i}(x)\\) represents rate transitions compartment. example, take \\(E\\), \\(\\mathscr{F}_E(x) = S (\\beta_aI_a + \\beta_mI_m + \\beta_sI_s)\\) \\(\\mathscr{V}_E(x) = \\kappa E\\). Considering \\(I_i\\), \\(\\mathscr{F}_i(x) = 0\\) new infections epidemiologically ‘’born’’ directly infectious compartments, \\(\\mathscr{V}_i(x) = (\\gamma_i + \\mu_i)I_i - \\eta_i \\kappa E\\). allows us compute matrices \\(F\\) \\(V\\) variables \\(x\\): \\[F=\\frac{\\partial \\mathscr{F_i}}{\\partial x_j}\\Bigr|_{x^*}\\hspace{5mm}\\text{}\\hspace{5mm}V=\\frac{\\partial \\mathscr{V_i}}{\\partial x_j}\\Bigr|_{x^*},\\] \\(x^*\\) represents disease-free equilibrium model, \\(S=1\\). SEIaImIsRD model, matrices \\(F\\) \\(V\\) : \\[ F = \\left(\\begin{array}{cc}  0 & \\beta_{} & \\beta_{m} & \\beta_{s}\\\\ 0 & 0 & 0 & 0\\\\ 0 & 0 & 0 & 0\\\\ 0 & 0 & 0 & 0 \\end{array}\\right),  \\hspace{5mm}V = \\left(\\begin{array}{cc}  \\kappa & 0 & 0 & 0\\\\ -\\kappa \\eta_a & \\gamma_a + \\mu_a & 0 & 0\\\\ -\\kappa \\eta_m & 0 & \\gamma_m + \\mu_m & 0\\\\ -\\kappa \\eta_s & 0 & 0 & \\gamma_s + \\mu_s \\end{array}\\right). \\] matrix \\(K=FV^{-1}\\) called next generation matrix, \\((,j)\\)th entry equal expected number secondary infections compartment \\(\\) produced infected individual introduced compartment \\(j\\). SEIaImIsRD model, given : \\[ K = \\left(\\begin{array}{cc}  \\sum_i\\eta_i\\phi_i & \\phi_a & \\phi_m & \\phi_s\\\\ 0 & 0 & 0 & 0\\\\ 0 & 0 & 0 & 0\\\\ 0 & 0 & 0 & 0 \\end{array}\\right),\\hspace{5mm} \\text{: } \\phi_i = \\beta_{} / (\\gamma_i+\\mu_i). \\] next generation matrix intuitive interpretation. Considering element \\(K_{1,2}=\\beta_{} / (\\gamma_a+\\mu_a)\\), number new infections single asymptomatic individual average produces. quantity equal number contacts per unit time, \\(\\beta\\), times average duration infectiousness, \\(1/ (\\gamma_a+\\mu_a)\\). holds true infectious compartments. number new infected individuals produced average single infected individual given \\(K_{1,1}\\) element: given weighted average numbers produced infectious compartment weights proportions infected individuals flowing various infectious compartments. rows apart first zero new infections produced fall directly infectious compartments. basic reproduction number SEIaImIsRD model defined \\[R_0 = \\rho(K^{-1}),\\] \\(\\rho\\) denotes spectral radius matrix (.e. largest absolute value eigenvalues). Due sparsity matrix, given \\(K_{11}\\) element: \\[ R_0 = \\sum_i\\eta_i \\phi_i. \\]","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIaImIsRD.html","id":"running-simulations","dir":"Articles","previous_headings":"","what":"Running simulations","title":"Asymptomatic, mild and severe symptom compartment model","text":"section, walk example use SEIaImIsRD class, implementation SEIaImIsRD model comomodels package. , parameterise model using transmission parameters meant represent epidemiology COVID-19. set initial conditions. populations normalized, populations must sum one, error thrown. set parameter values. models, set parameters based COVID-19 pandemic. detailed derivation parameter values, see SEIRDAge model vignette. assume individuals severe symptoms die disease, .e. \\(\\mu_a = \\mu_m = 0\\). also assume asymptomatic mildly symptomatic individuals recover approximately rate, severely symptomatic individuals recover half rate. Approximately 35% infected individuals never develop symptoms, thus belong asymptomatic group (Sah et al. 2021). delta variant virus, estimated hospitalisation rate around 2% (Twohig et al. 2021). hospitalisation fatality rate assumed 27% (Gray et al. 2021). , simplicity, assume infectious individuals equally infectious may unrealistic severe cases likely isolated ongoing contact (either due self isolation entering clinical care). set \\(\\beta\\) \\(R_0=2.4\\) – baseline reproduction number report 9 (Ferguson et al. 2020). , rearrange expression assuming \\(\\beta_a=\\beta_m=\\beta_s\\): \\[ \\beta = \\frac{R_0}{\\sum_i \\eta_i / (\\mu_i+\\gamma_i)}. \\] Lastly, set time span time step simulation outputs. choose output results daily resolution. Note numerical solvers used integrate ODEs (default, LSODA method) typically compute variables many time points numerical accuracy. results returned specified time points. can now simulate model. plot evolution \\(S\\), \\(E\\), \\(I_a\\), \\(I_m\\), \\(I_s\\), \\(R\\), \\(D\\) time.  focus infectious groups see, expected, bulk infections asymptomatic mild groups. now assume population size UK 67.5m (ONS, n.d.) plot projected number daily deaths using model. maximum number daily deaths predicted model approximately 10023, overall, number deaths unmitigated epidemic predicted 320311– value comparable figure 510,000 deaths predicted report 9 (Ferguson et al. 2020), produced using complex agent-based spatial model COVID-19 transmission dynamics.","code":"S <- 0.999 E <- 0.001 I_asymptomatic <- 0 I_mild <- 0 I_severe <- 0 R <- 0 D <- 0  initial_conditions(model) <- list(S = S, E = E, I_asymptomatic = I_asymptomatic,                                   I_mild = I_mild, I_severe = I_severe, R = R, D = D) p_severe <- 0.02 p_asymp <- 0.35 p_mild <- 1 - p_severe - p_asymp eta_symptom <- list(mild = p_mild, severe=p_severe) zeta <- 1 / 2 hfr <- 0.27 severe_vs_mild_rate <- 0.5 gamma <- list(   asymptomatic = zeta,   mild = zeta,   severe = zeta * severe_vs_mild_rate * (1 - hfr))  mu <- list(asymptomatic = 0,            mild = 0,            severe = zeta * severe_vs_mild_rate * hfr)  # incubation period of 5.5 days assumed kappa <- 1 / 5.5  # determine beta to hit target R0 R0_target <- 2.4 p_symptoms <- c(p_asymp, p_mild, p_severe) gamma_plus_mu <- unlist(gamma) + unlist(mu) beta_overall <- R0_target / (sum(p_symptoms / gamma_plus_mu)) beta <- list(asymptomatic = beta_overall,              mild = beta_overall,              severe = beta_overall)  # set parameters of model transmission_parameters(model) <- list(   beta = beta, kappa = kappa, p_symptom = eta_symptom,   gamma = gamma, mu = mu)  # check that target R0 hit print(paste0(\"R0 = \", round(R0(model), 1))) #> [1] \"R0 = 2.4\" t <- seq(0, 250, by = 1) par(mfrow=c(1,2)) # run the model output <- run(model, t)  # plot states over time states <- output$states ggplot(states, aes_string(x = \"time\", y = \"value\")) +   geom_line(aes_string(colour = \"compartment\")) +       scale_color_brewer(palette = \"Dark2\") +      theme(legend.position = \"bottom\", legend.title = element_blank()) +     labs(x = \"time (days)\", y = \"fraction of the population\") states %>%    filter(str_detect(compartment, \"I_\")) %>%   ggplot(aes_string(x = \"time\", y = \"value\")) +   geom_line(aes_string(colour = \"compartment\")) +       scale_color_brewer(palette = \"Dark2\") +      theme(legend.position = \"bottom\", legend.title = element_blank()) +     labs(x = \"time (days)\", y = \"fraction of the population\") pop_size <- 67.5e6 output_deaths <- output$changes %>%    filter(compartment==\"Deaths\") %>%    mutate(value=pop_size * value)  # plot number of deaths over time ggplot(output_deaths, aes_string(x = \"time\", y = \"value\")) +    geom_bar( stat=\"identity\", position=position_dodge()) +       scale_fill_brewer(palette = \"Dark2\") +      labs(x = \"time (days)\", y = \"deaths per day\")"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIaImIsRD.html","id":"sensitivity-analysis","dir":"Articles","previous_headings":"","what":"Sensitivity analysis","title":"Asymptomatic, mild and severe symptom compartment model","text":"now calculate sensitivity overall number deaths two key parameters model via local sensitivity analysis: target \\(R_0\\) value; \\(\\eta_s\\), probability severe symptoms. parameters fixed simulations . , create convenience function. First, explore impact \\(R_0\\) (\\(\\beta\\)) case counting overall number deaths. plot \\(R_0\\) versus number deaths obtain sigmoidal curve, shows greatest sensitivity around \\(1\\leq R_0 \\leq 1.5\\). Nonetheless, assume uncertainty \\(R_0=2.4\\pm0.5\\), obtain range 279812 340188 deaths – substantial variation highlighting importance knowing quantity. next consider sensitivity total deaths probability infection results severe symptoms. Unsurprisingly, number deaths strongly depends parameter, relationship approximately linear. Supposing uncertainty given \\(\\eta_s=0.02\\pm 0.01\\), obtain range 160155 480466 deaths. variation shows critical importance knowing fraction cases likely require hospitalisation. Initial analyses hint Omicron variant SARS-CoV-2 may lower risk hospitalisation Delta variant (Ferguson et al. 2021). issue whether lower rate severe disease (confirmed multiple studies) overwhelmed explosive case counts reported variant around world.","code":"sensitivity_run <- function(R0_target=2.4,                             eta_s=0.02) {      # instantiate model   model <- SEIaImIsRD()      # initial conditions   S <- 0.999   E <- 0.001   I_asymptomatic <- 0   I_mild <- 0   I_severe <- 0   R <- 0   D <- 0      initial_conditions(model) <- list(     S = S,     E = E,     I_asymptomatic = I_asymptomatic,     I_mild = I_mild,     I_severe = I_severe,     R = R,     D = D)      # transmission parameters   p_severe <- eta_s   p_asymp <- 0.35   p_mild <- 1 - p_severe - p_asymp   eta_symptom <- list(mild = p_mild, severe=p_severe)   zeta <- 1 / 2   severe_vs_mild_rate <- 0.5   hfr <- 0.27   gamma <- list(     asymptomatic = zeta,     mild = zeta,     severe = zeta * severe_vs_mild_rate * (1 - hfr))      mu <- list(asymptomatic = 0,              mild = 0,              severe = zeta * severe_vs_mild_rate * hfr)      # incubation period of 5.5 days assumed   kappa <- 1 / 5.5      # determine beta to hit target R0   p_symptoms <- c(p_asymp, p_mild, p_severe)   gamma_plus_mu <- unlist(gamma) + unlist(mu)   beta_overall <- R0_target / (sum(p_symptoms / gamma_plus_mu))   beta <- list(asymptomatic = beta_overall,                mild = beta_overall,                severe = beta_overall)      # set parameters of model   transmission_parameters(model) <- list(     beta = beta, kappa = kappa, p_symptom = eta_symptom,     gamma = gamma, mu = mu)    # run model   t <- seq(0, 250, by = 1)      output <- run(model, t)   pop_size <- 67.5e6   output_deaths <- output$changes %>%     filter(compartment==\"Deaths\") %>%      mutate(value=pop_size * value)   sum(output_deaths$value) } R0_values <- seq(0.5, 4, 0.05) deaths <- vector(length = length(R0_values)) for(i in seq_along(deaths)) {   deaths[i] <- sensitivity_run(R0_target = R0_values[i]) }  # plot tibble(R0=R0_values, Deaths=deaths) %>%    ggplot(aes(x=R0, y=Deaths)) +   geom_line() +   geom_vline(xintercept = 2.4, colour=\"orange\",              linetype=2) vals <- seq(0.005, 0.06, 0.001) deaths <- vector(length = length(vals)) for(i in seq_along(deaths)) {   deaths[i] <- sensitivity_run(eta_s=vals[i]) }  # plot tibble(prob_severe=vals, Deaths=deaths) %>%    ggplot(aes(x=prob_severe, y=Deaths)) +   geom_line() +   geom_vline(xintercept = 0.02, colour=\"orange\",              linetype=2) +   xlab(\"Probability of severe symptoms upon infection\")"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEIaImIsRD.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Asymptomatic, mild and severe symptom compartment model","text":"Diekmann, Odo, JAP Heesterbeek, Michael G Roberts. 2010. “Construction Next-Generation Matrices Compartmental Epidemic Models.” Journal Royal Society Interface 7 (47): 873–85. Ferguson, Neil, Azra Ghani, Wes Hinsley, Erik Volz, Imperial College COVID-19 response team. 2021. “Report 50: Hospitalisation Risk Omicron Cases England.” {https://www.imperial.ac.uk/mrc-global-infectious-disease-analysis/covid-19/report-50-severity-omicron/}. Ferguson, Neil, Daniel Laydon, Gemma Nedjati Gilani, Natsuko Imai, Kylie Ainslie, Marc Baguelin, Sangeeta Bhatia, et al. 2020. “Report 9: Impact Non-Pharmaceutical Interventions (Npis) Reduce Covid19 Mortality Healthcare Demand.” Gray, William K, Annakan V Navaratnam, Jamie Day, Pratusha Babu, Shona Mackinnon, Ini Adelaja, Sam Bartlett-Pestell, et al. 2021. “Variability Covid-19 -Hospital Mortality Rates National Health Service Trusts Regions England: National Observational Study Getting Right First Time Programme.” EClinicalMedicine 35: 100859. ONS. n.d. “Overview UK population: January 2021.” \\url{https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates/articles/overviewoftheukpopulation/january2021}. Sah, Pratha, Meagan C. Fitzpatrick, Charlotte F. Zimmer, Elaheh Abdollahi, Lyndon Juden-Kelly, Seyed M. Moghadas, Burton H. Singer, Alison P. Galvani. 2021. “Asymptomatic Sars-Cov-2 Infection: Systematic Review Meta-Analysis.” Proceedings National Academy Sciences 118 (34). https://doi.org/10.1073/pnas.2109229118. Twohig, Katherine , Tommy Nyberg, Asad Zaidi, Simon Thelwall, Mary Sinnathamby, Shirin Aliabadi, Shaun R Seaman, et al. 2021. “Hospital Admission Emergency Care Attendance Risk Sars-Cov-2 Delta (B. 1.617. 2) Compared Alpha (B. 1.1. 7) Variants Concern: Cohort Study.” Lancet Infectious Diseases. van den Driessche, Pauline. 2017. “Reproduction Numbers Infectious Disease Models.” Infectious Disease Modelling 2 (3): 288–303. https://doi.org/10.1016/j.idm.2017.06.002.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEmIRD.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Multiple exposed compartments model","text":"vignette introduces SEmIRD model. model extension SEIRD model, described following ODEs: \\[\\frac{\\text{d}S}{\\text{d}t} = -\\beta S ,\\] \\[\\frac{\\text{d}E}{\\text{d}t} = \\beta S -\\kappa E,\\] \\[\\frac{\\text{d}}{\\text{d}t} =\\kappa E - (\\gamma + \\mu) ,\\] \\[\\frac{\\text{d}R}{\\text{d}t} = \\gamma ,\\] \\[\\frac{\\text{d}D}{\\text{d}t} = \\mu .\\] vignette, going focus time period individuals spend, average, exposed compartment. time period known latent period. can gain insight flow \\(E\\) compartment works imagining exhaust infected individuals given time: \\(t=0\\). new equation becomes: \\[\\frac{\\text{d}E}{\\text{d}t} = -\\kappa E,\\] Supposing given number infected individuals \\(t=0\\) represented \\(E=E_0\\), can solve equation yield expression number exposed time: \\[E(t) = E_0 \\exp (- \\kappa t)\\] representing exponential decay, can plot assuming \\(E_0=1\\) \\(\\kappa=0.5\\):  can also show effect changing \\(\\kappa\\): unsurprisingly, \\(\\kappa\\) increases, rate individuals become infectious increases faster decay.","code":"library(tidyverse) library(comomodels)  # function to return exponential decay E <- function(E_0, kappa, t) {E_0 * exp(-kappa * t)}  # make values to plot E_0 <- 1 kappa <- 0.5 t <- seq(0, 10, 0.01) E_vals <- E(E_0, kappa, t)  tibble(t=t, E=E_vals) %>%    ggplot(aes(x=t, y=E)) +   geom_line() +   xlab(\"time (days)\") kappa_1 <- 0.5 kappa_2 <- 1 kappa_3 <- 2 E_1 <- E(E_0, kappa=kappa_1, t=t) E_2 <- E(E_0, kappa=kappa_2, t=t) E_3 <- E(E_0, kappa=kappa_3, t=t) tibble(t, E=E_1, kappa=kappa_1) %>%    bind_rows(tibble(t, E=E_2, kappa=kappa_2)) %>%    bind_rows(tibble(t, E=E_3, kappa=kappa_3)) %>%    ggplot(aes(x=t, y=E, colour=as.factor(kappa))) +   geom_line() +   scale_color_brewer(\"kappa\", palette = \"Dark2\") +   xlab(\"time (days)\")"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEmIRD.html","id":"stochastic-models-and-their-means","dir":"Articles","previous_headings":"","what":"Stochastic models and their means","title":"Multiple exposed compartments model","text":"alternative way view exponential decay curves probability distributions governing time taken exposed individual become infectious: .e. duration latent period. ODE, treat population continuum, thus concept single discrete individual. , however, possible formulate discrete stochastic versions model consider individual dynamics using reaction-equation type model. Considering ODE: \\[\\frac{\\text{d}E}{\\text{d}t} = -\\kappa E,\\] initial condition \\(E(0) = E_0\\). can create stochastic model analogue , probability particular exposed individual becomes infectious time period \\(\\delta t\\) given \\(\\kappa \\delta t\\). now follow Erban, Chapman, Maini (2007) illustrate mean stochastic process solution ODE. let \\(p_E(t)\\) denote probability \\(E\\) exposed individuals time \\(t\\). suppose \\(\\delta t\\) small probability two exposed individuals become infectious period \\([t,t+\\delta t)\\) negligible. two ways \\(E\\) exposed individuals time \\(t+\\delta t\\): either \\(E\\) individuals time \\(t\\) individual became infectious period probability \\((1-\\kappa E \\delta t)\\); \\(E+1\\) individuals time \\(t\\) one individual became infectious probability \\(\\kappa (E+1) \\delta t\\). Therefore: \\[\\begin{equation} p_E(t+\\delta t) = p_E(t) (1-\\kappa E \\delta t) + p_{E+1}(t) \\kappa (E+1) \\delta t, \\end{equation}\\] can rearranged : \\[\\begin{equation} \\frac{p_E(t+\\delta t) - p_E(t)}{\\delta t} = \\kappa(E+1)p_{E+1}(t) - \\kappa E p_E(t), \\end{equation}\\] taking limit \\(\\delta t\\rightarrow 0\\), obtain -called “chemical master equation” system: \\[\\begin{equation} \\frac{\\text{d}p_E}{\\text{d}t} = \\kappa(E+1)p_{E+1} - \\kappa E p_E. \\end{equation}\\] equation holds \\(E=0,1,2,...,E_0-1\\). Considering \\(E=E_0\\), one way occur, exposed individual became infectious period , obtain equation: \\[\\begin{equation} \\frac{\\text{d}p_{E_0}}{\\text{d}t} = -\\kappa E_0 p_{E_0}, \\end{equation}\\] solution \\(p_{E_0}(t) = \\exp (-\\kappa E_0 t)\\). (, considering system single exposed individual, probability remain exposed given exponential distribution rate parameter \\(\\kappa\\) meaning average duration latent period \\(1/\\kappa\\).) equation \\(E_0\\) can used solve equation \\(p_{E_0-1}(t)\\) iteratively (see Erban, Chapman, Maini (2007) section 2.1), leads solution integer \\(0\\leq E \\leq E_0\\): \\[\\begin{equation} p_E(t) = \\exp(-\\kappa E t) \\binom{E_0}{E} (1 - \\exp(-\\kappa t))^{E_0-E}. \\end{equation}\\] mean number exposed individuals time \\(t\\) given : \\[\\begin{align} \\bar{E}(t) &= \\sum_{E=0}^{E_0} E p_E(t)\\\\ &= \\sum_{E=0}^{E_0} E \\exp(-\\kappa E t) \\binom{E_0}{E} (1 - \\exp(-\\kappa t))^{E_0-E}\\\\ &= E_0 \\exp(-\\kappa t) \\sum_{E=1}^{E_0} \\exp(-\\kappa (E-1) t) \\binom{E_0-1}{E-1} (1 - \\exp(-\\kappa t))^{(E_0-1)-(E-1)}\\\\ &= E_0 \\exp(-\\kappa t), \\end{align}\\] third line obtained using \\(\\binom{E_0}{E} = \\frac{E_0}{E}\\binom{E_0-1}{E-1}\\); last line obtained since sum extends possible values \\(E\\) distribution starting \\(E_0-1\\), must equal 1. notable aspect \\(\\bar{E}(t)\\) matches solution deterministic system. shows , system, equivalence deterministic model stochastic model, former mean-field solution latter. nice allows us ascribe “individual meaning” parameters ODE: , \\(1/\\kappa\\) mean duration spent infected state analogous stochastic model.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEmIRD.html","id":"the-latent-period-for-covid-19","dir":"Articles","previous_headings":"","what":"The latent period for COVID-19","title":"Multiple exposed compartments model","text":"distribution governing latent period actually look like? Using repeatedly sampled PCR test data close contacts confirmed cases mainland China, recent study estimated latent period COVID-19 5.5 days log-normal probability distribution found represent waiting period (Xin et al. 2021). compare waiting period log-normal distribution fit Xin et al. (2021) exponential distribution latent period.  Although share common mean waiting period, considerable differences curves. alternative way view cumulative distribution functions:  cumulative distribution functions show substantial differences. example, exponential curve predicts approximately 37% individuals become infectious 2.5 days versus 6% log-normal one.","code":"# values derived from Xi et al., Table S2  mu <- 1.61 sigma <- 0.44  # equivalent decay for exponential model kappa <- 1 / 5.5  # generate densities across rate of time t <- seq(0, 20, 0.01) lnorm_vals <- dlnorm(t, mu, sigma) exp_vals <- dexp(t, kappa)  tibble(t, value=lnorm_vals, model=\"log-normal\") %>%    bind_rows(tibble(t, value=exp_vals, model=\"exponential\")) %>%    ggplot(aes(x=t, y=value, colour=model)) +   geom_line() +   scale_color_brewer(\"Model\", palette = \"Dark2\") +   ylab(\"density\") +   xlab(\"time (days)\") lnorm_vals <- plnorm(t, mu, sigma) exp_vals <- pexp(t, kappa)  tibble(t, value=lnorm_vals, model=\"log-normal\") %>%    bind_rows(tibble(t, value=exp_vals, model=\"exponential\")) %>%    ggplot(aes(x=t, y=value, colour=model)) +   geom_line() +   scale_color_brewer(\"Model\", palette = \"Dark2\") +   ylab(\"cumulative density\") +   xlab(\"time (days)\")"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEmIRD.html","id":"the-semird-model","dir":"Articles","previous_headings":"","what":"The SEmIRD model","title":"Multiple exposed compartments model","text":"allow non-exponential waiting period, number modelling approaches possible include range stochastic models, instance renewal-type models individual-based models. , however, possible allow Erlang-distributed waiting time1 stochastic analogue ODE model splitting stage several substages. known “linear chain trick” (see Hurtado Kirosingh (2019)). SEmIRD model, split exposed compartment \\(n\\) substages: \\(E_1, E_2, ..., E_n\\). ODEs describing dynamics hence: \\[\\frac{\\text{d}S}{\\text{d}t} = -\\beta S ,\\] \\[\\frac{\\text{d}E_i}{\\text{d}t} = \\begin{cases}                                     \\beta S -\\kappa E_i,      & \\text{} = 1\\\\                                     \\kappa E_{-1} -\\kappa E_i, & \\text{otherwise}                                   \\end{cases}\\] \\[\\frac{\\text{d}}{\\text{d}t} =\\kappa E_n - (\\gamma + \\mu) ,\\] \\[\\frac{\\text{d}R}{\\text{d}t} = \\gamma ,\\] \\[\\frac{\\text{d}D}{\\text{d}t} = \\mu .\\] Thus newly exposed individual (entering \\(E_1\\)) becomes infectious (entering \\(\\)) passed host intermediate states: \\(E_1\\rightarrow E_2 ...\\rightarrow E_{n-1} \\rightarrow E_n\\). compartmental diagram , visualise structure system \\(n=3\\) (fixed example value chosen visualisation). stochastic analogue ODE system, average time taken go \\(E_1\\rightarrow \\) given \\(\\text{Erlang}(n,\\kappa)\\) distribution, mean \\(n/\\kappa\\). Thus match mean exponential distribution need multiply \\(\\kappa\\) n.","code":"# create model object model <- SEmIRD()  # visualise structure ode_structure_diagram(model)"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEmIRD.html","id":"comparing-the-semird-and-seird-models","dir":"Articles","previous_headings":"","what":"Comparing the SEmIRD and SEIRD models","title":"Multiple exposed compartments model","text":"now compare model \\(n=5\\) behaves versus SEIRD. cases, assume , \\(t=0\\), individuals first exposed compartment (note, SEIRD model, first exposed compartment exposed compartment). make differences stark, assume average latent period lasts 20 days. parameters, use set used SEIRD model vignette. first simulate SEIRD model plot exposed infectious compartments. plot, fraction infectious individuals grows fast rate right start peaks somewhere near \\(t=5\\) days.  now repeat exercise SEmIRD model. ensure mean duration latent period, set \\(\\kappa_s=5\\kappa\\), \\(\\kappa_s\\) transit rate \\(E_i\\) compartments SEmIRD model. initialise values \\(E_i\\) compartments list values, size list taken number exposed compartments (\\(n\\)), whose order corresponds \\(E_1\\), \\(E_2\\), …, \\(E_n\\). model \\(n=5\\) exposed compartments, plot exposed infectious compartments shows decline initial exposed state (\\(E_1\\)) rise fall intermediate states (\\(E_2\\) \\(E_5\\)). procession intermediate states individuals must pass become infectious means infectious state fraction rises much later SEIRD model: , peaks much nearer \\(t=20\\) days. Effectively, allowing multiple exposed compartments induces sort delay individuals becoming exposed transitioning infected.","code":"# parameterise model kappa <- 1 / 20 IFR <- 0.0066 zeta <- 1 / 2 gamma <- zeta * (1 - IFR) mu <- zeta * IFR R0_target <- 2.4 beta <- (mu + gamma) * R0_target  model <- SEIRD() params <- list(beta=beta, kappa=kappa, gamma=gamma, mu=mu) transmission_parameters(model) <- params initial_conditions(model) <- list(S0=0, E0=1, I0=0, R0=0)  # run model times <- seq(0, 50, 0.1) output <- run(model, times) states <- output$states  # plot results states %>%    filter(str_detect(compartment, \"E|I\")) %>%    ggplot(aes(x=time, y=value)) +   geom_line(aes(colour=compartment)) +   xlab(\"time (days)\") +   ylab(\"fraction of the population\") model <- SEmIRD()  # change parameters kappa_s <- kappa * 5 params <- list(beta=beta, kappa=kappa_s, gamma=gamma, mu=mu) transmission_parameters(model) <- params initial_conditions(model) <- list(S0=0, I0=0, R0=0, E0 = as.list(c(1, rep(0, 4))))  # run model output <- run(model, times) states <- output$states  # plot results states %>%    filter(str_detect(compartment, \"E|I\")) %>%    ggplot(aes(x=time, y=value)) +   geom_line(aes(colour=compartment)) +   xlab(\"time (days)\") +   ylab(\"fraction of the population\")"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEmIRD.html","id":"relating-n-to-an-erlang-distribution","dir":"Articles","previous_headings":"","what":"Relating \\(n\\) to an Erlang distribution","title":"Multiple exposed compartments model","text":"described , waiting period implied breaking state number substates, equal rate parameter, \\(\\kappa_s\\), \\(\\text{Erlang}(n,\\kappa_s)\\). epidemiological model, Erlang distribution used represent latent period distribution, represents long takes, average, individual transit \\(E\\rightarrow \\). now demonstrate waiting period represented Erlang distribution simulating model, time different \\(n\\), assuming initially \\(E_1=1\\), comparing simulation corresponding Erlang probability density function. , demonstrate linear chain trick works desired (see Hurtado Kirosingh (2019)). select \\(\\kappa_s = n\\kappa\\) Erlang distribution representing latent period distribution mean \\(1/\\kappa\\). different value \\(n\\), aggregate across exposed compartments yield number individuals remaining exposed time \\(t\\): \\(E(t)=\\sum_{=1}^{n} E_i(t)\\). calculate fraction individuals transitioned exposed compartments, via \\(O(t) = 1 - E(t)\\) (note \\(O\\) contains individuals infectious previously infectious). plot \\(O(t)\\) model.  plot shows , \\(n\\) increases, tends narrower period individuals transition becoming infectious, centred around \\(t=20\\) days. relate Erlang distribution? illustrate , transform functions behave probability densities finding derivative time \\(t\\) via finite difference approximation. plot corresponding Erlang probability densities alongside ODE-derived ones. plot shows correspondence Erlang ODE waiting times.","code":"# function to run model with varying number of compartments but same mean run_varying_n <- function(n, kappa) {   model <- SEmIRD()      # change parameters   kappa_s <- kappa * n   params <- list(beta=beta, kappa=kappa_s, gamma=gamma, mu=mu)   transmission_parameters(model) <- params   E_inits <- as.list(c(1, rep(0, n-1)))   initial_conditions(model) <- list(S0=0, I0=0, R0=0, E0=E_inits)      # run model   output <- run(model, times)   states <- output$states   states %>%     filter(str_detect(compartment, \"E\")) %>%      group_by(time) %>%      summarise(value=1 - sum(value)) %>%      ungroup() %>%      mutate(n=n) }  # run simulations and store results ns <- c(1, 5, 10, 20, 100) for(i in seq_along(ns)) {   temp_df <- run_varying_n(ns[i], kappa)   if(i == 1)     big_df <- temp_df   else     big_df <- big_df %>% bind_rows(temp_df) }  # plot O(t) big_df %>%    ggplot(aes(x=time, y=value, group=as.factor(n))) +   geom_line(aes(colour=n)) +   scale_colour_viridis_c(trans=\"log\",                          breaks=c(1, 10, 100)) +   xlab(\"time (days)\") +   ylab(\"O(t)\") # use finite difference approximation to determine derivatives dt <- diff(big_df$time)[1] big_df <- big_df %>%    group_by(n) %>%    mutate(value=c(NA, diff(value) / dt))  # calculate Erlang pdfs erlang_density <- function(n, kappa) {   dgamma(times, n, kappa * n) } for(i in seq_along(ns)) {   dens <- erlang_density(ns[i], kappa)   temp_df <- tibble(time=times,                     value=dens,                     n=ns[i])   if(i == 1)     other_df <- temp_df   else     other_df <- other_df %>% bind_rows(temp_df) } other_df <- other_df %>%    mutate(type=\"Erlang\")  # plot big_df %>%    mutate(type=\"ODE\") %>%    bind_rows(other_df) %>%    ggplot(aes(x=time, y=value, group=as.factor(n))) +   geom_line(aes(colour=n)) +   scale_colour_viridis_c(trans=\"log\",                          breaks=c(1, 10, 100)) +   xlab(\"time (days)\") +   ylab(\"density or O(t)\") +   facet_wrap(~type)"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEmIRD.html","id":"comparing-covid-19-transmission-dynamics","dir":"Articles","previous_headings":"","what":"Comparing COVID-19 transmission dynamics","title":"Multiple exposed compartments model","text":"Assuming now \\(\\kappa=1/5.5\\), appropriate COVID-19, can compare latent period distribution estimated Xin et al. (2021) implied Erlang distribution SEmIRD model. , choose \\(n=5\\) exposed compartments since choice provides good visual fit empirical distribution. plot probability density functions three delay periods. , clear Erlang distribution much closer approximation log-normal distribution exponential. SEmIRD model thus appears suitable distribution SEIRD model describing COVID-19 transmission dynamics.  epidemics produced SEIRD SEmIRD models differ? now simulate model plot number daily cases deaths . plot, clear waves cases deaths produced model similar, although SEmIRD model wave shifted occurs later. makes intuitive sense since impact multiple exposed compartment substages induce delay exposure infectiousness – effectively, resulting slightly delayed rise cases deaths.  Including multiple substages likely less important variants SARS-Cov-2 shorter latent periods. likely case Delta Omicron variants shown shorter incubation periods (near 4 days Delta approximately 3 days Omicron versus 5 days SARS-CoV-2; Grant et al. (2021); Ansen et al. (2021)) – partly explaining higher rate spread. difference results single versus multiple exposed state model , however, even greater , instead SEIRD-type model, assumed structure presymptomatic compartment infectious individuals. instance, nature delay period distribution governing time spent compartment result different responses non-pharmaceutical interventions: example, intervention involving early detection isolation infected individuals.","code":"# values derived from Xi et al., Table S2  m <- 1.61 sigma <- 0.44  # equivalent decay for exponential model kappa <- 1 / 5.5  # generate densities across rate of time t <- seq(0, 20, 0.01) lnorm_vals <- dlnorm(t, m, sigma) exp_vals <- dexp(t, kappa) n_substates <- 5 erlang_vals <- dgamma(t, n_substates, kappa * n_substates) # Erlang is gamma with integer rate  tibble(t, value=lnorm_vals, model=\"log-normal\") %>%    bind_rows(tibble(t, value=exp_vals, model=\"exponential\")) %>%    bind_rows(tibble(t, value=erlang_vals, model=\"Erlang\")) %>%   ggplot(aes(x=t, y=value, colour=model)) +   geom_line() +   scale_color_brewer(\"Model\", palette = \"Dark2\") +   ylab(\"density\") +   xlab(\"time (days)\") # parameterise model kappa <- 1 / 5.5  # parameterise SEIRD model model_seird <- SEIRD() params <- list(beta=beta, kappa=kappa, gamma=gamma, mu=mu) transmission_parameters(model_seird) <- params initial_conditions(model_seird) <- list(S0=0.999, E0=0, I0=0.001, R0=0)  # parameterise SEmIRD model n <- 5 model_semird <- SEmIRD() params <- list(beta=beta, kappa=kappa * n, gamma=gamma, mu=mu) transmission_parameters(model_semird) <- params initial_conditions(model_semird) <- list(S0=0.999, I0=0.001, R0=0,                                          E0=as.list(rep(0, n)))  # run both models and get cases and deaths times <- seq(0, 150, 1) output_seird <- run(model_seird, times) output_semird <- run(model_semird, times) changes_seird <- output_seird$changes %>%   mutate(model=\"SEIRD\") changes_semird <- output_semird$changes %>%   mutate(model=\"SEmIRD\")  # compare cases and deaths changes_seird %>%    bind_rows(changes_semird) %>%    filter(time > 0) %>%    ggplot(aes(x=time, y=value)) +   geom_line(aes(colour=model)) +   xlab(\"time (days)\") +   scale_color_brewer(palette = \"Dark2\") +   ylab(\"fraction of the population\") +   facet_wrap(~compartment, scales = \"free\")"},{"path":"https://como-dtc-collaboration.github.io/como-models/articles/SEmIRD.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Multiple exposed compartments model","text":"Ansen, Lauren, Bryan Tegomoh, Kate Lange, Kimberly Showalter, Jon Figliomeni, Baha Abdalhamid, Peter C. Iwen, Joseph Fauver, Bryan Buss, Matthew Donahue. 2021. “Investigation Sars-Cov-2 B.1.1.529 (Omicron) Variant Cluster — Nebraska, November–December 2021.” {https://www.cdc.gov/mmwr/volumes/70/wr/mm705152e3.htm}. Erban, Radek, Jonathan Chapman, Philip Maini. 2007. “Practical Guide Stochastic Simulations Reaction-Diffusion Processes.” arXiv Preprint arXiv:0704.1908. Grant, Rebecca, Tiffany Charmet, Laura Schaeffer, Simon Galmiche, Yoann Madec, Cassandre Von Platen, Olivia Chény, et al. 2021. “Impact Sars-Cov-2 Delta Variant Incubation, Transmission Settings Vaccine Effectiveness: Results Nationwide Case-Control Study France.” Lancet Regional Health-Europe, 100278. Hurtado, Paul J, Adam S Kirosingh. 2019. “Generalizations \"Linear Chain Trick\": Incorporating Flexible Dwell Time Distributions Mean Field Ode Models.” Journal Mathematical Biology 79 (5): 1831–83. Xin, Hualei, Yu Li, Peng Wu, Zhili Li, Eric HY Lau, Ying Qin, Liping Wang, Benjamin J Cowling, Tim Tsang, Zhongjie Li. 2021. “Estimating Latent Period Coronavirus Disease 2019 (Covid-19).” Clinical Infectious Diseases: Official Publication Infectious Diseases Society America.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Como-DTC Development Team. Author, maintainer.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Como-DTC Development Team (2022). comomodels: Suite CoMo Models. https://github.com/Como-DTC-Collaboration/como-models, https://como-dtc-collaboration.github.io/como-models/.","code":"@Manual{,   title = {comomodels: A Suite of CoMo Models},   author = {{The Como-DTC Development Team}},   year = {2022},   note = {https://github.com/Como-DTC-Collaboration/como-models, https://como-dtc-collaboration.github.io/como-models/}, }"},{"path":"https://como-dtc-collaboration.github.io/como-models/index.html","id":"comomodels","dir":"","previous_headings":"","what":"A Suite of CoMo Models","title":"A Suite of CoMo Models","text":"goal comomodels provide pedagogical materials, chiefly series transmission dynamics models increasing complexity, understanding spread COVID-19. Susceptible-Exposed-Infectious-Recovered-Dead (SEIRD) model basis models included package. SEIRD model extended model different age groups, groups varying infectiousness, vaccination, distinct meta-populations amongst areas. schematic figure shows various models comomodels package.  currently available models include: SEIRD model. SEIaImIsRD model - SEIRD model groups varying infectiousness. , include asymptomatic, mildly symptomatic severely ill groups. SEIRDV model - SEIRD model including vaccinated compartments. SEIRD_BD model - SEIRD model including births natural deaths waning natural immunity. SEIRD_RU model - two linked SEIRD models used represent two meta-populations, label (parameterise) rural urban populations. SEIRDAge model - SEIRD model stratified age, allowing intermixing across ages. SEIRDVAge model - age-stratified SEIRD model allowing vaccination different age groups. SEIRDNPIAge model - SEIRD model accounting non-pharmaceutical interventions, self-isolation.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Suite of CoMo Models","text":"development version comomodels can installed GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"Como-DTC-Collaboration/como-models\")"},{"path":"https://como-dtc-collaboration.github.io/como-models/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"A Suite of CoMo Models","text":"series vignettes, available , provide tutorials given model.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/pull_request_template.html","id":"issue","dir":"","previous_headings":"","what":"Issue","title":"NA","text":"issue pull request address? none existing issues applicable, can write new issue.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/pull_request_template.html","id":"testing-documentation-and-checks","dir":"","previous_headings":"","what":"Testing, documentation, and checks","title":"NA","text":"pull request introduces new code, write automated tests (explained ). Check tests pass using devtools::check(). Check compliance preferred R style using lintr::lint_package(). Build documentation using devtools::document(). changed readme, run knitr::knit(\"README.Rmd\").","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/pull_request_template.html","id":"pull-request","dir":"","previous_headings":"","what":"Pull request","title":"NA","text":"Assign least one reviewer.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/InterventionParameters-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 object representing the InterventionParameters, — InterventionParameters-class","title":"An S4 object representing the InterventionParameters, — InterventionParameters-class","text":"class hosts intervention parameters used create intervention protocols SEIRD-class type model.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/InterventionParameters-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 object representing the InterventionParameters, — InterventionParameters-class","text":"start list values start points intervention intervals (double). stop list values stop points intervention intervals (double). coverage list values effect levels intervention intervals (double).","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/R0.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates basic reproduction number — R0","title":"Calculates basic reproduction number — R0","text":"Calculates basic reproduction number","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/R0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates basic reproduction number — R0","text":"","code":"R0(model, ...)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/R0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates basic reproduction number — R0","text":"model model object comomodels package","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/R0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates basic reproduction number — R0","text":"R0 value","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 object representing the SEIRD. — SEIRD-class","title":"An S4 object representing the SEIRD. — SEIRD-class","text":"class represents SEIRD model, showing populations susceptible, exposed, infectious recovered individuals evolve time.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An S4 object representing the SEIRD. — SEIRD-class","text":"","code":"# S4 method for SEIRD initial_conditions(object)  # S4 method for SEIRD transmission_parameters(object)  # S4 method for SEIRD initial_conditions(object) <- value  # S4 method for SEIRD transmission_parameters(object) <- value  # S4 method for SEIRD run(object, times, solve_method = \"lsoda\")  # S4 method for SEIRD R0(model)  # S4 method for SEIRD ode_structure_diagram(model)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An S4 object representing the SEIRD. — SEIRD-class","text":"object object class SEIRD value (list) list values beta, kappa, gamma, mu, respectively. times (double) sequence time points solution system ODEs returned. Must form seq(t_start, t_end, =t_step). Default time series seq(0, 100, = 1). solve_method (string) string chosen numerical integration method solving ode system. Default lsoda also default ode function deSolve package used function. model SEIRD model","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An S4 object representing the SEIRD. — SEIRD-class","text":"object class SEIRD initial conditions assigned. object class SEIRD transmission parameter values assigned. two dataframes: one time steps, age range, time series S, E, R population fractions, one time steps, age range, time series incidences deaths population fraction. R0 value ODE-compartmental structure diagram object class html","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"An S4 object representing the SEIRD. — SEIRD-class","text":"initial_conditions: Retrieves initial conditions SEIRD model. transmission_parameters: Retrieves transmission parameters SEIRD model. initial_conditions<-: Setter method initial conditions (S0, E0, I0 R0) SEIRD model. initial conditions must sum 1. initial conditions provided sum 1, error thrown. transmission_parameters<-: Set transmission parameters (beta, kappa, gamma mu) SEIRD model. transmission parameters provided 1-dimensional error thrown. run: Solves ODEs SEIRD specified object time points specified times integration method specified solve_method. $$\\frac{dS(t)}{dt} = - beta S(t) (t)$$ $$\\frac{dE(t)}{dt} =  beta S(t) (t) - kappa E(t)$$ $$\\frac{dI(t)}{dt} = kappa E(t) - (gamma + mu) (t)$$ $$\\frac{dR(t)}{dt} = gamma (t)$$ $$\\frac{dC(t)}{dt} = beta S(t) (t)$$ $$\\frac{dD(t)}{dt} = mu (t)$$ function relies package deSolve. R0: Calculates basic reproduction number SEIRD model R0 parameter given : $$R_0 = \\beta/(\\gamma + \\mu)$$ ode_structure_diagram: Prints compartmental diagram SEIRD model","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 object representing the SEIRD. — SEIRD-class","text":"output_names list compartments name used model incidence. initial_condition_names list names initial conditions (characters). Default list(\"S0\", \"E0\", \"I0\", R0\"). transmission_parameter_names list names transmission parameters (characters). Default list(\"beta\", \"kappa\", \"gamma\", \"mu\"). initial_conditions list values initial conditions (double). transmission_parameters list values transmission parameters (double).","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDAge-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 object representing the SEIRDAge. — SEIRDAge-class","title":"An S4 object representing the SEIRDAge. — SEIRDAge-class","text":"Defines age-structured SEIRD model solves set ordinary differential equations model chosen method numerical integration.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDAge-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An S4 object representing the SEIRDAge. — SEIRDAge-class","text":"","code":"# S4 method for SEIRDAge initial_conditions(object)  # S4 method for SEIRDAge initial_conditions(object) <- value  # S4 method for SEIRDAge transmission_parameters(object)  # S4 method for SEIRDAge transmission_parameters(object) <- value  # S4 method for SEIRDAge run(object, times, solve_method = \"lsoda\")  # S4 method for SEIRDAge R0(model, population_fractions)  # S4 method for SEIRDAge ode_structure_diagram(model)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDAge-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An S4 object representing the SEIRDAge. — SEIRDAge-class","text":"object object class SEIRDAge. value named list form list(b=, k=, g=, mu=) b rate infection (S->); k rate transitioning infected infectious compartment (E->); g rate recovery (->R). parameters b k numbers. death rate mu recovery rate g can either single number, case ages assumed rate; can vector length equal number age classes. times (vector) time sequence solve model. Must form seq(t_start,t_end,=t_step). Default time series seq(0, 100, = 1). solve_method string indicating chosen numerical integration method solving ode system. Default lsoda also default ode function deSolve package used function. model SEIRDAge model population_fractions fraction population age group","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDAge-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An S4 object representing the SEIRDAge. — SEIRDAge-class","text":"Initial conditions SEIRDAge model. Updated version age-structured SEIRD model. Transmission parameters SEIRDAge model. Updated version age-structured SEIRD model. data frame containing time vector time series S, E, , R D population fractions age group outputs incidence numbers age group. R0 value ODE-compartmental structure diagram object class html","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDAge-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"An S4 object representing the SEIRDAge. — SEIRDAge-class","text":"initial_conditions: Retrieves initial_conditions age-structured SEIRD model. initial_conditions<-: Sets initial_conditions age-structured SEIRD model. initial conditions provided sum 1 different sizes compared number age groups, error thrown. transmission_parameters: Retrieves transmission_parameters age-structured SEIRD model. transmission_parameters<-: Sets transmission_parameters age-structured SEIRD model. transmission parameters provided 1-dimensional error thrown. run: Method simulate output using model. Solves system ODEs form age-structured SEIRD model. system equations time evolution population fractions Susceptible (S), Exposed (E), Infected (), Recovered (R) Dead (D) groups given age group indexed given $$\\frac{dS_i(t)}{dt} = - \\beta S_i(t) \\Sigma_{j}C_{ij} I_j(t)$$ $$\\frac{dE_i(t)}{dt} = \\beta S_i(t) \\Sigma_{j}C_{ij} I_j(t) - \\kappa E_i(t)$$ $$\\frac{dI_i(t)}{dt} = \\kappa E_i(t) - \\gamma I_i(t) - \\mu_i I_i(t)$$ $$\\frac{dR_i(t)}{dt} = \\gamma I_i(t)$$ $$\\frac{dD_i(t)}{dt} = \\mu_i I_i(t)$$ C contact matrix whose elements represents contact different age groups (rows) age groups people come contact (columns). function relies package deSolve numerically integrate set equations . R0: Calculates basic reproduction number SEIRDAge model calculate parameter, first calculate next generation matrix G, G_ij gives expected number infections type caused single infectious individual type j, assuming type susceptible. SEIRDAge model, number contacts resulting infection per unit time age group beta N_i C_ij, N_i corresponds proportion population age group C_ij contact matrix element. average duration infection 1 / (mu_j + gamma_j) individual age group j. means average number secondary infections type caused infectious individual type j g_ij = beta N_i C_ij / (mu_i + gamma_i). R0 given dominant eigenvalue G matrix. ode_structure_diagram: Prints compartmental diagram SEIRDAge model plot supposes model comprises two age classes .","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDAge-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 object representing the SEIRDAge. — SEIRDAge-class","text":"output_names names compartments used model. initial_condition_names names initial conditions used model. transmission_parameter_names names transmission parameters used model. initial_conditions named list containing initial conditions model. Initial values compartment, S0, E0, I0, R0, D0. transmission_parameters named list containing transmission parameters model. Transmission parameters b, k, g represent rates changes compartments. contact_matrix square matrix dimension equal n_age_categories x n_age_categories. matrix represents contact different age groups (rows) age groups people come contact (columns) n_age_categories number age categories. age_ranges list string characters representing range ages people age category. object must length n_age_categories (otherwise error returned) element must formatted 'age1-age2'.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDNPIAge-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines an age-structured SEIR model with non-pharmaceutical interventions (NPIs)\nwhich influence social contact — SEIRDNPIAge-class","title":"Defines an age-structured SEIR model with non-pharmaceutical interventions (NPIs)\nwhich influence social contact — SEIRDNPIAge-class","text":"Methods solve set ordinary differential equations model chosen method numerical integration.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDNPIAge-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defines an age-structured SEIR model with non-pharmaceutical interventions (NPIs)\nwhich influence social contact — SEIRDNPIAge-class","text":"","code":"# S4 method for SEIRDNPIAge initial_conditions(object)  # S4 method for SEIRDNPIAge initial_conditions(object) <- value  # S4 method for SEIRDNPIAge transmission_parameters(object)  # S4 method for SEIRDNPIAge transmission_parameters(object) <- value  # S4 method for SEIRDNPIAge interventions(object)  # S4 method for SEIRDNPIAge interventions(object) <- value  # S4 method for SEIRDNPIAge run(object, times, solve_method = \"lsoda\")  # S4 method for SEIRDNPIAge R0(model)  # S4 method for SEIRDNPIAge ode_structure_diagram(model)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDNPIAge-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defines an age-structured SEIR model with non-pharmaceutical interventions (NPIs)\nwhich influence social contact — SEIRDNPIAge-class","text":"object object class SEIRDNPIAge. value (list) list NPI parameters: starts, stops times (vector) time sequence solve model. Must form seq(t_start,t_end,=t_step). Default time series seq(0, 100, = 1). solve_method string indicating chosen numerical integration method solving ode system. Default lsoda also default ode function deSolve package used function. model SEIRDNPIAge model","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDNPIAge-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defines an age-structured SEIR model with non-pharmaceutical interventions (NPIs)\nwhich influence social contact — SEIRDNPIAge-class","text":"Initial conditions SEIRDNPIAge model. Updated version age-structured SEIR model NPIs Transmission parameters SEIRDNPIAge model. Updated version age-structured SEIR model NPIs. object class SEIRDNPIAge NPI parameters assigned. data frame containing time vector time series S, R, D population fractions age group outputs incidence numbers age group. R0 value ODE-compartmental structure diagram object class html","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDNPIAge-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Defines an age-structured SEIR model with non-pharmaceutical interventions (NPIs)\nwhich influence social contact — SEIRDNPIAge-class","text":"initial_conditions: Retrieves initial_conditions age-structured SEIRD model. initial_conditions<-: Sets initial_conditions age-structured SEIRD model NPIs. initial conditions provided sum 1 different sizes compared number age groups, error thrown. transmission_parameters: Retrieves transmission_parameters age-structured SEIR model NPIs. transmission_parameters<-: Sets transmission_parameters age-structured SEIRD model NPIs. Sets transmission_parameters age-structured SEIR model. transmission parameters provided 1-dimensional error thrown. interventions: Retrieves NPI parameters SEIRDNPIAge model. interventions<-: Setter method NPI parameters SEIRDNPIAge model. run: Method simulate output using model. Solves system ODEs form age-structured simple SEIR model. system equations time evolution population fractions Susceptible (S), Exposed (E), Infected (), Recovered (R) Dead (D) groups given age group indexed given $$\\frac{dS_i(t)}{dt} = -\\beta(t) S_i \\Sigma_{j}C_{ij}(t) I_j$$ $$\\frac{dE_i(t)}{dt} = \\beta(t) S_i \\Sigma_{j}C{ij}(t) I_j-\\kappa E_i$$ $$\\frac{dI_i(t)}{dt} = \\kappa E_i - (\\gamma_i + \\mu_i) I_i$$ $$\\frac{dR_i(t)}{dt} = \\frac{\\text{d}R_i}{\\text{d}t} = \\gamma_i I_i$$ $$\\frac{dC(t)}{dt} = \\beta_i(t) S_i \\Sigma_{j}C_{ij}(t) I_j$$ $$\\frac{dD_i(t)}{dt} = \\mu_i I_i(t)$$ C contact matrix whose elements represents contact different age groups (rows) age groups people come contact (columns). Inter(t) value time t NPI protocol defined NPI (intervention) parameters. model encorperates influence NPIs act reduce degree social contact /change transmission parameters beta individuals. done splitting simulation model several intervals utilising different contact matrix interval simulate introduction NPIs time. function relies package deSolve numerically integrate set equations . R0: Calculates basic reproduction number SEIRDNPIAge model calculate parameter, first calculate next generation matrix G, G_ij gives expected number secondary infections type caused single infectious individual type j, assuming type susceptible. SEIRDNPIAge model, number contacts resulting infection per unit time age group beta N_i C_ij, N_i corresponds proportion population age group, beta non-intervention transmission parameter C_ij non-intervention contact matrix element. average duration infection 1 / (mu_j + gamma_j) individual age group j. means average number secondary infections type caused infectious individual type j g_ij = beta N_i C_ij / (mu_i + gamma_i). R0 given dominant eigenvalue G matrix. ode_structure_diagram: Prints compartmental diagram SEIRDNPIAge model","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDNPIAge-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Defines an age-structured SEIR model with non-pharmaceutical interventions (NPIs)\nwhich influence social contact — SEIRDNPIAge-class","text":"output_names names compartments used model. initial_condition_names names initial conditions used model. transmission_parameter_names names transmission parameters used model. npi_parameter_names list names NPI parameters (characters). Default list (\"starts\", \"stops\"). initial_conditions named list containing initial conditions model. Initial values compartment, S0, E0, I0, R0. transmission_parameters named list containing transmission parameters model. Transmission parameters b, k, g represent rates changes compartments. npi_parameters list values NPI parameters (double). interventions list NPI periods contact_matrix square matrices, dimension equal n_age_categories x n_age_categories. matrix represents contact different age groups (rows) age groups people come contact (columns) ist interval simulation (normally restriction social contact. contact_matrix_npi list square matrices, dimension equal n_age_categories x n_age_categories. matrix represents contact different age groups (rows) age groups people come contact (columns) ist interval simulation (normally restriction social contact. n_age_categories number age categories. n_npi number NPI periods. age_ranges list string characters representing range ages people age category. object must length n_age_categories (otherwise error returned) element must formatted 'age1-age2'.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDV-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 object representing the SEIRDV. — SEIRDV-class","title":"An S4 object representing the SEIRDV. — SEIRDV-class","text":"class represents SEIRV model, showing populations susceptible, exposed, infectious recovered individuals evolve time. Vaccinated individuals considered compartment.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDV-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An S4 object representing the SEIRDV. — SEIRDV-class","text":"","code":"# S4 method for SEIRDV initial_conditions(object)  # S4 method for SEIRDV transmission_parameters(object)  # S4 method for SEIRDV initial_conditions(object) <- value  # S4 method for SEIRDV transmission_parameters(object) <- value  # S4 method for SEIRDV intervention_parameters(object)  # S4 method for SEIRDV intervention_parameters(object) <- value  # S4 method for SEIRDV run(object, times, solve_method = \"lsoda\")"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDV-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An S4 object representing the SEIRDV. — SEIRDV-class","text":"object object class SEIRDV value (list) list intervention parameters: starts, stops coverages. times (double) sequence time points solution system ODEs returned. Must form seq(t_start, t_end, =t_step). Default time series seq(0, 100, = 1). solve_method (string) string chosen numerical integration method solving ode system. Default lsoda also default ode function deSolve package used function.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDV-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An S4 object representing the SEIRDV. — SEIRDV-class","text":"object class SEIRDV initial conditions assigned. object class SEIRDV transmission parameter values assigned. object class SEIRDV intervention parameters assigned. two dataframes: one time steps, age range, time series S, E, , R V population fractions, one time steps, age range, time series incidences deaths population fraction.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDV-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"An S4 object representing the SEIRDV. — SEIRDV-class","text":"initial_conditions: Retrieves initial conditions SEIRV model. transmission_parameters: Retrieves transmission parameters SEIRV model. initial_conditions<-: Setter method initial conditions (S0, E0, I0, R0, V0, VR0) SEIRV model. initial conditions must sum 1. initial conditions provided sum 1, error thrown. transmission_parameters<-: Set transmission parameters (beta, kappa, gamma, mu, nu, delta_V, delta_R) SEIRV model. transmission parameters provided 1-dimensional error thrown. intervention_parameters: Retrieves intervention parameters SEIRDV model. intervention_parameters<-: Setter method intervention parameters SEIRV model. Intervention parameters size. tanh function used smooth interventions simulation. class designed interventions last several days least several days ; interventions involving rapid fluctuations may distorted. run: Solves ODEs SEIRDV specified object time points specified times integration method specified solve_method. $$\\frac{dS(t)}{dt} = - beta S(t) (t) - nu Inter(t) S(t) + delta_V V(t) + delta_R R(t) + delta_VR VR(t)$$ $$\\frac{dE(t)}{dt} =  beta S(t) (t) - kappa E(t)$$ $$\\frac{dI(t)}{dt} = kappa E(t) - (gamma + mu) (t)$$ $$\\frac{dR(t)}{dt} = gamma (t) - delta_R R(t) - nu Inter(t) R(t)$$ $$\\frac{dV(t)}{dt} = nu Inter(t) S(t) - delta_V V(t)$$ $$\\frac{dVR(t)}{dt} = nu Inter(t) R(t) - delta_VR VR(t)$$ $$\\frac{dC(t)}{dt} = beta S(t) (t)$$ $$\\frac{dD(t)}{dt} = mu (t)$$ Inter(t) value time t intervention protocol defined intervention parameters. function relies package deSolve.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDV-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 object representing the SEIRDV. — SEIRDV-class","text":"output_names list compartments name used model incidence. initial_condition_names list names initial conditions (characters). Default list(\"S0\", \"E0\", \"I0\", R0\", \"V0\", \"VR0\"). transmission_parameter_names list names transmission parameters (characters). Default list(\"beta\", \"kappa\", \"gamma\", \"mu\",  \"nu\", \"delta_V\", \"delta_R\", \"delta_VR\"). intervention_parameter_names list names intervention parameters (characters). Default list (\"starts\", \"stops\", \"coverages\") initial_conditions list values initial conditions (double). transmission_parameters list values transmission parameters (double). intervention_parameters list values intervention parameters (double).","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDVAge-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 object representing the SEIRDVAge. — SEIRDVAge-class","title":"An S4 object representing the SEIRDVAge. — SEIRDVAge-class","text":"Defines age-structured SEIRDV model solves set ordinary differential equations model chosen method numerical integration. Vaccinated individuals considered compartment.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDVAge-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An S4 object representing the SEIRDVAge. — SEIRDVAge-class","text":"","code":"# S4 method for SEIRDVAge initial_conditions(object)  # S4 method for SEIRDVAge initial_conditions(object) <- value  # S4 method for SEIRDVAge transmission_parameters(object)  # S4 method for SEIRDVAge transmission_parameters(object) <- value  # S4 method for SEIRDVAge interventions(object)  # S4 method for SEIRDVAge interventions(object) <- value  # S4 method for SEIRDVAge run(object, times, solve_method = \"lsoda\")"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDVAge-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An S4 object representing the SEIRDVAge. — SEIRDVAge-class","text":"object object class SEIRDVAge. value (list) list interventions. intervention following parameters: starts, stops coverages. times (vector) time sequence solve model. Must form seq(t_start,t_end,=t_step). Default time series seq(0, 100, = 1). solve_method string indicating chosen numerical integration method solving ode system. Default lsoda also default ode function deSolve package used function.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDVAge-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An S4 object representing the SEIRDVAge. — SEIRDVAge-class","text":"Initial conditions SEIRDVAge model. Updated version age-structured SEIRDV model. Transmission parameters SEIRDVAge model. Updated version age-structured SEIRDV model. object class SEIRDVAge intervention parameters assigned. data frame containing time vector time series S, E, , R, V, VR D population fractions age group outputs incidence numbers age group.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDVAge-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"An S4 object representing the SEIRDVAge. — SEIRDVAge-class","text":"initial_conditions: Retrieves initial_conditions age-structured SEIRDV model. initial_conditions<-: Sets initial_conditions age-structured SEIRDV model. initial conditions provided sum 1 different sizes compared number age groups, error thrown. transmission_parameters: Retrieves transmission_parameters age-structured SEIRDV model. transmission_parameters<-: Sets transmission_parameters age-structured SEIRDV model. transmission parameters provided 1-dimensional error thrown. interventions: Retrieves interventions age-structured SEIRDV model. interventions<-: Setter method intervention age-structured SEIRV model. Intervention parameters size. tanh function used smooth interventions simulation. class designed interventions last several days least several days ; interventions involving rapid fluctuations may distorted. run: Method simulate output using model. Solves system ODEs form age-structured SEIRDV model. system equations time evolution population fractions Susceptible (S), Exposed (E), Infected (), Recovered (R), Vaccinated (V) Dead (D) groups given age group indexed given $$\\frac{dS_i(t)}{dt} = - \\beta S_i(t) \\Sigma_{j}C_{ij} I_j(t) - \\nu Inter(t) S_i(t) + \\delta_V V_i(t) + \\delta_R R_i(t) + \\delta_VR VR_i(t)$$ $$\\frac{dE_i(t)}{dt} = \\beta S_i(t) \\Sigma_{j}C_{ij} I_j(t) - \\kappa E_i(t)$$ $$\\frac{dI_i(t)}{dt} = \\kappa E_i(t) - \\gamma I_i(t) - \\mu I_i(t)$$ $$\\frac{dR_i(t)}{dt} = \\gamma I_i(t) -  \\delta_R R_i(t) - \\nu Inter(t) R_i(t)$$ $$\\frac{dV(t)}{dt} = \\nu Inter(t) S_i(t) - \\delta_V V_i(t)$$ $$\\frac{dVR(t)}{dt} = \\nu Inter(t) R_i(t) - \\delta_VR VR_i(t)$$ $$\\frac{dC(t)}{dt} = \\beta S_i(t) \\Sigma_{j}C_{ij} I_j(t)$$ $$\\frac{dD_i(t)}{dt} = \\mu I_i(t)$$ C contact matrix whose elements represents contact different age groups (rows) age groups people come contact (columns). function relies package deSolve numerically integrate set equations .","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRDVAge-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 object representing the SEIRDVAge. — SEIRDVAge-class","text":"output_names list compartments name used model incidence. initial_condition_names list names initial conditions (characters). Default list(\"S0\", \"E0\", \"I0\", \"V0\", \"R0\", \"VR0\", \"D0\"). transmission_parameter_names list names transmission parameters (characters). Default list(\"beta\", \"kappa\", \"gamma\", \"mu\",  \"nu\", \"delta_V\", \"delta_R\", \"delta_VR\"). intervention_parameter_names list names parameters intervention (characters). Default list (\"starts\", \"stops\", \"coverages\"). initial_conditions list values initial conditions (double). transmission_parameters list values transmission parameters (double). interventions list interventions. intervention parameters format (list double). contact_matrix square matrix dimension equal n_age_categories x n_age_categories. matrix represents contact different age groups (rows) age groups people come contact (columns). n_age_categories number age categories. age_ranges list string characters representing range ages people age category. object must length n_age_categories (otherwise error returned) element must formatted 'age1-age2'.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD_BD-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 object representing the SEIRD_BD model. — SEIRD_BD-class","title":"An S4 object representing the SEIRD_BD model. — SEIRD_BD-class","text":"class represents SEIRD_BD model, showing populations susceptible, exposed, infectious recovered individuals evolve time.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD_BD-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An S4 object representing the SEIRD_BD model. — SEIRD_BD-class","text":"","code":"# S4 method for SEIRD_BD initial_conditions(object)  # S4 method for SEIRD_BD transmission_parameters(object)  # S4 method for SEIRD_BD initial_conditions(object) <- value  # S4 method for SEIRD_BD transmission_parameters(object) <- value  # S4 method for SEIRD_BD run(object, times, solve_method = \"lsoda\")  # S4 method for SEIRD_BD R0(model)  # S4 method for SEIRD_BD ode_structure_diagram(model)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD_BD-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An S4 object representing the SEIRD_BD model. — SEIRD_BD-class","text":"object object class SEIRD_BD value (list) list values beta, kappa, gamma, mu, lambda, nu times (double) sequence time points solution system ODEs returned. Must form seq(t_start, t_end, =t_step). Default time series seq(0, 100, = 1). solve_method (string) string chosen numerical integration method solving ode system. Default lsoda also default ode function deSolve package used function. model SEIRD_BD model","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD_BD-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An S4 object representing the SEIRD_BD model. — SEIRD_BD-class","text":"object class SEIRD_BD initial conditions assigned. object class SEIRD_BD transmission parameter values assigned. two dataframes: one time steps, age range, time series S, E, , R D population fractions, one time steps, age range, time series incidences deaths population fraction. R0 value ODE-compartmental structure diagram object class html","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD_BD-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"An S4 object representing the SEIRD_BD model. — SEIRD_BD-class","text":"initial_conditions: Retrieves initial conditions SEIRD_BD model. transmission_parameters: Retrieves transmission parameters SEIRD_BD model. initial_conditions<-: Setter method initial conditions (S0, E0, I0 R0) SEIRD_BD model. initial conditions must sum 1. initial conditions provided sum 1, error thrown. transmission_parameters<-: Set transmission parameters (beta, kappa, gamma, mu, lambda, nu) SEIRD_BD model. transmission parameters provided 1-dimensional error thrown. run: Solves ODEs SEIRD_BD specified object time points specified times integration method specified solve_method. $$\\frac{dS(t)}{dt} = lambda + delta R(t) - beta S(t) (t) - nu S(t)$$ $$\\frac{dE(t)}{dt} =  beta S(t) (t) - kappa E(t) - nu E(t)$$ $$\\frac{dI(t)}{dt} = kappa E(t) - (gamma + mu) (t) - nu (t)$$ $$\\frac{dR(t)}{dt} = gamma (t) - (nu + delta) R(t)$$ $$\\frac{dD(t)}{dt} = mu (t) + nu (S(t) + E(t) + (t) + R(t))$$ $$\\frac{dC(t)}{dt} = beta S(t) (t)$$ function relies package deSolve. R0: Calculates basic reproduction number SEIRD_BD model R0 parameter given : $$R_0 = \\beta \\kappa / (\\kappa + \\nu) * 1/(\\gamma + \\mu + \\nu)$$ ode_structure_diagram: Prints compartmental diagram SEIRD_BD model","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD_BD-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 object representing the SEIRD_BD model. — SEIRD_BD-class","text":"output_names list compartments name used model incidence. initial_condition_names list names initial conditions (characters). Default list(\"S0\", \"E0\", \"I0\", R0\"). transmission_parameter_names list names transmission parameters (characters). Default list(\"beta\", \"kappa\", \"gamma\", \"mu\", \"lambda\", \"nu\", \"delta\"). initial_conditions list values initial conditions (double). transmission_parameters list values transmission parameters (double).","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD_CT-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 object representing the SEIRD_CT. — SEIRD_CT-class","title":"An S4 object representing the SEIRD_CT. — SEIRD_CT-class","text":"class represents SEIRD_CT model, provides model contact tracing.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD_CT-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An S4 object representing the SEIRD_CT. — SEIRD_CT-class","text":"","code":"# S4 method for SEIRD_CT initial_conditions(object)  # S4 method for SEIRD_CT transmission_parameters(object)  # S4 method for SEIRD_CT initial_conditions(object) <- value  # S4 method for SEIRD_CT transmission_parameters(object) <- value  # S4 method for SEIRD_CT run(object, times, solve_method = \"lsoda\")  # S4 method for SEIRD_CT R0(model)  # S4 method for SEIRD_CT ode_structure_diagram(model)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD_CT-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An S4 object representing the SEIRD_CT. — SEIRD_CT-class","text":"object object class SEIRD_CT value (list) list values beta, kappa, gamma, mu, respectively. times (double) sequence time points solution system ODEs returned. Must form seq(t_start, t_end, =t_step). Default time series seq(0, 100, = 1). solve_method (string) string chosen numerical integration method solving ode system. Default lsoda also default ode function deSolve package used function. model SEIRD_CT model","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD_CT-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An S4 object representing the SEIRD_CT. — SEIRD_CT-class","text":"object class SEIRD_CT initial conditions assigned. object class SEIRD_CT transmission parameter values assigned. two dataframes: one time steps, age range, time series S, E, R population fractions, one time steps, age range, time series incidences deaths population fraction. R0 value ODE-compartmental structure diagram object class html","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD_CT-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"An S4 object representing the SEIRD_CT. — SEIRD_CT-class","text":"initial_conditions: Retrieves initial conditions SEIRD_CT model. transmission_parameters: Retrieves transmission parameters SEIRD_CT model. initial_conditions<-: Setter method initial conditions (S0, E0, P0, A0, I0, Et0, Pt0, At0, It0, R0) SEIRD_CT model. initial conditions must sum 1. initial conditions provided sum 1, error thrown. transmission_parameters<-: Set transmission parameters (beta, kappa, gamma mu) SEIRD_CT model. transmission parameters provided 1-dimensional error thrown. run: Solves ODEs SEIRD_CT specified object time points specified times integration method specified solve_method. $$\\frac{dS(t)}{dt} = - (beta (P(t) + (t)) + beta_a (t)) S(t)$$ $$\\frac{dE(t)}{dt} = beta (1 - chi) (P(t) + (t)) S(t) + beta_a (t) S(t) - omega E(t)$$ $$\\frac{dP(t)}{dt} = (1 - eta_a) omega E(t) - psi P(t)$$ $$\\frac{dA(t)}{dt} = eta_a omega E(t) - gamma (t)$$ $$\\frac{dI(t)}{dt} = (1 - phi) psi P(t) - (gamma + mu) (t)$$ $$\\frac{dEt(t)}{dt} = beta chi (P(t) + (t)) S(t) - omega E(t)$$ $$\\frac{dPt(t)}{dt} = (1 - eta_a) omega Et(t) - psi Pt(t)$$ $$\\frac{dAt(t)}{dt} = eta_a omega Et(t) - gamma (t)$$ $$\\frac{dIt(t)}{dt} = psi Pt(t) - phi psi P(t) - (gamma + mu) (t)$$ $$\\frac{dR(t)}{dt} = gamma ((t) + (t) + (t) + (t))$$ $$\\frac{dD(t)}{dt} = mu ((t) + (t))$$ $$\\frac{dC(t)}{dt} = (beta (P(t) + (t)) + beta_a (t)) S(t)$$ function relies package deSolve. R0: Calculates basic reproduction number SEIRD_CT model R0 parameter given : $$R_0 = \\eta_a\\beta_a/\\gamma + (1 - \\eta_a)(1 - \\chi) [\\beta/\\psi + (1-\\phi) \\beta/(\\gamma+\\mu)]$$ ode_structure_diagram: Prints compartmental diagram SEIRD_CT model","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD_CT-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 object representing the SEIRD_CT. — SEIRD_CT-class","text":"output_names list compartments name used model incidence. initial_condition_names list names initial conditions (characters). Default list(\"S0\", \"E0\", \"P0\", \"A0\", \"I0\", \"Et0\", \"Pt0\", \"At0\", \"It0\", \"R0\"). transmission_parameter_names list names transmission parameters (characters). Default list(\"beta\", \"beta_a\", \"gamma\", \"mu\", \"chi\", \"omega\", \"eta_a\", \"psi\", \"phi\"). initial_conditions list values initial conditions (double). transmission_parameters list values transmission parameters (double).","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD_RU-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 object representing the SEIRD_RU. — SEIRD_RU-class","title":"An S4 object representing the SEIRD_RU. — SEIRD_RU-class","text":"class represents SEIR model, showing populations susceptible, exposed, infectious recovered individuals evolve time. model considers populations two types communities: rural urban. class considers model people move communities can infect people community.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD_RU-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An S4 object representing the SEIRD_RU. — SEIRD_RU-class","text":"","code":"# S4 method for SEIRD_RU initial_conditions(object)  # S4 method for SEIRD_RU initial_cases_deaths(object)  # S4 method for SEIRD_RU transmission_parameters(object)  # S4 method for SEIRD_RU contact_rates(object)  # S4 method for SEIRD_RU country_demog(object)  # S4 method for SEIRD_RU fraction_rural(object)  # S4 method for SEIRD_RU initial_conditions(object) <- value  # S4 method for SEIRD_RU transmission_parameters(object) <- value  # S4 method for SEIRD_RU contact_rates(object) <- value  # S4 method for SEIRD_RU country_demog(object) <- value  # S4 method for SEIRD_RU run(object, times, solve_method = \"lsoda\")  # S4 method for SEIRD_RU R0(model)  # S4 method for SEIRD_RU ode_structure_diagram(model)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD_RU-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An S4 object representing the SEIRD_RU. — SEIRD_RU-class","text":"object object class SEIRD_RU value (list) list 2 sets population fractions age group, single value noting fraction population rural. times (double) sequence time points solution system ODEs returned. Must form seq(t_start, t_end, =t_step). Default time series seq(0, 100, = 1). solve_method (string) string chosen numerical integration method solving ode system. Default \"lsoda\" also default ode function deSolve package used function. model SEIRD_RU model","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD_RU-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An S4 object representing the SEIRD_RU. — SEIRD_RU-class","text":"object class SEIRD_RU initial conditions assigned. object class SEIRD_RU transmission parameter values assigned. object class SEIRD_RU contact matrices assigned. object class SEIRD_RU demographic data assigned. dataframe time steps, time series S, E, R population fractions, incidence numbers deaths communities SEIRD_RU model. value R0 ODE-compartmental structure diagram object class html","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD_RU-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"An S4 object representing the SEIRD_RU. — SEIRD_RU-class","text":"initial_conditions: Retrieves initial conditions SEIRD_RU model. initial_cases_deaths: Retrieves initial cases deaths SEIRD_RU model. transmission_parameters: Retrieves transmission parameters SEIR model. contact_rates: Retrieves contact rates SEIR model. country_demog: Retrieves age demographics, provided, SEIR model. fraction_rural: Retrieves fraction population lives rural environment SEIR model. initial_conditions<-: Setter method initial conditions (S0, E0, I0 R0) communities SEIR model. initial conditions must sum 1. initial conditions provided sum 1, error thrown. transmission_parameters<-: Setter method transmission parameters (b, k, g, m C) SEIR model. transmission parameters provided 1-dimensional error thrown. contact_rates<-: Setter method contact matrices urban rural communities SEIR model. Matrices must type double. NOTE: inputting matrices, MUST assign fraction_rural first, must input full age demographics, .e. provide fraction population rural! country_demog<-: Setter method demographic data urban rural communities SEIR model. vectors together must sum 1. run: Solves ODEs SEIRD_RU specified object time points specified times integration method specified solve_method. urban community: $$\\frac{dS_U(t)}{dt} = - b S_U (I_U + I_Y) N_U C                            - b S_U/f_urban I_U/f_urban N_U (1-C)$$ $$\\frac{dE_U(t)}{dt} =  b S_U (I_U + I_Y) N_U C                            + b S_U/f_urban I_U/f_urban N_U (1-C) -k E_U$$ $$\\frac{dI_U(t)}{dt} = k E_U - (g + m) I_U$$ $$\\frac{dR_U(t)}{dt} = g I_U$$ $$\\frac{dC_U(t)}{dt} = b S_U (I_U + I_Y) N_U C                            + b S_U/f_urban I_U/f_urban N_U (1-C)$$ $$\\frac{dD_U(t)}{dt} = m I_U$$ rural community: $$\\frac{dS_Y(t)}{dt} = - b S_Y (I_U + I_Y) N_Y C                            - b S_Y/f_rural I_Y/f_rural N_Y (1-C)$$ $$\\frac{dE_Y(t)}{dt} =   b S_Y (I_U + I_Y) N_Y C                            + b S_Y/f_rural I_Y/f_rural N_Y (1-C) - k E_Y$$ $$\\frac{dI_Y(t)}{dt} = k E_Y - (g + m) I_Y$$ $$\\frac{dR_Y(t)}{dt} = g I_Y$$ $$\\frac{dC_Y(t)}{dt} =  b S_Y (I_U + I_Y) N_Y C                            + b S_Y/f_rural I_Y/f_rural N_Y (1-C)$$ $$\\frac{dD_Y(t)}{dt} = m I_Y$$ function relies package deSolve. R0: Returns value R0, basic reproduction number, model specified parameter values. R0 computed using next generation matrix method set van den Driessche (2017): van  den  Driessche, P. Reproduction numbers infectious disease models. Infectious Disease Modelling, 2:288–303, 8 2017. method, variables split two groups: represent infected individuals (case exposed infectious compartments communities), (susceptible, recovered dead). consider system equations consisting ODEs describing variables first group, case (E_U, E_Y, I_U I_Y). differential equations variables first group written form $$\\frac{dx_i}{dt} = F_i - V_i$$ F_i terms describing new cases infection V_i terms describing individuals move infected compartments. compute matrices matF matV $$matF = \\partial F_i(x_0)/\\partial x_j$$ $$matV = \\partial V_i(x_0)/\\partial x_j$$ x_j variables representing infected individuals. Finally, R0 spectral radius matrix FV^(-1). detailed description method, see van den Driessche (2017). ode_structure_diagram: Prints compartmental diagram SEIRD_RU model Note gamma used place Y subscripts rural model.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIRD_RU-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 object representing the SEIRD_RU. — SEIRD_RU-class","text":"output_names list compartments name used model incidence. initial_condition_names list names initial conditions (characters). Default list(\"S_U0\", \"E_U0\", \"I_U0\", \"R_U0\", \"S_Y0\", \"E_Y0\", \"I_Y0\", \"R_Y0\"). initial_cases_deaths_names name initial cases deaths (characters). Default list(\"C_U0\", \"D_U0\", \"C_Y0\", \"D_Y0\"). transmission_parameter_names list names transmission parameters (characters). Default list(\"b\", \"k\", \"g\", \"m\", \"C\"). initial_conditions list values initial conditions (double). initial_cases_deaths list values initial cases deaths. set 0, changed user (double). transmission_parameters list values transmission parameters (double). contact_rates list two contact rates, one urban communities one rural communities, number contacts fraction total population size (double). contact_rates_names list names two contact rates, one urban communities one rural communities country_demog list two vectors, describing age breakdown population urban rural communities. country_demog_names list names two demographic vectors, one urban communities one rural communities fraction_rural fraction population lives rural environment.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIaImIsRD-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 object representing the SEIaImIsRD. — SEIaImIsRD-class","title":"An S4 object representing the SEIaImIsRD. — SEIaImIsRD-class","text":"class defines SEIaImIsRD model, extension SEIRD model. model shows populations susceptible, exposed, infectious recovered individuals evolve time, infectious individuals subgrouped compartments according different severity symptoms, .e. asymptomatic, mild severe.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIaImIsRD-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An S4 object representing the SEIaImIsRD. — SEIaImIsRD-class","text":"","code":"# S4 method for SEIaImIsRD initial_conditions(object)  # S4 method for SEIaImIsRD transmission_parameters(object)  # S4 method for SEIaImIsRD initial_conditions(object) <- value  # S4 method for SEIaImIsRD transmission_parameters(object) <- value  # S4 method for SEIaImIsRD run(object, times, solve_method = \"lsoda\")  # S4 method for SEIaImIsRD R0(model)  # S4 method for SEIaImIsRD ode_structure_diagram(model)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIaImIsRD-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An S4 object representing the SEIaImIsRD. — SEIaImIsRD-class","text":"object object class SEIaImIsRD value numeric named list values transmission parameters: beta - named list effective contact rate infected group (.e. rate infected individual exposes susceptible), element value [0,1] kappa - rate progression exposed infectious (reciprocal incubation period), p_symptom - named list probability exposed individuals moving different infected groups, , probabilities mild (p_symptom.mild) severe (p_symptom.severe) groups need specified asymptomatic probability remainder (1 - p_symptom.mild - p_symptom.severe). Thus require p_symptom.mild + p_symptom.severe <= 1. gamma - list rate removal infected group (.e. recovery rate infected individual), element value [0,1] mu - list rate disease-caused mortality infected group, element value [0,1] times list time points simulation period solve_method string indicating ode integrator use. Default set 'lsoda' model SEIaImIsRD model","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIaImIsRD-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An S4 object representing the SEIaImIsRD. — SEIaImIsRD-class","text":"object class SEIaImIsRD initial population parameters object class SEIaImIsRD initial population parameters list two dataframes: one time steps, time series S, E, I_asymptomatic, I_mild, I_severe R population fractions, one time steps, time series incidences deaths population fraction R0 value ODE-compartmental structure diagram object class html","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIaImIsRD-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An S4 object representing the SEIaImIsRD. — SEIaImIsRD-class","text":"Notes: Total initial population size normalised 1. current model include natural death birth.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIaImIsRD-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"An S4 object representing the SEIaImIsRD. — SEIaImIsRD-class","text":"initial_conditions: Retrieves initial conditions SEIaImIsRD model. transmission_parameters: Retrieves transmission parameters SEIaImIsRD model. initial_conditions<-: Setter method initial population sizes (fraction) SEIaImIsRD model. transmission_parameters<-: Setter method transmission parameters SEIaImIsRD model. run: Solves ode system. $$\\frac{dS(t)}{dt} = -S(t)(\\beta.asymptomatic I_{asymptomatic}(t) + \\beta.mild I_{mild}(t) + \\beta.severe I_{severe}(t))$$ $$\\frac{dE(t)}{dt} = S(t)(\\beta.asymptomatic I_{asymptomatic}(t) + \\beta.mild I_{mild}(t) + \\beta.severe I_{severe}(t)) - \\kappa E(t)$$ $$\\frac{dI_{asymptomatic}(t)}{dt} = p_symptom.asymptomatic \\kappa E(t) - (\\gamma.asymptomatic + \\mu.asymptomatic) I_{asymptomatic}(t)$$ $$\\frac{dI_{mild}(t)}{dt} = p_symptom.mild\\kappa E(t) - (\\gamma.mild + \\mu.mild) I_{mild}(t)$$ $$\\frac{dI_{severe}(t)}{dt} = p_symptom.severe\\kappa E(t) - (\\gamma.severe + \\mu.severe) I_{severe}(t)$$ $$\\frac{dR(t)}{dt} =  \\gamma.asymptomatic I_{asymptomatic}(t) + \\gamma.mild I_{mild}(t) + \\gamma.severe I_{severe}(t)$$ $$\\frac{dD(t)}{dt} =  \\mu.asymptomatic I_{asymptomatic}(t) + \\mu.mild I_{mild}(t) + \\mu.severe I_{severe}(t)$$ R0: Calculate basic reproduction number (R_0) system using next generation matrix approach. ode_structure_diagram: Prints compartmental diagram SEIaImIsRD model","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEIaImIsRD-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 object representing the SEIaImIsRD. — SEIaImIsRD-class","text":"initial_condition_names list names initial conditions (characters). Default list(\"S0\", \"E0\", \"I_asymptomatic0\", \"I_mild0\", \"I_severe0\", \"R0\", \"D0\"). transmission_parameter_names list names transmission parameters (characters). Default list(\"beta\", \"kappa\", \"p_symptom\", \"gamma\", \"mu\"). initial_conditions list values initial conditions (double). transmission_parameters list values transmission parameters (double). output_names list compartments name used model incidence.","code":""},{"path":[]},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEmIRD-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 object representing the SEmIRD. — SEmIRD-class","title":"An S4 object representing the SEmIRD. — SEmIRD-class","text":"class represents SEmIRD model, showing populations susceptible, exposed, infectious recovered individuals evolve time. , multiple exposed compartments","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEmIRD-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An S4 object representing the SEmIRD. — SEmIRD-class","text":"","code":"# S4 method for SEmIRD initial_conditions(object)  # S4 method for SEmIRD transmission_parameters(object)  # S4 method for SEmIRD initial_conditions(object) <- value  # S4 method for SEmIRD transmission_parameters(object) <- value  # S4 method for SEmIRD run(object, times, solve_method = \"lsoda\")  # S4 method for SEmIRD R0(model)  # S4 method for SEmIRD ode_structure_diagram(model)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEmIRD-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An S4 object representing the SEmIRD. — SEmIRD-class","text":"object object class SEmIRD value (list) list values beta, kappa, gamma, mu, respectively. times (double) sequence time points solution system ODEs returned. Must form seq(t_start, t_end, =t_step). Default time series seq(0, 100, = 1). solve_method (string) string chosen numerical integration method solving ode system. Default lsoda also default ode function deSolve package used function. model SEmIRD model","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEmIRD-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An S4 object representing the SEmIRD. — SEmIRD-class","text":"object class SEmIRD initial conditions assigned. object class SEmIRD transmission parameter values assigned. two dataframes: one time steps, age range, time series S, E1, E2, ..., En, R population fractions, one time steps, age range, time series incidences deaths population fraction. R0 value ODE-compartmental structure diagram object class html","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEmIRD-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"An S4 object representing the SEmIRD. — SEmIRD-class","text":"initial_conditions: Retrieves initial conditions SEmIRD model. transmission_parameters: Retrieves transmission parameters SEmIRD model. initial_conditions<-: Setter method initial conditions (S0, E0, I0 R0) SEmIRD model. initial conditions must sum 1. initial conditions provided sum 1, error thrown. transmission_parameters<-: Set transmission parameters (beta, kappa, gamma mu) SEmIRD model. transmission parameters provided 1-dimensional error thrown. run: Solves ODEs SEmIRD specified object time points specified times integration method specified solve_method. $$\\frac{dS(t)}{dt} = - beta S(t) (t)$$ $$\\frac{dE_i(t)}{dt} =  beta S(t) (t) - kappa E_i(t), (=1)$$ $$\\frac{dEi(t)}{dt} =  kappa E_{-1}(t) - kappa E_i(t), (>1)$$ $$\\frac{dI(t)}{dt} = kappa E_n(t) - (gamma + mu) (t)$$ $$\\frac{dR(t)}{dt} = gamma (t)$$ $$\\frac{dC(t)}{dt} = beta S(t) (t)$$ $$\\frac{dD(t)}{dt} = mu (t)$$ function relies package deSolve. R0: Calculates basic reproduction number SEmIRD model R0 parameter given : $$R_0 = \\beta/(\\gamma + \\mu)$$ ode_structure_diagram: Prints compartmental diagram SEmIRD model diagram shown n=3 exposed compartments case","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SEmIRD-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 object representing the SEmIRD. — SEmIRD-class","text":"output_names list compartments name used model incidence. initial_condition_names list names initial conditions (characters). Default list(\"S0\", \"E0\", \"I0\", R0\"). transmission_parameter_names list names transmission parameters (characters). Default list(\"beta\", \"kappa\", \"gamma\", \"mu\"). initial_conditions list values initial conditions (double). transmission_parameters list values transmission parameters (double).","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SimulationParameters-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 object representing the SimulationParameters. — SimulationParameters-class","title":"An S4 object representing the SimulationParameters. — SimulationParameters-class","text":"class represents simulator SEIRD-class type model.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/SimulationParameters-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 object representing the SimulationParameters. — SimulationParameters-class","text":"start value start point simulation run (numeric). stop value end point simulation run (numeric). tstep value time step grid smoothed intervention protocol discretized (numeric).","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/agedemographics_by_country.html","id":null,"dir":"Reference","previous_headings":"","what":"agedemographics_by_country — agedemographics_by_country","title":"agedemographics_by_country — agedemographics_by_country","text":"data frame describing number individuals (thousands) per age group. Age groups span five years, starting 0-4 years, 5-9 years, etc. oldest age group 100+ years. Columns data frame Index number Variant: type data table row. Mostly estimates Region, subregion, country area: lists region data row applies. Notes Country code: three-letter code referring country region. Type Parent code Reference data: year count estimate 0-4: count (thousands) individuals age group 0-4. 5-9: count (thousands) individuals age group 5-9. 10-14: count (thousands) individuals age group 10-14. 15-19: count (thousands) individuals age group 15-19. 20-24: count (thousands) individuals age group 20-24. 25-29: count (thousands) individuals age group 25-29. 30-34: count (thousands) individuals age group 30-34. 35-39: count (thousands) individuals age group 35-39. 40-44: count (thousands) individuals age group 40-44. 45-49: count (thousands) individuals age group 45-49. 50-54: count (thousands) individuals age group 50-54. 55-59: count (thousands) individuals age group 55-59. 60-64: count (thousands) individuals age group 60-64. 65-69: count (thousands) individuals age group 65-69. 70-74: count (thousands) individuals age group 70-74. 75-79: count (thousands) individuals age group 75-79. 80-84: count (thousands) individuals age group 80-84. 85-89: count (thousands) individuals age group 85-89. 90-94: count (thousands) individuals age group 90-94. 95-99: count (thousands) individuals age group 95-99. 100+: count (thousands) individuals age group 100+.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/agedemographics_by_country.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"agedemographics_by_country — agedemographics_by_country","text":"","code":"data(agedemographics_by_country)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/agedemographics_by_country.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"agedemographics_by_country — agedemographics_by_country","text":"dataframe 29 variables 18105 observations.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/agedemographics_by_country.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"agedemographics_by_country — agedemographics_by_country","text":"UN Department Economic Social Affairs: Populations dynamics. World Population Prospects 2019","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/check.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks that the format of the\nInterventionParameters is correct: only whole intervals are allowed; intervals\ndo not overlap; no backwards intervals. — check","title":"Checks that the format of the\nInterventionParameters is correct: only whole intervals are allowed; intervals\ndo not overlap; no backwards intervals. — check","text":"Checks format InterventionParameters correct: whole intervals allowed; intervals overlap; backwards intervals.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks that the format of the\nInterventionParameters is correct: only whole intervals are allowed; intervals\ndo not overlap; no backwards intervals. — check","text":"","code":"check(object)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks that the format of the\nInterventionParameters is correct: only whole intervals are allowed; intervals\ndo not overlap; no backwards intervals. — check","text":"object InterventionParameters object whose shape check.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks that the format of the\nInterventionParameters is correct: only whole intervals are allowed; intervals\ndo not overlap; no backwards intervals. — check","text":"error messages.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_all_rural.html","id":null,"dir":"Reference","previous_headings":"","what":"contact_all_rural — contact_all_rural","title":"contact_all_rural — contact_all_rural","text":"list 177 16x16 asymmetrical contact matrices, one country, describing age groups contact age groups RURAL communities. units entries average number contacts person age group day. columns age groups 0-5 (X1), 5-10 (X2), 10-15 (X3), continuing 5 year gaps 80 years old. rows age group contact, row 1 0-5 year olds, row 2 5-10 year olds, etc. 80 year olds.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_all_rural.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"contact_all_rural — contact_all_rural","text":"","code":"data(contact_all_rural)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_all_rural.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"contact_all_rural — contact_all_rural","text":"Large list 177 tibbles, 16x16 list doubles.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_all_rural.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"contact_all_rural — contact_all_rural","text":"https://github.com/kieshaprem/synthetic-contact-matrices","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_all_urban.html","id":null,"dir":"Reference","previous_headings":"","what":"contact_all_urban — contact_all_urban","title":"contact_all_urban — contact_all_urban","text":"list 177 16x16 asymmetrical contact matrices, one country, describing age groups contact age groups URBAN communities. units entries average number contacts person age group day. columns age groups 0-5 (X1), 5-10 (X2), 10-15 (X3), continuing 5 year gaps 80 years old. rows age group contact, row 1 0-5 year olds, row 2 5-10 year olds, etc. 80 year olds.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_all_urban.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"contact_all_urban — contact_all_urban","text":"","code":"data(contact_all_urban)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_all_urban.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"contact_all_urban — contact_all_urban","text":"Large list 177 tibbles, 16x16 list doubles.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_all_urban.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"contact_all_urban — contact_all_urban","text":"https://github.com/kieshaprem/synthetic-contact-matrices","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_home.html","id":null,"dir":"Reference","previous_headings":"","what":"contact_home — contact_home","title":"contact_home — contact_home","text":"list 152 16x16 asymmetrical contact matrices, one country, describing age groups contact age groups HOME. units entries average number contacts person age group day. columns age groups 0-5 (X1), 5-10 (X2), 10-15 (X3), continuing 5 year gaps 80 years old. rows age group contact, row 1 0-5 year olds, row 2 5-10 year olds, etc. 80 year olds.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_home.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"contact_home — contact_home","text":"","code":"contact_home"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_home.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"contact_home — contact_home","text":"Large list 152 tibbles, 16x16 list doubles.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_home.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"contact_home — contact_home","text":"https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005697#sec020","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_other.html","id":null,"dir":"Reference","previous_headings":"","what":"contact_other — contact_other","title":"contact_other — contact_other","text":"list 152 16x16 asymmetrical contact matrices, one country, describing age groups contact age groups PLACES (covered contact matrices). units entries average number contacts person age group day. columns age groups 0-5 (X1), 5-10 (X2), 10-15 (X3), continuing 5 year gaps 80 years old. rows age group contact, row 1 0-5 year olds, row 2 5-10 year olds, etc. 80 year olds.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_other.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"contact_other — contact_other","text":"","code":"contact_other"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_other.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"contact_other — contact_other","text":"Large list 152 tibbles, 16x16 list doubles.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_other.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"contact_other — contact_other","text":"https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005697#sec020","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_rates-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter method for contact matrices, or contact rates directly, for urban and\nrural communities in the SEIRD_RU model. Matrices must be of type double.\nNOTE: if inputting matrices, you MUST assign fraction_rural first, and you\nmust input full age demographics, i.e. you cannot only provide the fraction\nof the population that is rural! — contact_rates<-","title":"Setter method for contact matrices, or contact rates directly, for urban and\nrural communities in the SEIRD_RU model. Matrices must be of type double.\nNOTE: if inputting matrices, you MUST assign fraction_rural first, and you\nmust input full age demographics, i.e. you cannot only provide the fraction\nof the population that is rural! — contact_rates<-","text":"Setter method contact matrices, contact rates directly, urban rural communities SEIRD_RU model. Matrices must type double. NOTE: inputting matrices, MUST assign fraction_rural first, must input full age demographics, .e. provide fraction population rural!","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_rates-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter method for contact matrices, or contact rates directly, for urban and\nrural communities in the SEIRD_RU model. Matrices must be of type double.\nNOTE: if inputting matrices, you MUST assign fraction_rural first, and you\nmust input full age demographics, i.e. you cannot only provide the fraction\nof the population that is rural! — contact_rates<-","text":"","code":"contact_rates(object) <- value"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_rates-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter method for contact matrices, or contact rates directly, for urban and\nrural communities in the SEIRD_RU model. Matrices must be of type double.\nNOTE: if inputting matrices, you MUST assign fraction_rural first, and you\nmust input full age demographics, i.e. you cannot only provide the fraction\nof the population that is rural! — contact_rates<-","text":"object (SEIRD_RU model) value (list) list contact matrices contact rates.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_rates-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter method for contact matrices, or contact rates directly, for urban and\nrural communities in the SEIRD_RU model. Matrices must be of type double.\nNOTE: if inputting matrices, you MUST assign fraction_rural first, and you\nmust input full age demographics, i.e. you cannot only provide the fraction\nof the population that is rural! — contact_rates<-","text":"object class SEIRD_RU contact rates assigned.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves contact rates of SEIR model. — contact_rates","title":"Retrieves contact rates of SEIR model. — contact_rates","text":"Retrieves contact rates SEIR model.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves contact rates of SEIR model. — contact_rates","text":"","code":"contact_rates(object)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves contact rates of SEIR model. — contact_rates","text":"object object class SEIRD_RU.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_school.html","id":null,"dir":"Reference","previous_headings":"","what":"contact_school — contact_school","title":"contact_school — contact_school","text":"list 152 16x16 asymmetrical contact matrices, one country, describing age groups contact age groups SCHOOL. units entries average number contacts person age group day. columns age groups 0-5 (X1), 5-10 (X2), 10-15 (X3), continuing 5 year gaps 80 years old. rows age group contact, row 1 0-5 year olds, row 2 5-10 year olds, etc. 80 year olds.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_school.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"contact_school — contact_school","text":"","code":"contact_school"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_school.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"contact_school — contact_school","text":"Large list 152 tibbles, 16x16 list doubles.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_school.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"contact_school — contact_school","text":"https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005697#sec020","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_work.html","id":null,"dir":"Reference","previous_headings":"","what":"contact_work — contact_work","title":"contact_work — contact_work","text":"list 152 16x16 asymmetrical contact matrices, one country, describing age groups contact age groups WORK. units entries average number contacts person age group day. columns age groups 0-5 (X1), 5-10 (X2), 10-15 (X3), continuing 5 year gaps 80 years old. rows age group contact, row 1 0-5 year olds, row 2 5-10 year olds, etc. 80 year olds.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_work.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"contact_work — contact_work","text":"","code":"contact_work"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_work.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"contact_work — contact_work","text":"Large list 152 tibbles, 16x16 list doubles.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/contact_work.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"contact_work — contact_work","text":"https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005697#sec020","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/country_codetoname.html","id":null,"dir":"Reference","previous_headings":"","what":"country_codetoname — country_codetoname","title":"country_codetoname — country_codetoname","text":"dataframe two variables: CountryCode, three-letter code, CountryName, full name country.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/country_codetoname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"country_codetoname — country_codetoname","text":"","code":"data(country_codetoname)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/country_codetoname.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"country_codetoname — country_codetoname","text":"data frame 2 variables 263 observations.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/country_codetoname.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"country_codetoname — country_codetoname","text":"UN Department Economic Social Affairs: Populations dynamics. World Population Prospects 2019","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/country_demog-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter method for demographic data for urban and rural communities in the\nSEIR model. If inputting demographic vectors, both vectors together must sum\nto 1. — country_demog<-","title":"Setter method for demographic data for urban and rural communities in the\nSEIR model. If inputting demographic vectors, both vectors together must sum\nto 1. — country_demog<-","text":"Setter method demographic data urban rural communities SEIR model. inputting demographic vectors, vectors together must sum 1.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/country_demog-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter method for demographic data for urban and rural communities in the\nSEIR model. If inputting demographic vectors, both vectors together must sum\nto 1. — country_demog<-","text":"","code":"country_demog(object) <- value"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/country_demog-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter method for demographic data for urban and rural communities in the\nSEIR model. If inputting demographic vectors, both vectors together must sum\nto 1. — country_demog<-","text":"object (SEIRD_RU model) value (list) list 2 sets population fractions age group, single value noting fraction population rural.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/country_demog-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter method for demographic data for urban and rural communities in the\nSEIR model. If inputting demographic vectors, both vectors together must sum\nto 1. — country_demog<-","text":"object class SEIRD_RU  contact matrices assigned.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/country_demog.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves age demographics, if provided, of SEIR model. — country_demog","title":"Retrieves age demographics, if provided, of SEIR model. — country_demog","text":"Retrieves age demographics, provided, SEIR model.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/country_demog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves age demographics, if provided, of SEIR model. — country_demog","text":"","code":"country_demog(object)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/country_demog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves age demographics, if provided, of SEIR model. — country_demog","text":"object object class SEIRD_RU.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/covid_transmission_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns transmission parameter values for gamma, mu, kappa and R0 given a specific\nvariant — covid_transmission_parameters","title":"Returns transmission parameter values for gamma, mu, kappa and R0 given a specific\nvariant — covid_transmission_parameters","text":"Parameters returned vector form age-structured models, scalar form non-age-structured models.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/covid_transmission_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns transmission parameter values for gamma, mu, kappa and R0 given a specific\nvariant — covid_transmission_parameters","text":"","code":"covid_transmission_parameters(variant = \"base\", is_age_structured = FALSE)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/covid_transmission_parameters.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Returns transmission parameter values for gamma, mu, kappa and R0 given a specific\nvariant — covid_transmission_parameters","text":"following list sources used parameter estimates: Xin, Hualei, et al. \"Estimating latent period coronavirus disease 2019 (COVID-19).\" Clinical Infectious Diseases: Official Publication Infectious Diseases Society America (2021). Li, Baisheng, et al. \"Viral infection transmission large well-traced outbreak caused Delta SARS-CoV-2 variant.\" MedRxiv (2021). Jansen, Lauren. \"Investigation SARS-CoV-2 B. 1.1. 529 (Omicron) Variant Cluster—Nebraska, November–December 2021.\" MMWR. Morbidity Mortality Weekly Report 70 (2021). Grant, Rebecca, et al. \"Impact SARS-CoV-2 Delta variant incubation, transmission settings vaccine effectiveness: Results nationwide case-control study France.\" Lancet Regional Health-Europe (2021): 100278. Verity, Robert, et al. \"Estimates severity coronavirus disease 2019: model-based analysis.\" Lancet infectious diseases 20.6 (2020): 669-677. , Xi, et al. \"Temporal dynamics viral shedding transmissibility COVID-19.\" Nature medicine 26.5 (2020): 672-675. Ferguson, Neil, et al. \"Report 9: Impact non-pharmaceutical interventions (NPIs) reduce COVID19 mortality healthcare demand.\" (2020). Liu, Ying, Joacim Rocklöv. \"reproductive number Delta variant SARS-CoV-2 far higher compared ancestral SARS-CoV-2 virus.\" Journal travel medicine (2021). Zhang, Meng, et al. \"Transmission dynamics outbreak COVID-19 Delta variant B. 1.617. 2—Guangdong Province, China, May–June 2021.\" China CDC Weekly 3.27 (2021): 584. Burki, Talha Khan. \"Omicron variant booster COVID-19 vaccines.\" Lancet Respiratory Medicine (2021).","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/covid_transmission_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns transmission parameter values for gamma, mu, kappa and R0 given a specific\nvariant — covid_transmission_parameters","text":"variant string specifying variant SARS-CoV-2: base, delta omicron. agestructured boolean indicating whether model age-structured","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/covid_transmission_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns transmission parameter values for gamma, mu, kappa and R0 given a specific\nvariant — covid_transmission_parameters","text":"lists numbers (gamma mu age-structured models) dataframes representing transmission parameter values","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/covid_transmission_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns transmission parameter values for gamma, mu, kappa and R0 given a specific\nvariant — covid_transmission_parameters","text":"1/kappa typical latent period, .e. period individual infected infectious. latent period base variant estimated 5.5 days (Xin et al. 2021). latent period Delta variant estimated around 3.7 days (Li et al. 2021). incubation period Omicron variant estimated 3 days (Jansen 2021), estimate latent period currently available. incubation period delta variant estimated approximately 0.6 days longer latent period (Grant et al. 2021), assume latent period omicron 2.4 days. thus obtain values kappa variants: base kappa = 1/5.5, Delta kappa = 1/3.7, omicron kappa = 1/2.4. assume average 0.66% individuals infected virus die (Verity et al. 2020): termed infection fatality ratio (IFR). age-structured models, use age-specific IFR estimates (Verity et al. 2020). Changing either gamma mu affects rate individuals recover die proportions recover die. , implications individual parameter values hard intuit without recourse . , choose different parameterisation makes simpler set parameters appropriate values: gamma = zeta (1-IFR) mu = zeta IFR proportion infected individuals go die due infection given ratio rate death overall rate infectious compartment, definition IFR: zeta = zeta IFR / (zeta IFR + zeta (1-IFR)) = IFR average duration spent infectious compartment given : Viral load data hospitalised patients known infector-infectee pairs can used determine probability infection occurs given time infector first infected (et al. 2020): , determining distribution representing duration infectiousness. estimated viral loads decline quickly within 7 days symptomatic (et al. 2020). , , models without asymptomatic transmission assume average infectious period 7 days, resulting zeta=1/7. R0 base variant assumed 2.4 Report 9  (Ferguson et al. 2020). Estimates R0 delta variant range 3.2 7, estimate 5 (Liu et al. 2021; Meng et al. 2021; Burki 2021). Estimating R0 Omicron difficult many confounding variables like vaccine escape, preliminary guess 10 (Burki 2021).","code":"1 / (zeta IFR + zeta (1-IFR)) = 1 / zeta"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/fraction_rural.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves fraction of the population that lives in a rural environment\nof SEIR model. — fraction_rural","title":"Retrieves fraction of the population that lives in a rural environment\nof SEIR model. — fraction_rural","text":"Retrieves fraction population lives rural environment SEIR model.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/fraction_rural.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves fraction of the population that lives in a rural environment\nof SEIR model. — fraction_rural","text":"","code":"fraction_rural(object)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/fraction_rural.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves fraction of the population that lives in a rural environment\nof SEIR model. — fraction_rural","text":"object object class SEIRD_RU.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/infection_fatality_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"infection_fatality_ratio — infection_fatality_ratio","title":"infection_fatality_ratio — infection_fatality_ratio","text":"list objects containg mortality rates due infection SARS-CoV-2.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/infection_fatality_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"infection_fatality_ratio — infection_fatality_ratio","text":"","code":"data(infection_fatality_ratio)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/infection_fatality_ratio.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"infection_fatality_ratio — infection_fatality_ratio","text":"list containing tibble dimensions 21x2 numeric.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/infection_fatality_ratio.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"infection_fatality_ratio — infection_fatality_ratio","text":"Verity, Robert, et al. \"Estimates severity coronavirus disease 2019: model-based analysis.\" Lancet infectious diseases 20.6 (2020): 669-677. https://www.thelancet.com/journals/laninf/article/PIIS1473-3099(20)30243-7/fulltext","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/infection_fatality_ratio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"infection_fatality_ratio — infection_fatality_ratio","text":"two regimes considering moratlity: age_structured: tibble containing mortality rates split 5 year age groups. age groups range 0-4 y.o. 100+ y.o. overall: probability mortality across ages.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/initial_cases_deaths.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves initial cases and deaths of SEIRD_RU model. — initial_cases_deaths","title":"Retrieves initial cases and deaths of SEIRD_RU model. — initial_cases_deaths","text":"Retrieves initial cases deaths SEIRD_RU model.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/initial_cases_deaths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves initial cases and deaths of SEIRD_RU model. — initial_cases_deaths","text":"","code":"initial_cases_deaths(object)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/initial_cases_deaths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves initial cases and deaths of SEIRD_RU model. — initial_cases_deaths","text":"object object class SEIRD_RU.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/initial_conditions-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set initial conditions of a class within comomodels package. — initial_conditions<-","title":"Set initial conditions of a class within comomodels package. — initial_conditions<-","text":"initial conditions must sum 1. initial conditions provided sum 1, error thrown.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/initial_conditions-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set initial conditions of a class within comomodels package. — initial_conditions<-","text":"","code":"initial_conditions(object) <- value"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/initial_conditions-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set initial conditions of a class within comomodels package. — initial_conditions<-","text":"object object class within comomodels package value (list) list initial conditions","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/initial_conditions-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set initial conditions of a class within comomodels package. — initial_conditions<-","text":"object class within comomodels package initial conditions assigned.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/initial_conditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves initial conditions of a class within comomodels package — initial_conditions","title":"Retrieves initial conditions of a class within comomodels package — initial_conditions","text":"Retrieves initial conditions class within comomodels package","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/initial_conditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves initial conditions of a class within comomodels package — initial_conditions","text":"","code":"initial_conditions(object)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/initial_conditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves initial conditions of a class within comomodels package — initial_conditions","text":"object object S4 class within comomodels package","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/intervention_parameters-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set intervention parameters of the SEIRV or SEIRDAge model. — intervention_parameters<-","title":"Set intervention parameters of the SEIRV or SEIRDAge model. — intervention_parameters<-","text":"Intervention parameters size. class designed interventions last several days least several days .","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/intervention_parameters-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set intervention parameters of the SEIRV or SEIRDAge model. — intervention_parameters<-","text":"","code":"intervention_parameters(object) <- value"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/intervention_parameters-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set intervention parameters of the SEIRV or SEIRDAge model. — intervention_parameters<-","text":"object object model class within comomodels package (SEIRDV SEIRDAge_interventions). value (list) list intervention parameters: starts, stops coverages.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/intervention_parameters-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set intervention parameters of the SEIRV or SEIRDAge model. — intervention_parameters<-","text":"object class within comomodels package","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/intervention_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves intervention parameters of SEIRDV or SEIRDAge_interventions model. — intervention_parameters","title":"Retrieves intervention parameters of SEIRDV or SEIRDAge_interventions model. — intervention_parameters","text":"Retrieves intervention parameters SEIRDV SEIRDAge_interventions model.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/intervention_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves intervention parameters of SEIRDV or SEIRDAge_interventions model. — intervention_parameters","text":"","code":"intervention_parameters(object)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/intervention_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves intervention parameters of SEIRDV or SEIRDAge_interventions model. — intervention_parameters","text":"object object model class within comomodels package (SEIRDV SEIRDAge_interventions).","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/intervention_protocol.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates protocols for the interventions using parameters of the model; used\nin the 'run' method of compartmental model with interventions. — intervention_protocol","title":"Creates protocols for the interventions using parameters of the model; used\nin the 'run' method of compartmental model with interventions. — intervention_protocol","text":"Creates protocols interventions using parameters model; used 'run' method compartmental model interventions.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/intervention_protocol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates protocols for the interventions using parameters of the model; used\nin the 'run' method of compartmental model with interventions. — intervention_protocol","text":"","code":"intervention_protocol(int_parms, sim_parms, tanh_slope)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/intervention_protocol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates protocols for the interventions using parameters of the model; used\nin the 'run' method of compartmental model with interventions. — intervention_protocol","text":"int_parms parameters interventions according InterventionParameters object. sim_parms parameters simulation timeframe according SimulationParameters object. tanh_slope sharpness intervention waves used function continuity purposes.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/interventions-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter method for intervention of the age-structured SEIRV model. — interventions<-","title":"Setter method for intervention of the age-structured SEIRV model. — interventions<-","text":"Intervention parameters size. tanh function used smooth interventions simulation. class designed interventions last several days least several days ; interventions involving rapid fluctuations may distorted.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/interventions-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter method for intervention of the age-structured SEIRV model. — interventions<-","text":"","code":"interventions(object) <- value"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/interventions-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter method for intervention of the age-structured SEIRV model. — interventions<-","text":"object object class SEIRDVAge value (list) list interventions. intervention following parameters: starts, stops coverages.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/interventions-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter method for intervention of the age-structured SEIRV model. — interventions<-","text":"object class SEIRDVAge intervention parameters assigned.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/interventions.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves interventions of age-structured SEIRDV model. — interventions","title":"Retrieves interventions of age-structured SEIRDV model. — interventions","text":"Retrieves interventions age-structured SEIRDV model.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/interventions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves interventions of age-structured SEIRDV model. — interventions","text":"","code":"interventions(object)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/interventions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves interventions of age-structured SEIRDV model. — interventions","text":"object object class SEIRDV.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/ode_structure_diagram.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots model structure for a model object — ode_structure_diagram","title":"Plots model structure for a model object — ode_structure_diagram","text":"Plots model structure model object","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/ode_structure_diagram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots model structure for a model object — ode_structure_diagram","text":"","code":"ode_structure_diagram(model)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/ode_structure_diagram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots model structure for a model object — ode_structure_diagram","text":"model object model class within comomodels package","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/percentrural_by_country.html","id":null,"dir":"Reference","previous_headings":"","what":"percentrural_by_country — percentrural_by_country","title":"percentrural_by_country — percentrural_by_country","text":"dataframe showing percentage population lived rural environment 264 countries years 1960-2020. columns ","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/percentrural_by_country.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"percentrural_by_country — percentrural_by_country","text":"","code":"data(percentrural_by_country)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/percentrural_by_country.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"percentrural_by_country — percentrural_by_country","text":"dataframe 65 variables 264 observations.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/percentrural_by_country.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"percentrural_by_country — percentrural_by_country","text":"https://data.worldbank.org/indicator/SP.RUR.TOTL.ZS?view=chart","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/percentrural_by_country.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"percentrural_by_country — percentrural_by_country","text":"Country Name: full name country Country Code: three-letter country code Indicator Name: Rural population (% total population) Indicator Code: shorthand Indicator Name 61 columns, one year range 1960-2020","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/population.html","id":null,"dir":"Reference","previous_headings":"","what":"population — population","title":"population — population","text":"tibble containing populations, birth rates death rates 152 countries split 5 year age groups. age groups range 0-4 y.o. 100+ y.o.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"population — population","text":"","code":"population"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/population.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"population — population","text":"tibble dimensions 4221x5.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/population.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"population — population","text":"https://population.un.org/wpp/Download/Standard/Population/","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/run.html","id":null,"dir":"Reference","previous_headings":"","what":"Solves ODEs for a given model — run","title":"Solves ODEs for a given model — run","text":"Solves ODEs model class within comomodels package returns solutions time points specified using specified integration method. Numerical solution ODEs carried deSolve package.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solves ODEs for a given model — run","text":"","code":"run(object, times = seq(0, 100, by = 1), solve_method = \"lsoda\", ...)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solves ODEs for a given model — run","text":"object object class within comomodels times (double) vector time points solution system ODEs returned. Default time series seq(0, 100, = 1) solve_method (string) string specifying chosen numerical integration method solving ode system. Default \"lsoda\" also default ode function deSolve package used function ... parameters","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solves ODEs for a given model — run","text":"named list two dataframes: 'states' describes time evolution compartment proportions; 'changes' describes time evolution daily quantities like cases deaths","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/stack_intervention_coverages.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates stacks of interventions using parameters of the model; used\nin the 'run' method of compartmental model with interventions. — stack_intervention_coverages","title":"Creates stacks of interventions using parameters of the model; used\nin the 'run' method of compartmental model with interventions. — stack_intervention_coverages","text":"Creates stacks interventions using parameters model; used 'run' method compartmental model interventions.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/stack_intervention_coverages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates stacks of interventions using parameters of the model; used\nin the 'run' method of compartmental model with interventions. — stack_intervention_coverages","text":"","code":"stack_intervention_coverages(times, int_parms, tanh_slope)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/stack_intervention_coverages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates stacks of interventions using parameters of the model; used\nin the 'run' method of compartmental model with interventions. — stack_intervention_coverages","text":"times times simulate. int_parms parameters interventions according InterventionParameters object. tanh_slope sharpness intervention waves used function continuity purposes.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/tanh_coverage_smoother.html","id":null,"dir":"Reference","previous_headings":"","what":"Smoother function for the curve of the interventions. Used to avoid breaks\nin the ode solver of compartmental models with non-smooth interventions. — tanh_coverage_smoother","title":"Smoother function for the curve of the interventions. Used to avoid breaks\nin the ode solver of compartmental models with non-smooth interventions. — tanh_coverage_smoother","text":"Smoother function curve interventions. Used avoid breaks ode solver compartmental models non-smooth interventions.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/tanh_coverage_smoother.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smoother function for the curve of the interventions. Used to avoid breaks\nin the ode solver of compartmental models with non-smooth interventions. — tanh_coverage_smoother","text":"","code":"tanh_coverage_smoother(t, start, stop, coverage, tanh_slope)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/tanh_coverage_smoother.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smoother function for the curve of the interventions. Used to avoid breaks\nin the ode solver of compartmental models with non-smooth interventions. — tanh_coverage_smoother","text":"t time intervention effect computed. start time intervention started. stop time intervention ended. coverage height intervention effect. tanh_slope sharpness intervention wave used function continuity purposes;larger values parameter cause curve closely approach step function.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/tanh_coverage_smoother.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smoother function for the curve of the interventions. Used to avoid breaks\nin the ode solver of compartmental models with non-smooth interventions. — tanh_coverage_smoother","text":"value intervention effect.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/transmission_parameters-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set transmission parameters for a class within comomodels package — transmission_parameters<-","title":"Set transmission parameters for a class within comomodels package — transmission_parameters<-","text":"transmission parameters provided 1-dimensional error thrown.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/transmission_parameters-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set transmission parameters for a class within comomodels package — transmission_parameters<-","text":"","code":"transmission_parameters(object) <- value"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/transmission_parameters-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set transmission parameters for a class within comomodels package — transmission_parameters<-","text":"object (class within comomodels package) value (list) list values transmission parameter, respectively","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/transmission_parameters-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set transmission parameters for a class within comomodels package — transmission_parameters<-","text":"object class within comomodels package transmission parameter values assigned.","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/transmission_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves transmission parameters of a class within comomodels package — transmission_parameters","title":"Retrieves transmission parameters of a class within comomodels package — transmission_parameters","text":"Retrieves transmission parameters class within comomodels package","code":""},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/transmission_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves transmission parameters of a class within comomodels package — transmission_parameters","text":"","code":"transmission_parameters(object)"},{"path":"https://como-dtc-collaboration.github.io/como-models/reference/transmission_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves transmission parameters of a class within comomodels package — transmission_parameters","text":"object object one classes como model","code":""}]
