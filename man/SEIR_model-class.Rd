% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SEIR_Model.R
\docType{class}
\name{SEIR_model-class}
\alias{SEIR_model-class}
\alias{initial_conditions}
\alias{transmission_parameters}
\alias{initial_conditions<-}
\alias{transmission_parameters<-}
\alias{simulate_SEIR}
\title{An S4 object representing the SEIR_model.}
\usage{
initial_conditions(object)

transmission_parameters(object)

initial_conditions(object, S0, E0, I0, R0) <- value

transmission_parameters(object, b, k, g) <- value

simulate_SEIR(object, times = seq(0, 100, by = 1), solve_method = "lsoda")
}
\arguments{
\item{object}{an object of the class SEIR_model}

\item{S0}{(double) initial fraction of the population that is susceptible}

\item{E0}{(double) initial fraction of the population that has been exposed}

\item{I0}{(double) initial fraction of the population that is infectious}

\item{R0}{(double) initial fraction of the population that has recovered#' All initial conditions must sum up to 1.}

\item{b}{(double) rate at which an infected individual exposes susceptible}

\item{k}{(double) rate at which exposed individuals become infectious}

\item{g}{(double) rate at which infected individuals recover}

\item{times}{(double) a sequence of time points at which the solution to
the system of ODEs should be returned. Must be of the form
seq(t_start, t_end, by=t_step). Default time series is seq(0, 100, by = 1).}

\item{solve_method}{(string) a string of chosen numerical integration method
for solving the ode system. Default is "lsoda" which is also the default for
the ode function in the deSolve package used in this function.}
}
\value{
object of class SEIR_model with initial conditions assigned.

object of class SEIR_model with transmission parameter values
assigned.

a dataframe with the time steps, time series of S, E, I and R
population fractions and incidence numbers of the SEIR model.
}
\description{
This class represents the SEIR model, showing how populations of susceptible,
exposed, infectious and recovered individuals evolve over time.
}
\section{Functions}{
\itemize{
\item \code{initial_conditions}: retrieves initial conditions for SEIR model.

\item \code{transmission_parameters}: retrieves transmission parameters for SEIR model.

\item \code{initial_conditions<-}: setter and getter method for initial conditions (S0,
E0, I0 and R0) of the SEIR model.

If the initial conditions provided to do not sum to 1, an error is thrown.

\item \code{transmission_parameters<-}: setter and getter method for transmission parameters
(b, k and g) of the SEIR model.

If the transmission parameters provided to are not 1-dimensional an error is
thrown.

\item \code{simulate_SEIR}: solves ODEs of the SEIR_model specified in object
for the time points specified in times and integration method specified in
solve_method.

\deqn{\frac{dS(t)}{dt} = - b S(t) I(t)}
\deqn{\frac{dE(t)}{dt} =  b S(t) I(t) - k E(t)}
\deqn{\frac{dI(t)}{dt} = k E(t) - g I(t)}
\deqn{\frac{dR(t)}{dt} = g I(t)}

This function relies on the package deSolve.
}}

\section{Slots}{

\describe{
\item{\code{output_names}}{list of compartments name which are used by the model and
incidence.}

\item{\code{initial_condition_names}}{list of names of initial conditions
(characters). Default is list("S0", "E0", "I0", "R0").}

\item{\code{transmission_parameter_names}}{list of names of transmission parameters
(characters). Default is list("b", "k", "g").}

\item{\code{initial_conditions}}{list of values for initial conditions(double).}

\item{\code{transmission_parameters}}{list of values for transmission parameters
(double).}
}}

