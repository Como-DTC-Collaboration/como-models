% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SEIRD_RU.R
\docType{class}
\name{SEIRD_RU-class}
\alias{SEIRD_RU-class}
\alias{SEIRD_RU}
\alias{initial_conditions,SEIRD_RU-method}
\alias{initial_conditions,ANY,ANY-method}
\alias{initial_cases_deaths,SEIRD_RU-method}
\alias{initial_cases_deaths,ANY,ANY-method}
\alias{transmission_parameters,SEIRD_RU-method}
\alias{transmission_parameters,ANY,ANY-method}
\alias{contact_matrices,SEIRD_RU-method}
\alias{contact_matrices,ANY,ANY-method}
\alias{country_demog,SEIRD_RU-method}
\alias{country_demog,ANY,ANY-method}
\alias{initial_conditions<-,SEIRD_RU-method}
\alias{initial_conditions<-,ANY,ANY-method}
\alias{transmission_parameters<-,SEIRD_RU-method}
\alias{transmission_parameters<-,ANY,ANY-method}
\alias{contact_matrices<-,SEIRD_RU-method}
\alias{contact_matrices<-,ANY,ANY-method}
\alias{country_demog<-,SEIRD_RU-method}
\alias{country_demog<-,ANY,ANY-method}
\alias{run,SEIRD_RU-method}
\alias{run,ANY,ANY-method}
\alias{R0,SEIRD_RU-method}
\alias{R0,ANY,ANY-method}
\title{An S4 object representing the SEIRD_RU.}
\usage{
\S4method{initial_conditions}{SEIRD_RU}(object)

\S4method{initial_cases_deaths}{SEIRD_RU}(object)

\S4method{transmission_parameters}{SEIRD_RU}(object)

\S4method{contact_matrices}{SEIRD_RU}(object)

\S4method{country_demog}{SEIRD_RU}(object)

\S4method{initial_conditions}{SEIRD_RU}(object) <- value

\S4method{transmission_parameters}{SEIRD_RU}(object) <- value

\S4method{contact_matrices}{SEIRD_RU}(object) <- value

\S4method{country_demog}{SEIRD_RU}(object) <- value

\S4method{run}{SEIRD_RU}(object, times = seq(0, 100, by = 1), solve_method = "lsoda")

\S4method{R0}{SEIRD_RU}(model)
}
\arguments{
\item{object}{an object of the class SEIRD_RU}

\item{value}{(list) list of 2 set of population fractions by age group}

\item{times}{(double) a sequence of time points at which the solution to
the system of ODEs should be returned. Must be of the form
seq(t_start, t_end, by=t_step). Default time series is seq(0, 100, by = 1).}

\item{solve_method}{(string) a string of chosen numerical integration method
for solving the ode system. Default is "lsoda" which is also the default for
the ode function in the deSolve package used in this function.}

\item{model}{a model of the class SEIRD_RU}
}
\value{
object of class SEIRD_RU with initial conditions assigned.

object of class SEIRD_RU with transmission parameter values
assigned.

object of class SEIRD_RU with contact matrices
assigned.

object of class SEIRD_RU with demographic data
assigned.

a dataframe with the time steps, time series of S, E, I and R
population fractions, and incidence numbers and deaths for both communities
in the SEIRD_RU model.

the value of R0
}
\description{
This class represents the SEIR model, showing how populations of susceptible,
exposed, infectious and recovered individuals evolve over time. The model
considers these populations in two types of communities: rural and urban.
This class considers the model where people DO NOT move between communities
but can infect people from the other community.
}
\section{Methods (by generic)}{
\itemize{
\item \code{initial_conditions}: Retrieves initial conditions of
SEIRD_RU model.

\item \code{initial_cases_deaths}: Retrieves initial cases and deaths of
SEIRD_RU model.

\item \code{transmission_parameters}: Retrieves transmission parameters of SEIR model.

\item \code{contact_matrices}: Retrieves contact matrices of SEIR model.

\item \code{country_demog}: Retrieves demographic data of SEIR model.

\item \code{initial_conditions<-}: Setter method for initial conditions
(S0, E0, I0 and R0) for both communities in the SEIR model.

All initial conditions must sum up to 1.
If the initial conditions provided to do not sum to 1, an error is thrown.

\item \code{transmission_parameters<-}: Setter method for transmission parameters
(b, k, g, m and C) of the SEIR model.

If the transmission parameters provided to are not 1-dimensional an error is
thrown.

\item \code{contact_matrices<-}: Setter method for contact matrices for
urban and rural communities in the SEIR model.
Matrices must be of type double

\item \code{country_demog<-}: Setter method for demographic data for urban
and rural communities in the SEIR model. both vectors together must sum to 1.

\item \code{run}: Solves ODEs of the SEIRD_RU specified
in object for the time points specified in times and integration method
specified in solve_method.

For the urban community:
\deqn{\frac{dS_U(t)}{dt} = - b S_U (I_U + I_Y) N_U C
                           - b S_U/f_urban I_U/f_urban N_U (1-C)}
\deqn{\frac{dE_U(t)}{dt} =  b S_U (I_U + I_Y) N_U C
                           + b S_U/f_urban I_U/f_urban N_U (1-C) -k E_U}
\deqn{\frac{dI_U(t)}{dt} = k E_U - (g + m) I_U}
\deqn{\frac{dR_U(t)}{dt} = g I_U}
\deqn{\frac{dC_U(t)}{dt} = b S_U (I_U + I_Y) N_U C
                           + b S_U/f_urban I_U/f_urban N_U (1-C)}
\deqn{\frac{dD_U(t)}{dt} = m I_U}

For the rural community:
\deqn{\frac{dS_Y(t)}{dt} = - b S_Y (I_U + I_Y) N_Y C
                           - b S_Y/f_rural I_Y/f_rural N_Y (1-C)}
\deqn{\frac{dE_Y(t)}{dt} =   b S_Y (I_U + I_Y) N_Y C
                           + b S_Y/f_rural I_Y/f_rural N_Y (1-C) - k E_Y}
\deqn{\frac{dI_Y(t)}{dt} = k E_Y - (g + m) I_Y}
\deqn{\frac{dR_Y(t)}{dt} = g I_Y}
\deqn{\frac{dC_Y(t)}{dt} =  b S_Y (I_U + I_Y) N_Y C
                           + b S_Y/f_rural I_Y/f_rural N_Y (1-C)}
\deqn{\frac{dD_Y(t)}{dt} = m I_Y}

This function relies on the package deSolve.

\item \code{R0}: Returns the value of R0 for the model with the specified
parameter values.
R0 is computed using the next generation matrix method.
}}

\section{Slots}{

\describe{
\item{\code{output_names}}{list of compartments name which are used by the model and
incidence.}

\item{\code{initial_condition_names}}{list of names of initial conditions
(characters). Default is list("S_U0", "E_U0", "I_U0", "R_U0", "S_Y0",
"E_Y0", "I_Y0", "R_Y0").}

\item{\code{initial_cases_deaths_names}}{name for initial cases and deaths
(characters). Default is list("C_U0", "D_U0", "C_Y0", "D_Y0").}

\item{\code{transmission_parameter_names}}{list of names of transmission parameters
(characters). Default is list("b", "k", "g", "m", "C").}

\item{\code{initial_conditions}}{list of values for initial conditions (double).}

\item{\code{initial_cases_deaths}}{list of values for initial cases and deaths.
Both set to 0, not to be changed by user (double).}

\item{\code{transmission_parameters}}{list of values for transmission parameters
(double).}

\item{\code{contact_matrices}}{list of two contact matrices, one for urban communties
and one for rural communities, normalized to population size (double).}

\item{\code{contact_matrices_names}}{list of names for two contact matrices,
one for urban communities and one for rural communities}

\item{\code{country_demog}}{list of vectors with percentage of population in each age
group in urban and rural community.}

\item{\code{country_demog_names}}{list of names for urban and rural demographic data.}
}}

