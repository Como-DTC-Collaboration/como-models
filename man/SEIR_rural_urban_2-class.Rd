% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SEIR_rural_urban_2.R
\docType{class}
\name{SEIR_rural_urban_2-class}
\alias{SEIR_rural_urban_2-class}
\alias{initial_conditions2,SEIR_rural_urban_2-method}
\alias{initial_conditions2,ANY,ANY-method}
\alias{initial_cases_deaths2,SEIR_rural_urban_2-method}
\alias{initial_cases_deaths2,ANY,ANY-method}
\alias{transmission_parameters2,SEIR_rural_urban_2-method}
\alias{transmission_parameters2,ANY,ANY-method}
\alias{initial_conditions2<-,SEIR_rural_urban_2-method}
\alias{initial_conditions2<-,ANY,ANY-method}
\alias{transmission_parameters2<-,SEIR_rural_urban_2-method}
\alias{transmission_parameters2<-,ANY,ANY-method}
\alias{simulate_SEIR_rural_urban_2,SEIR_rural_urban_2-method}
\alias{simulate_SEIR_rural_urban_2,ANY,ANY-method}
\title{An S4 object representing the SEIR_rural_urban_2.}
\usage{
\S4method{initial_conditions2}{SEIR_rural_urban_2}(object)

\S4method{initial_cases_deaths2}{SEIR_rural_urban_2}(object)

\S4method{transmission_parameters2}{SEIR_rural_urban_2}(object)

\S4method{initial_conditions2}{SEIR_rural_urban_2}(object) <- value

\S4method{transmission_parameters2}{SEIR_rural_urban_2}(object) <- value

\S4method{simulate_SEIR_rural_urban_2}{SEIR_rural_urban_2}(
  object,
  times = seq(0, 100, by = 1),
  solve_method = "lsoda"
)
}
\arguments{
\item{object}{an object of the class SEIR_rural_urban_2}

\item{value}{(list) list of values for "bu", "by", "k", "g", "m", "fsu", "fsy",
"feu", "fey", "fiu", "fiy", "fru", "fry", respectively.}

\item{times}{(double) a sequence of time points at which the solution to
the system of ODEs should be returned. Must be of the form
seq(t_start, t_end, by=t_step). Default time series is seq(0, 100, by = 1).}

\item{solve_method}{(string) a string of chosen numerical integration method
for solving the ode system. Default is "lsoda" which is also the default for
the ode function in the deSolve package used in this function.}
}
\value{
object of class SEIR_rural_urban_2 with initial conditions assigned.

object of class SEIR_rural_urban_2 with transmission parameter values
assigned.

a dataframe with the time steps, time series of S, E, I and R
population fractions, and incidence numbers and deaths for both communities
in the SEIR_rural_urban_2 model.
}
\description{
This class represents the SEIR model, showing how populations of susceptible,
exposed, infectious and recovered individuals evolve over time. The model
considers these populations in two types of communities: rural and urban.
This class considers the model where people DO  move between communities
but can only infect people in their own community
}
\section{Methods (by generic)}{
\itemize{
\item \code{initial_conditions2}: Retrieves initial conditions of SEIR_rural_urban_2 model.

\item \code{initial_cases_deaths2}: Retrieves initial cases and deaths of SEIR_rural_urban_2 model.

\item \code{transmission_parameters2}: Retrieves transmission parameters of SEIR model.

\item \code{initial_conditions2<-}: Setter method for initial conditions (S0, E0, I0 and R0)
for both communities in the SEIR model.

All initial conditions must sum up to 1.
If the initial conditions provided to do not sum to 1, an error is thrown.

\item \code{transmission_parameters2<-}: Setter method for transmission parameters
("bu", "by", "k", "g", "m", "fsu", "fsy", "feu", "fey", "fiu", "fiy", "fru",
"fry") of the SEIR model.

If the transmission parameters provided to are not 1-dimensional an error is
thrown.

\item \code{simulate_SEIR_rural_urban_2}: Solves ODEs of the SEIR_rural_urban_2 specified in object
for the time points specified in times and integration method specified in
solve_method.

For the urban community:
\deqn{\frac{dS_U(t)}{dt} = - b_U S_U(t) I_U(t) + \phi_{SY}S_Y - \phi_{SU}S_U}
\deqn{\frac{dE_U(t)}{dt} =  b_U S_U(t) I_U(t) - k E_U(t) + \phi_{EY}E_Y- \phi_{EU}E_U}
\deqn{\frac{dI_U(t)}{dt} = k E_U(t) - (g + m) I_U(t) + \phi_{IY}I_Y - \phi_{IU}I_U}
\deqn{\frac{dR_U(t)}{dt} = g I_U(t) + \phi_{RY}R_Y - \phi_{RU}R_U}
\deqn{\frac{dC_U(t)}{dt} = b_U S_U(t) I_U(t)}
\deqn{\frac{dD_U(t)}{dt} = m I_U(t)}

For the rural community:
\deqn{\frac{dS_Y(t)}{dt} = - b_Y S_Y(t) I_Y(t) + \phi_{SU}S_U - \phi_{SY}S_Y}
\deqn{\frac{dE_Y(t)}{dt} =  b_Y S_Y(t) I_Y(t) - k E_Y(t)  + \phi_{EU}E_U - \phi_{EY}E_Y}
\deqn{\frac{dI_Y(t)}{dt} = k E_Y(t) - (g + m) I_Y(t) + \phi_{IU}I_U - \phi_{IY}I_Y}
\deqn{\frac{dR_Y(t)}{dt} = g I_Y(t) + \phi_{RU}R_U - \phi_{RY}R_Y}
\deqn{\frac{dC_Y(t)}{dt} = b_Y S_Y(t) I_Y(t)}
\deqn{\frac{dD_Y(t)}{dt} = m I_Y(t)}

This function relies on the package deSolve.
}}

\section{Slots}{

\describe{
\item{\code{output_names2}}{list of compartments name which are used by the model and
incidence.}

\item{\code{initial_condition_names2}}{list of names of initial conditions
(characters). Default is list("S_U0", "E_U0", "I_U0", "R_U0", "S_Y0",
"E_Y0", "I_Y0", "R_Y0").}

\item{\code{initial_cases_deaths_names2}}{name for initial cases and deaths
(characters). Default is list("C_U0", "D_U0", "C_Y0", "D_Y0").}

\item{\code{transmission_parameter_names2}}{list of names of transmission parameters
(characters). Default is list("bu", "by", "k", "g", "m", "fsu", "fsy",
"feu", "fey", "fiu", "fiy", "fru", "fry").}

\item{\code{initial_conditions2}}{list of values for initial conditions (double).}

\item{\code{initial_cases_deaths2}}{list of values for initial cases and deaths.
Both set to 0, not to be changed by user (double).}

\item{\code{transmission_parameters2}}{list of values for transmission parameters
(double).}
}}

